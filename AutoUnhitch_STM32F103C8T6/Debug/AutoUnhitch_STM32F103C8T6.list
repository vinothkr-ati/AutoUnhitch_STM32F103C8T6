
AutoUnhitch_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074ac  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080075bc  080075bc  000085bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d8  080076d8  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080076d8  080076d8  00009060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080076d8  080076d8  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d8  080076d8  000086d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076dc  080076dc  000086dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080076e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce0  20000060  08007740  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d40  08007740  00009d40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176a4  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003765  00000000  00000000  0002072d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00023e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd5  00000000  00000000  00025330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192cf  00000000  00000000  00026305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153ac  00000000  00000000  0003f5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099c67  00000000  00000000  00054980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee5e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000592c  00000000  00000000  000ee62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f3f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080075a4 	.word	0x080075a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080075a4 	.word	0x080075a4

08000150 <ADC_Select_CH0>:
 */

#include "ADC_Readings.h"

void ADC_Select_CH0 (void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8000160:	2300      	movs	r3, #0
 8000162:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000164:	2301      	movs	r3, #1
 8000166:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000168:	2302      	movs	r3, #2
 800016a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&ADC_Select, &sConfig) != HAL_OK)
 800016c:	1d3b      	adds	r3, r7, #4
 800016e:	4619      	mov	r1, r3
 8000170:	4805      	ldr	r0, [pc, #20]	@ (8000188 <ADC_Select_CH0+0x38>)
 8000172:	f001 fa87 	bl	8001684 <HAL_ADC_ConfigChannel>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <ADC_Select_CH0+0x30>
	  {
	    Error_Handler();
 800017c:	f000 fd3e 	bl	8000bfc <Error_Handler>
	  }
}
 8000180:	bf00      	nop
 8000182:	3710      	adds	r7, #16
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}
 8000188:	200000d4 	.word	0x200000d4

0800018c <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 800019c:	2301      	movs	r3, #1
 800019e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80001a4:	2302      	movs	r3, #2
 80001a6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&ADC_Select, &sConfig) != HAL_OK)
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4619      	mov	r1, r3
 80001ac:	4805      	ldr	r0, [pc, #20]	@ (80001c4 <ADC_Select_CH1+0x38>)
 80001ae:	f001 fa69 	bl	8001684 <HAL_ADC_ConfigChannel>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 80001b8:	f000 fd20 	bl	8000bfc <Error_Handler>
	  }
}
 80001bc:	bf00      	nop
 80001be:	3710      	adds	r7, #16
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	200000d4 	.word	0x200000d4

080001c8 <ADC_Select_CH2>:

void ADC_Select_CH2 (void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 80001d8:	2302      	movs	r3, #2
 80001da:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80001dc:	2301      	movs	r3, #1
 80001de:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80001e0:	2302      	movs	r3, #2
 80001e2:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&ADC_Select, &sConfig) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	4619      	mov	r1, r3
 80001e8:	4805      	ldr	r0, [pc, #20]	@ (8000200 <ADC_Select_CH2+0x38>)
 80001ea:	f001 fa4b 	bl	8001684 <HAL_ADC_ConfigChannel>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 80001f4:	f000 fd02 	bl	8000bfc <Error_Handler>
	  }
}
 80001f8:	bf00      	nop
 80001fa:	3710      	adds	r7, #16
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	200000d4 	.word	0x200000d4

08000204 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8000214:	2303      	movs	r3, #3
 8000216:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000218:	2301      	movs	r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800021c:	2302      	movs	r3, #2
 800021e:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&ADC_Select, &sConfig) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4619      	mov	r1, r3
 8000224:	4805      	ldr	r0, [pc, #20]	@ (800023c <ADC_Select_CH3+0x38>)
 8000226:	f001 fa2d 	bl	8001684 <HAL_ADC_ConfigChannel>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 8000230:	f000 fce4 	bl	8000bfc <Error_Handler>
	  }
}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000d4 	.word	0x200000d4

08000240 <ADC_Auto_Unhitch_Read>:





uint32_t ADC_Auto_Unhitch_Read(uint32_t  adc_read[] )  {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]


	ADC_Select_CH0();
 8000248:	f7ff ff82 	bl	8000150 <ADC_Select_CH0>
	HAL_ADC_Start(&ADC_Select);
 800024c:	480a      	ldr	r0, [pc, #40]	@ (8000278 <ADC_Auto_Unhitch_Read+0x38>)
 800024e:	f001 f82d 	bl	80012ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000252:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000256:	4808      	ldr	r0, [pc, #32]	@ (8000278 <ADC_Auto_Unhitch_Read+0x38>)
 8000258:	f001 f902 	bl	8001460 <HAL_ADC_PollForConversion>
	adc_read[0] = HAL_ADC_GetValue(&hadc1);
 800025c:	4806      	ldr	r0, [pc, #24]	@ (8000278 <ADC_Auto_Unhitch_Read+0x38>)
 800025e:	f001 fa05 	bl	800166c <HAL_ADC_GetValue>
 8000262:	4602      	mov	r2, r0
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&ADC_Select);
 8000268:	4803      	ldr	r0, [pc, #12]	@ (8000278 <ADC_Auto_Unhitch_Read+0x38>)
 800026a:	f001 f8cd 	bl	8001408 <HAL_ADC_Stop>

	return 0;
 800026e:	2300      	movs	r3, #0
}
 8000270:	4618      	mov	r0, r3
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	200000d4 	.word	0x200000d4

0800027c <ADC_Current_Sensor_1_Read>:

uint8_t ADC_Current_Sensor_1_Read(uint32_t  adc_read[])  {
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]

	uint8_t Current_Sensor1 = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	73fb      	strb	r3, [r7, #15]
	float A_SEN1 =0;
 8000288:	f04f 0300 	mov.w	r3, #0
 800028c:	60bb      	str	r3, [r7, #8]
	ADC_Select_CH1();
 800028e:	f7ff ff7d 	bl	800018c <ADC_Select_CH1>
	HAL_ADC_Start(&ADC_Select);
 8000292:	480b      	ldr	r0, [pc, #44]	@ (80002c0 <ADC_Current_Sensor_1_Read+0x44>)
 8000294:	f001 f80a 	bl	80012ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000298:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800029c:	4808      	ldr	r0, [pc, #32]	@ (80002c0 <ADC_Current_Sensor_1_Read+0x44>)
 800029e:	f001 f8df 	bl	8001460 <HAL_ADC_PollForConversion>
	adc_read[1] = HAL_ADC_GetValue(&hadc1);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	1d1c      	adds	r4, r3, #4
 80002a6:	4806      	ldr	r0, [pc, #24]	@ (80002c0 <ADC_Current_Sensor_1_Read+0x44>)
 80002a8:	f001 f9e0 	bl	800166c <HAL_ADC_GetValue>
 80002ac:	4603      	mov	r3, r0
 80002ae:	6023      	str	r3, [r4, #0]
	HAL_ADC_Stop(&ADC_Select);
 80002b0:	4803      	ldr	r0, [pc, #12]	@ (80002c0 <ADC_Current_Sensor_1_Read+0x44>)
 80002b2:	f001 f8a9 	bl	8001408 <HAL_ADC_Stop>
//	A_SEN1 = ( (float)ADC_VAL[2] + 89.42 ) /266.3;
//	A_SEN1 = A_SEN1 * 10;
//	Current_Sensor1 = (uint8_t)A_SEN1;


	return 0;
 80002b6:	2300      	movs	r3, #0
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd90      	pop	{r4, r7, pc}
 80002c0:	200000d4 	.word	0x200000d4

080002c4 <ADC_Current_Sensor_2_Read>:

uint8_t ADC_Current_Sensor_2_Read(uint32_t  adc_read[])  {
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

	uint8_t Current_Sensor2 = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	73fb      	strb	r3, [r7, #15]
	float A_SEN2 =0;
 80002d0:	f04f 0300 	mov.w	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
	ADC_Select_CH2();
 80002d6:	f7ff ff77 	bl	80001c8 <ADC_Select_CH2>
	HAL_ADC_Start(&ADC_Select);
 80002da:	480c      	ldr	r0, [pc, #48]	@ (800030c <ADC_Current_Sensor_2_Read+0x48>)
 80002dc:	f000 ffe6 	bl	80012ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80002e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80002e4:	4809      	ldr	r0, [pc, #36]	@ (800030c <ADC_Current_Sensor_2_Read+0x48>)
 80002e6:	f001 f8bb 	bl	8001460 <HAL_ADC_PollForConversion>
	adc_read[2] = HAL_ADC_GetValue(&ADC_Select);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f103 0408 	add.w	r4, r3, #8
 80002f0:	4806      	ldr	r0, [pc, #24]	@ (800030c <ADC_Current_Sensor_2_Read+0x48>)
 80002f2:	f001 f9bb 	bl	800166c <HAL_ADC_GetValue>
 80002f6:	4603      	mov	r3, r0
 80002f8:	6023      	str	r3, [r4, #0]
	HAL_ADC_Stop(&ADC_Select);
 80002fa:	4804      	ldr	r0, [pc, #16]	@ (800030c <ADC_Current_Sensor_2_Read+0x48>)
 80002fc:	f001 f884 	bl	8001408 <HAL_ADC_Stop>
//	A_SEN2 = ( (float)ADC_VAL[3] + 89.42 ) /266.3;
//	A_SEN2 = A_SEN2 * 10;
//	Current_Sensor2 = (uint8_t)A_SEN2;

	return 0;
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bd90      	pop	{r4, r7, pc}
 800030a:	bf00      	nop
 800030c:	200000d4 	.word	0x200000d4

08000310 <ADC_24V_Read>:

uint32_t ADC_24V_Read(uint32_t  adc_read[])  {
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]



	ADC_Select_CH3();
 8000318:	f7ff ff74 	bl	8000204 <ADC_Select_CH3>
	HAL_ADC_Start(&ADC_Select);
 800031c:	480b      	ldr	r0, [pc, #44]	@ (800034c <ADC_24V_Read+0x3c>)
 800031e:	f000 ffc5 	bl	80012ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000322:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000326:	4809      	ldr	r0, [pc, #36]	@ (800034c <ADC_24V_Read+0x3c>)
 8000328:	f001 f89a 	bl	8001460 <HAL_ADC_PollForConversion>
	adc_read[3] = HAL_ADC_GetValue(&ADC_Select);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f103 040c 	add.w	r4, r3, #12
 8000332:	4806      	ldr	r0, [pc, #24]	@ (800034c <ADC_24V_Read+0x3c>)
 8000334:	f001 f99a 	bl	800166c <HAL_ADC_GetValue>
 8000338:	4603      	mov	r3, r0
 800033a:	6023      	str	r3, [r4, #0]
	HAL_ADC_Stop(&ADC_Select);
 800033c:	4803      	ldr	r0, [pc, #12]	@ (800034c <ADC_24V_Read+0x3c>)
 800033e:	f001 f863 	bl	8001408 <HAL_ADC_Stop>

	return 0;
 8000342:	2300      	movs	r3, #0
}
 8000344:	4618      	mov	r0, r3
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bd90      	pop	{r4, r7, pc}
 800034c:	200000d4 	.word	0x200000d4

08000350 <Delay_Micro_Seconds>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Delay_Micro_Seconds (uint16_t us)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 800035a:	4b08      	ldr	r3, [pc, #32]	@ (800037c <Delay_Micro_Seconds+0x2c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2200      	movs	r2, #0
 8000360:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 8000362:	bf00      	nop
 8000364:	4b05      	ldr	r3, [pc, #20]	@ (800037c <Delay_Micro_Seconds+0x2c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	429a      	cmp	r2, r3
 800036e:	d3f9      	bcc.n	8000364 <Delay_Micro_Seconds+0x14>
}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	20000174 	.word	0x20000174

08000380 <HAL_CAN_RxFifo0MsgPendingCallback>:
}



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]


    if (hcan->Instance == CAN1)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a3d      	ldr	r2, [pc, #244]	@ (8000484 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d174      	bne.n	800047c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
       {
            HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN1RX_Header, CAN1RX_DATA);
 8000392:	4b3d      	ldr	r3, [pc, #244]	@ (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000394:	4a3d      	ldr	r2, [pc, #244]	@ (800048c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000396:	2100      	movs	r1, #0
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f001 fd0e 	bl	8001dba <HAL_CAN_GetRxMessage>
            // Process CAN1 Data here
            CAN1_Queue_TX[0] = CAN1RX_DATA[0];
 800039e:	4b3a      	ldr	r3, [pc, #232]	@ (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80003a6:	701a      	strb	r2, [r3, #0]
			CAN1_Queue_TX[1] = CAN1RX_DATA[1];
 80003a8:	4b37      	ldr	r3, [pc, #220]	@ (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003aa:	785b      	ldrb	r3, [r3, #1]
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4b38      	ldr	r3, [pc, #224]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80003b0:	705a      	strb	r2, [r3, #1]
			CAN1_Queue_TX[2] = CAN1RX_DATA[2];
 80003b2:	4b35      	ldr	r3, [pc, #212]	@ (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003b4:	789b      	ldrb	r3, [r3, #2]
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	4b35      	ldr	r3, [pc, #212]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80003ba:	709a      	strb	r2, [r3, #2]
			CAN1_Queue_TX[3] = CAN1RX_DATA[3];
 80003bc:	4b32      	ldr	r3, [pc, #200]	@ (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003be:	78db      	ldrb	r3, [r3, #3]
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b33      	ldr	r3, [pc, #204]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80003c4:	70da      	strb	r2, [r3, #3]

			CAN1_Queue_TX[4] = CAN1RX_DATA[4];
 80003c6:	4b30      	ldr	r3, [pc, #192]	@ (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003c8:	791b      	ldrb	r3, [r3, #4]
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4b30      	ldr	r3, [pc, #192]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80003ce:	711a      	strb	r2, [r3, #4]
			CAN1_Queue_TX[5] = CAN1RX_DATA[5];
 80003d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80003d8:	715a      	strb	r2, [r3, #5]
			CAN1_Queue_TX[6] = CAN1RX_DATA[6];
 80003da:	4b2b      	ldr	r3, [pc, #172]	@ (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003dc:	799b      	ldrb	r3, [r3, #6]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80003e2:	719a      	strb	r2, [r3, #6]
			CAN1_Queue_TX[7] = CAN1RX_DATA[7];
 80003e4:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80003e6:	79db      	ldrb	r3, [r3, #7]
 80003e8:	b2da      	uxtb	r2, r3
 80003ea:	4b29      	ldr	r3, [pc, #164]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80003ec:	71da      	strb	r2, [r3, #7]

			//		CAN1_RX_DLC = RxHeader.DLC;

			CAN1RX_IDE_DATA = CAN1RX_Header.IDE;
 80003ee:	4b27      	ldr	r3, [pc, #156]	@ (800048c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	4a28      	ldr	r2, [pc, #160]	@ (8000494 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80003f4:	6013      	str	r3, [r2, #0]
			if(CAN1RX_IDE_DATA == 0) {
 80003f6:	4b27      	ldr	r3, [pc, #156]	@ (8000494 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d11b      	bne.n	8000436 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
				CAN1RX_Std_ID_DATA = CAN1RX_Header.StdId;
 80003fe:	4b23      	ldr	r3, [pc, #140]	@ (800048c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a25      	ldr	r2, [pc, #148]	@ (8000498 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000404:	6013      	str	r3, [r2, #0]
				CAN1_Queue_TX[8]  =  (CAN1RX_Std_ID_DATA >> 0)  & 0xFF;
 8000406:	4b24      	ldr	r3, [pc, #144]	@ (8000498 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	4b20      	ldr	r3, [pc, #128]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800040e:	721a      	strb	r2, [r3, #8]
				CAN1_Queue_TX[9]  =  (CAN1RX_Std_ID_DATA >> 8)  & 0xFF;
 8000410:	4b21      	ldr	r3, [pc, #132]	@ (8000498 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	0a1b      	lsrs	r3, r3, #8
 8000416:	b2da      	uxtb	r2, r3
 8000418:	4b1d      	ldr	r3, [pc, #116]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800041a:	725a      	strb	r2, [r3, #9]
				CAN1_Queue_TX[10] =  (CAN1RX_Std_ID_DATA >> 16) & 0xFF;
 800041c:	4b1e      	ldr	r3, [pc, #120]	@ (8000498 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	0c1b      	lsrs	r3, r3, #16
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000426:	729a      	strb	r2, [r3, #10]
				CAN1_Queue_TX[11] =  (CAN1RX_Std_ID_DATA >> 24) & 0xFF;
 8000428:	4b1b      	ldr	r3, [pc, #108]	@ (8000498 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	0e1b      	lsrs	r3, r3, #24
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b17      	ldr	r3, [pc, #92]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000432:	72da      	strb	r2, [r3, #11]
 8000434:	e01a      	b.n	800046c <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
			}else {
				CAN1RX_Ext_ID_DATA = CAN1RX_Header.ExtId;
 8000436:	4b15      	ldr	r3, [pc, #84]	@ (800048c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	4a18      	ldr	r2, [pc, #96]	@ (800049c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800043c:	6013      	str	r3, [r2, #0]
				CAN1_Queue_TX[8] =  (CAN1RX_Ext_ID_DATA >> 0)  & 0xFF;
 800043e:	4b17      	ldr	r3, [pc, #92]	@ (800049c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000446:	721a      	strb	r2, [r3, #8]
				CAN1_Queue_TX[9] = (CAN1RX_Ext_ID_DATA >> 8)  & 0xFF;
 8000448:	4b14      	ldr	r3, [pc, #80]	@ (800049c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	0a1b      	lsrs	r3, r3, #8
 800044e:	b2da      	uxtb	r2, r3
 8000450:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000452:	725a      	strb	r2, [r3, #9]
				CAN1_Queue_TX[10] = (CAN1RX_Ext_ID_DATA >> 16) & 0xFF;
 8000454:	4b11      	ldr	r3, [pc, #68]	@ (800049c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	0c1b      	lsrs	r3, r3, #16
 800045a:	b2da      	uxtb	r2, r3
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800045e:	729a      	strb	r2, [r3, #10]
				CAN1_Queue_TX[11] = (CAN1RX_Ext_ID_DATA >> 24) & 0xFF;
 8000460:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	0e1b      	lsrs	r3, r3, #24
 8000466:	b2da      	uxtb	r2, r3
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800046a:	72da      	strb	r2, [r3, #11]
			}
			 // Attempt to send data to the queue in a non-blocking way
			osStatus_t status = osMessageQueuePut(CAN1RX_Data_QueueHandle, CAN1_Queue_TX, 0, 0);  // No timeout, no blocking
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	2300      	movs	r3, #0
 8000472:	2200      	movs	r2, #0
 8000474:	4906      	ldr	r1, [pc, #24]	@ (8000490 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000476:	f004 f9e5 	bl	8004844 <osMessageQueuePut>
 800047a:	60f8      	str	r0, [r7, #12]
			  // Queue full, data not sent; could handle this or log it
			}


       }
}
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40006400 	.word	0x40006400
 8000488:	200000b8 	.word	0x200000b8
 800048c:	20000090 	.word	0x20000090
 8000490:	200000ac 	.word	0x200000ac
 8000494:	200000c4 	.word	0x200000c4
 8000498:	200000c8 	.word	0x200000c8
 800049c:	200000cc 	.word	0x200000cc
 80004a0:	200001c8 	.word	0x200001c8

080004a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a8:	f000 fdd2 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ac:	f000 f888 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b0:	f000 fa72 	bl	8000998 <MX_GPIO_Init>
  MX_CAN_Init();
 80004b4:	f000 f968 	bl	8000788 <MX_CAN_Init>
  MX_ADC1_Init();
 80004b8:	f000 f8de 	bl	8000678 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004bc:	f000 f99a 	bl	80007f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80004c0:	f000 fa1c 	bl	80008fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(100);// just normal
 80004c4:	2064      	movs	r0, #100	@ 0x64
 80004c6:	f000 fdf5 	bl	80010b4 <HAL_Delay>
	//Timer PWM Start for uS delay generation
		HAL_TIM_Base_Start(&htim3);
 80004ca:	482c      	ldr	r0, [pc, #176]	@ (800057c <main+0xd8>)
 80004cc:	f003 f870 	bl	80035b0 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004d6:	482a      	ldr	r0, [pc, #168]	@ (8000580 <main+0xdc>)
 80004d8:	f002 fa53 	bl	8002982 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f000 fde9 	bl	80010b4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004e8:	4825      	ldr	r0, [pc, #148]	@ (8000580 <main+0xdc>)
 80004ea:	f002 fa4a 	bl	8002982 <HAL_GPIO_WritePin>

	// Must have Delay
	Delay_Micro_Seconds(15);
 80004ee:	200f      	movs	r0, #15
 80004f0:	f7ff ff2e 	bl	8000350 <Delay_Micro_Seconds>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004fa:	4821      	ldr	r0, [pc, #132]	@ (8000580 <main+0xdc>)
 80004fc:	f002 fa41 	bl	8002982 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000500:	2005      	movs	r0, #5
 8000502:	f000 fdd7 	bl	80010b4 <HAL_Delay>
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000506:	2100      	movs	r1, #0
 8000508:	481e      	ldr	r0, [pc, #120]	@ (8000584 <main+0xe0>)
 800050a:	f003 f93d 	bl	8003788 <HAL_TIM_PWM_Start>


	  TIM1->CCR1 = 250;
 800050e:	4b1e      	ldr	r3, [pc, #120]	@ (8000588 <main+0xe4>)
 8000510:	22fa      	movs	r2, #250	@ 0xfa
 8000512:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800051a:	481c      	ldr	r0, [pc, #112]	@ (800058c <main+0xe8>)
 800051c:	f002 fa31 	bl	8002982 <HAL_GPIO_WritePin>
	//CAN Start
	HAL_CAN_Start(&hcan);
 8000520:	481b      	ldr	r0, [pc, #108]	@ (8000590 <main+0xec>)
 8000522:	f001 fc06 	bl	8001d32 <HAL_CAN_Start>

	// Activate the notification
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000526:	2102      	movs	r1, #2
 8000528:	4819      	ldr	r0, [pc, #100]	@ (8000590 <main+0xec>)
 800052a:	f001 fd67 	bl	8001ffc <HAL_CAN_ActivateNotification>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052e:	f004 f821 	bl	8004574 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CAN1RX_Data_Queue */
  CAN1RX_Data_QueueHandle = osMessageQueueNew (20, sizeof(CAN1_Queue_TX), &CAN1RX_Data_Queue_attributes);
 8000532:	4a18      	ldr	r2, [pc, #96]	@ (8000594 <main+0xf0>)
 8000534:	210c      	movs	r1, #12
 8000536:	2014      	movs	r0, #20
 8000538:	f004 f911 	bl	800475e <osMessageQueueNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a16      	ldr	r2, [pc, #88]	@ (8000598 <main+0xf4>)
 8000540:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Read_Sensors */
  Read_SensorsHandle = osThreadNew(Read_Sensors_Func, NULL, &Read_Sensors_attributes);
 8000542:	4a16      	ldr	r2, [pc, #88]	@ (800059c <main+0xf8>)
 8000544:	2100      	movs	r1, #0
 8000546:	4816      	ldr	r0, [pc, #88]	@ (80005a0 <main+0xfc>)
 8000548:	f004 f85c 	bl	8004604 <osThreadNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a15      	ldr	r2, [pc, #84]	@ (80005a4 <main+0x100>)
 8000550:	6013      	str	r3, [r2, #0]

  /* creation of CANRX_Data_Proc */
  CANRX_Data_ProcHandle = osThreadNew(CANRX_Data_Process_Func, NULL, &CANRX_Data_Proc_attributes);
 8000552:	4a15      	ldr	r2, [pc, #84]	@ (80005a8 <main+0x104>)
 8000554:	2100      	movs	r1, #0
 8000556:	4815      	ldr	r0, [pc, #84]	@ (80005ac <main+0x108>)
 8000558:	f004 f854 	bl	8004604 <osThreadNew>
 800055c:	4603      	mov	r3, r0
 800055e:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <main+0x10c>)
 8000560:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000562:	4a14      	ldr	r2, [pc, #80]	@ (80005b4 <main+0x110>)
 8000564:	2100      	movs	r1, #0
 8000566:	4814      	ldr	r0, [pc, #80]	@ (80005b8 <main+0x114>)
 8000568:	f004 f84c 	bl	8004604 <osThreadNew>
 800056c:	4603      	mov	r3, r0
 800056e:	4a13      	ldr	r2, [pc, #76]	@ (80005bc <main+0x118>)
 8000570:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000572:	f004 f821 	bl	80045b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000576:	bf00      	nop
 8000578:	e7fd      	b.n	8000576 <main+0xd2>
 800057a:	bf00      	nop
 800057c:	20000174 	.word	0x20000174
 8000580:	40010c00 	.word	0x40010c00
 8000584:	2000012c 	.word	0x2000012c
 8000588:	40012c00 	.word	0x40012c00
 800058c:	40010800 	.word	0x40010800
 8000590:	20000104 	.word	0x20000104
 8000594:	08007680 	.word	0x08007680
 8000598:	200001c8 	.word	0x200001c8
 800059c:	08007614 	.word	0x08007614
 80005a0:	08000ad9 	.word	0x08000ad9
 80005a4:	200001bc 	.word	0x200001bc
 80005a8:	08007638 	.word	0x08007638
 80005ac:	08000b65 	.word	0x08000b65
 80005b0:	200001c0 	.word	0x200001c0
 80005b4:	0800765c 	.word	0x0800765c
 80005b8:	08000bb5 	.word	0x08000bb5
 80005bc:	200001c4 	.word	0x200001c4

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005ca:	2228      	movs	r2, #40	@ 0x28
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 fefa 	bl	80073c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80005fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80005fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000608:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800060e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000618:	4618      	mov	r0, r3
 800061a:	f002 f9cb 	bl	80029b4 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000624:	f000 faea 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000638:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fc37 	bl	8002eb8 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 fad4 	bl	8000bfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000654:	2302      	movs	r3, #2
 8000656:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000658:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800065c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fde9 	bl	8003238 <HAL_RCCEx_PeriphCLKConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800066c:	f000 fac6 	bl	8000bfc <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	@ 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08e      	sub	sp, #56	@ 0x38
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068a:	4b3c      	ldr	r3, [pc, #240]	@ (800077c <MX_ADC1_Init+0x104>)
 800068c:	4a3c      	ldr	r2, [pc, #240]	@ (8000780 <MX_ADC1_Init+0x108>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000690:	4b3a      	ldr	r3, [pc, #232]	@ (800077c <MX_ADC1_Init+0x104>)
 8000692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000696:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000698:	4b38      	ldr	r3, [pc, #224]	@ (800077c <MX_ADC1_Init+0x104>)
 800069a:	2201      	movs	r2, #1
 800069c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069e:	4b37      	ldr	r3, [pc, #220]	@ (800077c <MX_ADC1_Init+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a4:	4b35      	ldr	r3, [pc, #212]	@ (800077c <MX_ADC1_Init+0x104>)
 80006a6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80006aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ac:	4b33      	ldr	r3, [pc, #204]	@ (800077c <MX_ADC1_Init+0x104>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80006b2:	4b32      	ldr	r3, [pc, #200]	@ (800077c <MX_ADC1_Init+0x104>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b8:	4830      	ldr	r0, [pc, #192]	@ (800077c <MX_ADC1_Init+0x104>)
 80006ba:	f000 fd1f 	bl	80010fc <HAL_ADC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x50>
  {
    Error_Handler();
 80006c4:	f000 fa9a 	bl	8000bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80006d0:	2302      	movs	r3, #2
 80006d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006d8:	4619      	mov	r1, r3
 80006da:	4828      	ldr	r0, [pc, #160]	@ (800077c <MX_ADC1_Init+0x104>)
 80006dc:	f000 ffd2 	bl	8001684 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006e6:	f000 fa89 	bl	8000bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006f6:	4619      	mov	r1, r3
 80006f8:	4820      	ldr	r0, [pc, #128]	@ (800077c <MX_ADC1_Init+0x104>)
 80006fa:	f000 ffc3 	bl	8001684 <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000704:	f000 fa7a 	bl	8000bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800070c:	2303      	movs	r3, #3
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000714:	4619      	mov	r1, r3
 8000716:	4819      	ldr	r0, [pc, #100]	@ (800077c <MX_ADC1_Init+0x104>)
 8000718:	f000 ffb4 	bl	8001684 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000722:	f000 fa6b 	bl	8000bfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000726:	2304      	movs	r3, #4
 8000728:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800072e:	4619      	mov	r1, r3
 8000730:	4812      	ldr	r0, [pc, #72]	@ (800077c <MX_ADC1_Init+0x104>)
 8000732:	f000 ffa7 	bl	8001684 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800073c:	f000 fa5e 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  CAN_FilterTypeDef can1FilterConfig;
  can1FilterConfig.FilterBank = 0;                           // Bank 0 for CAN1
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  can1FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  can1FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  can1FilterConfig.FilterIdHigh = 0x0000;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  can1FilterConfig.FilterIdLow = 0x0000;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  can1FilterConfig.FilterMaskIdHigh = 0x0000;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  can1FilterConfig.FilterMaskIdLow = 0x0000;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  can1FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;  // ⬅️ FIFO0 for CAN1
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  can1FilterConfig.FilterActivation = ENABLE;
 8000760:	2301      	movs	r3, #1
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
  can1FilterConfig.SlaveStartFilterBank = 0;           // doesn't matter in single can controllers
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_CAN_ConfigFilter(&hcan, &can1FilterConfig);
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_ADC1_Init+0x10c>)
 800076e:	f001 fa17 	bl	8001ba0 <HAL_CAN_ConfigFilter>



  /* USER CODE END ADC1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3738      	adds	r7, #56	@ 0x38
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000d4 	.word	0x200000d4
 8000780:	40012400 	.word	0x40012400
 8000784:	20000104 	.word	0x20000104

08000788 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_CAN_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	@ (80007f0 <MX_CAN_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_CAN_Init+0x64>)
 8000794:	2204      	movs	r2, #4
 8000796:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_CAN_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_CAN_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_CAN_Init+0x64>)
 80007a6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80007aa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_CAN_Init+0x64>)
 80007ae:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80007b2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <MX_CAN_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_CAN_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_CAN_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_CAN_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_CAN_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_CAN_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_CAN_Init+0x64>)
 80007da:	f001 f8e6 	bl	80019aa <HAL_CAN_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 fa0a 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000104 	.word	0x20000104
 80007f0:	40006400 	.word	0x40006400

080007f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b092      	sub	sp, #72	@ 0x48
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2220      	movs	r2, #32
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f006 fdd2 	bl	80073c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000824:	4b33      	ldr	r3, [pc, #204]	@ (80008f4 <MX_TIM1_Init+0x100>)
 8000826:	4a34      	ldr	r2, [pc, #208]	@ (80008f8 <MX_TIM1_Init+0x104>)
 8000828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800082a:	4b32      	ldr	r3, [pc, #200]	@ (80008f4 <MX_TIM1_Init+0x100>)
 800082c:	2247      	movs	r2, #71	@ 0x47
 800082e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b30      	ldr	r3, [pc, #192]	@ (80008f4 <MX_TIM1_Init+0x100>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8000836:	4b2f      	ldr	r3, [pc, #188]	@ (80008f4 <MX_TIM1_Init+0x100>)
 8000838:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800083c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b2d      	ldr	r3, [pc, #180]	@ (80008f4 <MX_TIM1_Init+0x100>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000844:	4b2b      	ldr	r3, [pc, #172]	@ (80008f4 <MX_TIM1_Init+0x100>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084a:	4b2a      	ldr	r3, [pc, #168]	@ (80008f4 <MX_TIM1_Init+0x100>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000850:	4828      	ldr	r0, [pc, #160]	@ (80008f4 <MX_TIM1_Init+0x100>)
 8000852:	f002 ff49 	bl	80036e8 <HAL_TIM_PWM_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800085c:	f000 f9ce 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000868:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800086c:	4619      	mov	r1, r3
 800086e:	4821      	ldr	r0, [pc, #132]	@ (80008f4 <MX_TIM1_Init+0x100>)
 8000870:	f003 fd7a 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800087a:	f000 f9bf 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	2360      	movs	r3, #96	@ 0x60
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	4619      	mov	r1, r3
 80008a2:	4814      	ldr	r0, [pc, #80]	@ (80008f4 <MX_TIM1_Init+0x100>)
 80008a4:	f003 f902 	bl	8003aac <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80008ae:	f000 f9a5 	bl	8000bfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <MX_TIM1_Init+0x100>)
 80008d6:	f003 fda5 	bl	8004424 <HAL_TIMEx_ConfigBreakDeadTime>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80008e0:	f000 f98c 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008e4:	4803      	ldr	r0, [pc, #12]	@ (80008f4 <MX_TIM1_Init+0x100>)
 80008e6:	f000 faa7 	bl	8000e38 <HAL_TIM_MspPostInit>

}
 80008ea:	bf00      	nop
 80008ec:	3748      	adds	r7, #72	@ 0x48
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000012c 	.word	0x2000012c
 80008f8:	40012c00 	.word	0x40012c00

080008fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_TIM3_Init+0x94>)
 800091a:	4a1e      	ldr	r2, [pc, #120]	@ (8000994 <MX_TIM3_Init+0x98>)
 800091c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_TIM3_Init+0x94>)
 8000920:	2247      	movs	r2, #71	@ 0x47
 8000922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_TIM3_Init+0x94>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_TIM3_Init+0x94>)
 800092c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_TIM3_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_TIM3_Init+0x94>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <MX_TIM3_Init+0x94>)
 8000940:	f002 fde6 	bl	8003510 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 f957 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4619      	mov	r1, r3
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_TIM3_Init+0x94>)
 800095c:	f003 f968 	bl	8003c30 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 f949 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_TIM3_Init+0x94>)
 8000978:	f003 fcf6 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000982:	f000 f93b 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000174 	.word	0x20000174
 8000994:	40000400 	.word	0x40000400

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ac:	4b46      	ldr	r3, [pc, #280]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a45      	ldr	r2, [pc, #276]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b43      	ldr	r3, [pc, #268]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c4:	4b40      	ldr	r3, [pc, #256]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a3f      	ldr	r2, [pc, #252]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009ca:	f043 0320 	orr.w	r3, r3, #32
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0320 	and.w	r3, r3, #32
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a39      	ldr	r2, [pc, #228]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b37      	ldr	r3, [pc, #220]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b34      	ldr	r3, [pc, #208]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a33      	ldr	r2, [pc, #204]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b31      	ldr	r3, [pc, #196]	@ (8000ac8 <MX_GPIO_Init+0x130>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0308 	and.w	r3, r3, #8
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a12:	482e      	ldr	r0, [pc, #184]	@ (8000acc <MX_GPIO_Init+0x134>)
 8000a14:	f001 ffb5 	bl	8002982 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a1e:	482c      	ldr	r0, [pc, #176]	@ (8000ad0 <MX_GPIO_Init+0x138>)
 8000a20:	f001 ffaf 	bl	8002982 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a2a:	482a      	ldr	r0, [pc, #168]	@ (8000ad4 <MX_GPIO_Init+0x13c>)
 8000a2c:	f001 ffa9 	bl	8002982 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	4820      	ldr	r0, [pc, #128]	@ (8000acc <MX_GPIO_Init+0x134>)
 8000a4a:	f001 fdff 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4619      	mov	r1, r3
 8000a66:	481a      	ldr	r0, [pc, #104]	@ (8000ad0 <MX_GPIO_Init+0x138>)
 8000a68:	f001 fdf0 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a6c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4813      	ldr	r0, [pc, #76]	@ (8000ad0 <MX_GPIO_Init+0x138>)
 8000a82:	f001 fde3 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <MX_GPIO_Init+0x13c>)
 8000aa0:	f001 fdd4 	bl	800264c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4806      	ldr	r0, [pc, #24]	@ (8000ad4 <MX_GPIO_Init+0x13c>)
 8000aba:	f001 fdc7 	bl	800264c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40011000 	.word	0x40011000
 8000ad0:	40010c00 	.word	0x40010c00
 8000ad4:	40010800 	.word	0x40010800

08000ad8 <Read_Sensors_Func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_Sensors_Func */
void Read_Sensors_Func(void *argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	ADC_Auto_Unhitch_Read(ADC_VAL);
 8000ae0:	4819      	ldr	r0, [pc, #100]	@ (8000b48 <Read_Sensors_Func+0x70>)
 8000ae2:	f7ff fbad 	bl	8000240 <ADC_Auto_Unhitch_Read>
	ADC_Current_Sensor_1_Read(ADC_VAL);
 8000ae6:	4818      	ldr	r0, [pc, #96]	@ (8000b48 <Read_Sensors_Func+0x70>)
 8000ae8:	f7ff fbc8 	bl	800027c <ADC_Current_Sensor_1_Read>
	ADC_Current_Sensor_2_Read(ADC_VAL);
 8000aec:	4816      	ldr	r0, [pc, #88]	@ (8000b48 <Read_Sensors_Func+0x70>)
 8000aee:	f7ff fbe9 	bl	80002c4 <ADC_Current_Sensor_2_Read>
	ADC_24V_Read(ADC_VAL);
 8000af2:	4815      	ldr	r0, [pc, #84]	@ (8000b48 <Read_Sensors_Func+0x70>)
 8000af4:	f7ff fc0c 	bl	8000310 <ADC_24V_Read>


	DIGITAL_SENSE1 = HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_15);
 8000af8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000afc:	4813      	ldr	r0, [pc, #76]	@ (8000b4c <Read_Sensors_Func+0x74>)
 8000afe:	f001 ff29 	bl	8002954 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <Read_Sensors_Func+0x78>)
 8000b08:	701a      	strb	r2, [r3, #0]
	DIGITAL_SENSE2 = HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_14);
 8000b0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b0e:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <Read_Sensors_Func+0x74>)
 8000b10:	f001 ff20 	bl	8002954 <HAL_GPIO_ReadPin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <Read_Sensors_Func+0x7c>)
 8000b1a:	701a      	strb	r2, [r3, #0]
	nFAULT = HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_10);
 8000b1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b20:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <Read_Sensors_Func+0x80>)
 8000b22:	f001 ff17 	bl	8002954 <HAL_GPIO_ReadPin>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <Read_Sensors_Func+0x84>)
 8000b2c:	701a      	strb	r2, [r3, #0]

	aa++;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <Read_Sensors_Func+0x88>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	3301      	adds	r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <Read_Sensors_Func+0x88>)
 8000b3a:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 8000b3c:	2064      	movs	r0, #100	@ 0x64
 8000b3e:	f003 fdf3 	bl	8004728 <osDelay>
  {
 8000b42:	bf00      	nop
 8000b44:	e7cc      	b.n	8000ae0 <Read_Sensors_Func+0x8>
 8000b46:	bf00      	nop
 8000b48:	20000080 	.word	0x20000080
 8000b4c:	40010c00 	.word	0x40010c00
 8000b50:	200000d0 	.word	0x200000d0
 8000b54:	200000d1 	.word	0x200000d1
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	200000d2 	.word	0x200000d2
 8000b60:	2000007c 	.word	0x2000007c

08000b64 <CANRX_Data_Process_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CANRX_Data_Process_Func */
void CANRX_Data_Process_Func(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  // Wait for and receive data from the queue
	 			  Status_CAN1 = osMessageQueueGet(CAN1RX_Data_QueueHandle, Received_CAN1RX, NULL, osWaitForever);
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <CANRX_Data_Process_Func+0x48>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	f107 0108 	add.w	r1, r7, #8
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f003 fec3 	bl	8004904 <osMessageQueueGet>
 8000b7e:	6178      	str	r0, [r7, #20]
	 			  if (Status_CAN1 == osOK)  {
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d10d      	bne.n	8000ba2 <CANRX_Data_Process_Func+0x3e>
	 				 // Process Received_CAN1RX data
	 				 // Indicate processing by toggling an LED, etc.

	 				 // Reconstruct uint32_t from bb (Little-endian format)
	 				CAN1RX_ID_Queue = 	( Received_CAN1RX[8]  <<  0 ) |
 8000b86:	7c3b      	ldrb	r3, [r7, #16]
 8000b88:	461a      	mov	r2, r3
	 									( Received_CAN1RX[9]  <<  8 ) |
 8000b8a:	7c7b      	ldrb	r3, [r7, #17]
 8000b8c:	021b      	lsls	r3, r3, #8
	 				CAN1RX_ID_Queue = 	( Received_CAN1RX[8]  <<  0 ) |
 8000b8e:	431a      	orrs	r2, r3
	 									( Received_CAN1RX[10] << 16 ) |
 8000b90:	7cbb      	ldrb	r3, [r7, #18]
 8000b92:	041b      	lsls	r3, r3, #16
	 									( Received_CAN1RX[9]  <<  8 ) |
 8000b94:	431a      	orrs	r2, r3
	 									( Received_CAN1RX[11] << 24 );
 8000b96:	7cfb      	ldrb	r3, [r7, #19]
 8000b98:	061b      	lsls	r3, r3, #24
	 									( Received_CAN1RX[10] << 16 ) |
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	461a      	mov	r2, r3
	 				CAN1RX_ID_Queue = 	( Received_CAN1RX[8]  <<  0 ) |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <CANRX_Data_Process_Func+0x4c>)
 8000ba0:	601a      	str	r2, [r3, #0]
//	 				default:
//
//	 					break;
//	 				}
	 			 }
    osDelay(1);
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f003 fdc0 	bl	8004728 <osDelay>
	 			  Status_CAN1 = osMessageQueueGet(CAN1RX_Data_QueueHandle, Received_CAN1RX, NULL, osWaitForever);
 8000ba8:	e7e0      	b.n	8000b6c <CANRX_Data_Process_Func+0x8>
 8000baa:	bf00      	nop
 8000bac:	200001c8 	.word	0x200001c8
 8000bb0:	200000c0 	.word	0x200000c0

08000bb4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  { cc++;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <StartTask03+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <StartTask03+0x20>)
 8000bc8:	701a      	strb	r2, [r3, #0]
    osDelay(10);
 8000bca:	200a      	movs	r0, #10
 8000bcc:	f003 fdac 	bl	8004728 <osDelay>
  { cc++;
 8000bd0:	bf00      	nop
 8000bd2:	e7f3      	b.n	8000bbc <StartTask03+0x8>
 8000bd4:	2000007d 	.word	0x2000007d

08000bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000bea:	f000 fa47 	bl	800107c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40000800 	.word	0x40000800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <Error_Handler+0x8>

08000c08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <HAL_MspInit+0x68>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a17      	ldr	r2, [pc, #92]	@ (8000c70 <HAL_MspInit+0x68>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_MspInit+0x68>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_MspInit+0x68>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	4a11      	ldr	r2, [pc, #68]	@ (8000c70 <HAL_MspInit+0x68>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	61d3      	str	r3, [r2, #28]
 8000c32:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <HAL_MspInit+0x68>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	210f      	movs	r1, #15
 8000c42:	f06f 0001 	mvn.w	r0, #1
 8000c46:	f001 fcd6 	bl	80025f6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_MspInit+0x6c>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <HAL_MspInit+0x6c>)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000

08000c78 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <HAL_ADC_MspInit+0x6c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d121      	bne.n	8000cdc <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_ADC_MspInit+0x70>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <HAL_ADC_MspInit+0x74>)
 8000cd8:	f001 fcb8 	bl	800264c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012400 	.word	0x40012400
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010800 	.word	0x40010800

08000cf0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a29      	ldr	r2, [pc, #164]	@ (8000db0 <HAL_CAN_MspInit+0xc0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d14b      	bne.n	8000da8 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d10:	4b28      	ldr	r3, [pc, #160]	@ (8000db4 <HAL_CAN_MspInit+0xc4>)
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	4a27      	ldr	r2, [pc, #156]	@ (8000db4 <HAL_CAN_MspInit+0xc4>)
 8000d16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d1a:	61d3      	str	r3, [r2, #28]
 8000d1c:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <HAL_CAN_MspInit+0xc4>)
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <HAL_CAN_MspInit+0xc4>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a21      	ldr	r2, [pc, #132]	@ (8000db4 <HAL_CAN_MspInit+0xc4>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <HAL_CAN_MspInit+0xc4>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <HAL_CAN_MspInit+0xc8>)
 8000d56:	f001 fc79 	bl	800264c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <HAL_CAN_MspInit+0xc8>)
 8000d70:	f001 fc6c 	bl	800264c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <HAL_CAN_MspInit+0xcc>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d84:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_CAN_MspInit+0xcc>)
 8000d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d96:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2105      	movs	r1, #5
 8000d9c:	2014      	movs	r0, #20
 8000d9e:	f001 fc2a 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000da2:	2014      	movs	r0, #20
 8000da4:	f001 fc43 	bl	800262e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	@ 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40006400 	.word	0x40006400
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010c00 	.word	0x40010c00
 8000dbc:	40010000 	.word	0x40010000

08000dc0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a09      	ldr	r2, [pc, #36]	@ (8000df4 <HAL_TIM_PWM_MspInit+0x34>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10b      	bne.n	8000dea <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <HAL_TIM_PWM_MspInit+0x38>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a08      	ldr	r2, [pc, #32]	@ (8000df8 <HAL_TIM_PWM_MspInit+0x38>)
 8000dd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ddc:	6193      	str	r3, [r2, #24]
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_TIM_PWM_MspInit+0x38>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40012c00 	.word	0x40012c00
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a09      	ldr	r2, [pc, #36]	@ (8000e30 <HAL_TIM_Base_MspInit+0x34>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d10b      	bne.n	8000e26 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <HAL_TIM_Base_MspInit+0x38>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <HAL_TIM_Base_MspInit+0x38>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	61d3      	str	r3, [r2, #28]
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_TIM_Base_MspInit+0x38>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40000400 	.word	0x40000400
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <HAL_TIM_MspPostInit+0x5c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d118      	bne.n	8000e8a <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_TIM_MspPostInit+0x60>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e98 <HAL_TIM_MspPostInit+0x60>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <HAL_TIM_MspPostInit+0x60>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_TIM_MspPostInit+0x64>)
 8000e86:	f001 fbe1 	bl	800264c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40012c00 	.word	0x40012c00
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	@ 0x38
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000eb6:	4b34      	ldr	r3, [pc, #208]	@ (8000f88 <HAL_InitTick+0xe8>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a33      	ldr	r2, [pc, #204]	@ (8000f88 <HAL_InitTick+0xe8>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b31      	ldr	r3, [pc, #196]	@ (8000f88 <HAL_InitTick+0xe8>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ece:	f107 0210 	add.w	r2, r7, #16
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 f95f 	bl	800319c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ee8:	f002 f930 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8000eec:	6378      	str	r0, [r7, #52]	@ 0x34
 8000eee:	e004      	b.n	8000efa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ef0:	f002 f92c 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000efc:	4a23      	ldr	r2, [pc, #140]	@ (8000f8c <HAL_InitTick+0xec>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	0c9b      	lsrs	r3, r3, #18
 8000f04:	3b01      	subs	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f08:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_InitTick+0xf0>)
 8000f0a:	4a22      	ldr	r2, [pc, #136]	@ (8000f94 <HAL_InitTick+0xf4>)
 8000f0c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f0e:	4b20      	ldr	r3, [pc, #128]	@ (8000f90 <HAL_InitTick+0xf0>)
 8000f10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f14:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f16:	4a1e      	ldr	r2, [pc, #120]	@ (8000f90 <HAL_InitTick+0xf0>)
 8000f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f1a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <HAL_InitTick+0xf0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <HAL_InitTick+0xf0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f28:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <HAL_InitTick+0xf0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f2e:	4818      	ldr	r0, [pc, #96]	@ (8000f90 <HAL_InitTick+0xf0>)
 8000f30:	f002 faee 	bl	8003510 <HAL_TIM_Base_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d11b      	bne.n	8000f7a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f42:	4813      	ldr	r0, [pc, #76]	@ (8000f90 <HAL_InitTick+0xf0>)
 8000f44:	f002 fb7e 	bl	8003644 <HAL_TIM_Base_Start_IT>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d111      	bne.n	8000f7a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f56:	201e      	movs	r0, #30
 8000f58:	f001 fb69 	bl	800262e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b0f      	cmp	r3, #15
 8000f60:	d808      	bhi.n	8000f74 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f62:	2200      	movs	r2, #0
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	201e      	movs	r0, #30
 8000f68:	f001 fb45 	bl	80025f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <HAL_InitTick+0xf8>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e002      	b.n	8000f7a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3738      	adds	r7, #56	@ 0x38
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	431bde83 	.word	0x431bde83
 8000f90:	200001cc 	.word	0x200001cc
 8000f94:	40000800 	.word	0x40000800
 8000f98:	20000004 	.word	0x20000004

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fd6:	f001 f836 	bl	8002046 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000104 	.word	0x20000104

08000fe4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <TIM4_IRQHandler+0x10>)
 8000fea:	f002 fc6f 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001cc 	.word	0x200001cc

08000ff8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f7ff fff8 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480b      	ldr	r0, [pc, #44]	@ (8001038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800100a:	490c      	ldr	r1, [pc, #48]	@ (800103c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800100c:	4a0c      	ldr	r2, [pc, #48]	@ (8001040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a09      	ldr	r2, [pc, #36]	@ (8001044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001020:	4c09      	ldr	r4, [pc, #36]	@ (8001048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f006 fa31 	bl	8007494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001032:	f7ff fa37 	bl	80004a4 <main>
  bx lr
 8001036:	4770      	bx	lr
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001040:	080076e0 	.word	0x080076e0
  ldr r2, =_sbss
 8001044:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001048:	20001d40 	.word	0x20001d40

0800104c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_2_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_Init+0x28>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	@ (8001078 <HAL_Init+0x28>)
 800105a:	f043 0310 	orr.w	r3, r3, #16
 800105e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f001 fabd 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	200f      	movs	r0, #15
 8001068:	f7ff ff1a 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fdcc 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40022000 	.word	0x40022000

0800107c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_IncTick+0x1c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b05      	ldr	r3, [pc, #20]	@ (800109c <HAL_IncTick+0x20>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a03      	ldr	r2, [pc, #12]	@ (800109c <HAL_IncTick+0x20>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	20000008 	.word	0x20000008
 800109c:	20000214 	.word	0x20000214

080010a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b02      	ldr	r3, [pc, #8]	@ (80010b0 <HAL_GetTick+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	20000214 	.word	0x20000214

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff fff0 	bl	80010a0 <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffe0 	bl	80010a0 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008

080010fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e0be      	b.n	800129c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001128:	2b00      	cmp	r3, #0
 800112a:	d109      	bne.n	8001140 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fd9c 	bl	8000c78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fbf1 	bl	8001928 <ADC_ConversionStop_Disable>
 8001146:	4603      	mov	r3, r0
 8001148:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 8099 	bne.w	800128a <HAL_ADC_Init+0x18e>
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f040 8095 	bne.w	800128a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001164:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001168:	f023 0302 	bic.w	r3, r3, #2
 800116c:	f043 0202 	orr.w	r2, r3, #2
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800117c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7b1b      	ldrb	r3, [r3, #12]
 8001182:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001184:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	4313      	orrs	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001194:	d003      	beq.n	800119e <HAL_ADC_Init+0xa2>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d102      	bne.n	80011a4 <HAL_ADC_Init+0xa8>
 800119e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a2:	e000      	b.n	80011a6 <HAL_ADC_Init+0xaa>
 80011a4:	2300      	movs	r3, #0
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7d1b      	ldrb	r3, [r3, #20]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d119      	bne.n	80011e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7b1b      	ldrb	r3, [r3, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	035a      	lsls	r2, r3, #13
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	e00b      	b.n	80011e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d4:	f043 0220 	orr.w	r2, r3, #32
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e0:	f043 0201 	orr.w	r2, r3, #1
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <HAL_ADC_Init+0x1a8>)
 8001204:	4013      	ands	r3, r2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	430b      	orrs	r3, r1
 800120e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001218:	d003      	beq.n	8001222 <HAL_ADC_Init+0x126>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d104      	bne.n	800122c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	3b01      	subs	r3, #1
 8001228:	051b      	lsls	r3, r3, #20
 800122a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001232:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	430a      	orrs	r2, r1
 800123e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <HAL_ADC_Init+0x1ac>)
 8001248:	4013      	ands	r3, r2
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	429a      	cmp	r2, r3
 800124e:	d10b      	bne.n	8001268 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125a:	f023 0303 	bic.w	r3, r3, #3
 800125e:	f043 0201 	orr.w	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001266:	e018      	b.n	800129a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126c:	f023 0312 	bic.w	r3, r3, #18
 8001270:	f043 0210 	orr.w	r2, r3, #16
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127c:	f043 0201 	orr.w	r2, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001288:	e007      	b.n	800129a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128e:	f043 0210 	orr.w	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800129a:	7dfb      	ldrb	r3, [r7, #23]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	ffe1f7fd 	.word	0xffe1f7fd
 80012a8:	ff1f0efe 	.word	0xff1f0efe

080012ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_ADC_Start+0x1a>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e098      	b.n	80013f8 <HAL_ADC_Start+0x14c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fad0 	bl	8001874 <ADC_Enable>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 8087 	bne.w	80013ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a41      	ldr	r2, [pc, #260]	@ (8001400 <HAL_ADC_Start+0x154>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d105      	bne.n	800130a <HAL_ADC_Start+0x5e>
 80012fe:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <HAL_ADC_Start+0x158>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d115      	bne.n	8001336 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001320:	2b00      	cmp	r3, #0
 8001322:	d026      	beq.n	8001372 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001328:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800132c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001334:	e01d      	b.n	8001372 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a2f      	ldr	r2, [pc, #188]	@ (8001404 <HAL_ADC_Start+0x158>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d004      	beq.n	8001356 <HAL_ADC_Start+0xaa>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2b      	ldr	r2, [pc, #172]	@ (8001400 <HAL_ADC_Start+0x154>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d10d      	bne.n	8001372 <HAL_ADC_Start+0xc6>
 8001356:	4b2b      	ldr	r3, [pc, #172]	@ (8001404 <HAL_ADC_Start+0x158>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001366:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800136a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001382:	f023 0206 	bic.w	r2, r3, #6
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	62da      	str	r2, [r3, #44]	@ 0x2c
 800138a:	e002      	b.n	8001392 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f06f 0202 	mvn.w	r2, #2
 80013a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013ae:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013b2:	d113      	bne.n	80013dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013b8:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <HAL_ADC_Start+0x154>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d105      	bne.n	80013ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_ADC_Start+0x158>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d108      	bne.n	80013dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	e00c      	b.n	80013f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	e003      	b.n	80013f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40012800 	.word	0x40012800
 8001404:	40012400 	.word	0x40012400

08001408 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_ADC_Stop+0x1a>
 800141e:	2302      	movs	r3, #2
 8001420:	e01a      	b.n	8001458 <HAL_ADC_Stop+0x50>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fa7c 	bl	8001928 <ADC_ConversionStop_Disable>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	f043 0201 	orr.w	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001476:	f7ff fe13 	bl	80010a0 <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148e:	f043 0220 	orr.w	r2, r3, #32
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0d3      	b.n	800164a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d131      	bne.n	8001514 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d12a      	bne.n	8001514 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014be:	e021      	b.n	8001504 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014c6:	d01d      	beq.n	8001504 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <HAL_ADC_PollForConversion+0x7e>
 80014ce:	f7ff fde7 	bl	80010a0 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d212      	bcs.n	8001504 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10b      	bne.n	8001504 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	f043 0204 	orr.w	r2, r3, #4
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0a2      	b.n	800164a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0d6      	beq.n	80014c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001512:	e070      	b.n	80015f6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001514:	4b4f      	ldr	r3, [pc, #316]	@ (8001654 <HAL_ADC_PollForConversion+0x1f4>)
 8001516:	681c      	ldr	r4, [r3, #0]
 8001518:	2002      	movs	r0, #2
 800151a:	f001 ff43 	bl	80033a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800151e:	4603      	mov	r3, r0
 8001520:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6919      	ldr	r1, [r3, #16]
 800152a:	4b4b      	ldr	r3, [pc, #300]	@ (8001658 <HAL_ADC_PollForConversion+0x1f8>)
 800152c:	400b      	ands	r3, r1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <HAL_ADC_PollForConversion+0x104>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68d9      	ldr	r1, [r3, #12]
 8001538:	4b48      	ldr	r3, [pc, #288]	@ (800165c <HAL_ADC_PollForConversion+0x1fc>)
 800153a:	400b      	ands	r3, r1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d111      	bne.n	8001564 <HAL_ADC_PollForConversion+0x104>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6919      	ldr	r1, [r3, #16]
 8001546:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <HAL_ADC_PollForConversion+0x200>)
 8001548:	400b      	ands	r3, r1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d108      	bne.n	8001560 <HAL_ADC_PollForConversion+0x100>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68d9      	ldr	r1, [r3, #12]
 8001554:	4b43      	ldr	r3, [pc, #268]	@ (8001664 <HAL_ADC_PollForConversion+0x204>)
 8001556:	400b      	ands	r3, r1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_ADC_PollForConversion+0x100>
 800155c:	2314      	movs	r3, #20
 800155e:	e020      	b.n	80015a2 <HAL_ADC_PollForConversion+0x142>
 8001560:	2329      	movs	r3, #41	@ 0x29
 8001562:	e01e      	b.n	80015a2 <HAL_ADC_PollForConversion+0x142>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6919      	ldr	r1, [r3, #16]
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_ADC_PollForConversion+0x200>)
 800156c:	400b      	ands	r3, r1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d106      	bne.n	8001580 <HAL_ADC_PollForConversion+0x120>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68d9      	ldr	r1, [r3, #12]
 8001578:	4b3a      	ldr	r3, [pc, #232]	@ (8001664 <HAL_ADC_PollForConversion+0x204>)
 800157a:	400b      	ands	r3, r1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00d      	beq.n	800159c <HAL_ADC_PollForConversion+0x13c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6919      	ldr	r1, [r3, #16]
 8001586:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <HAL_ADC_PollForConversion+0x208>)
 8001588:	400b      	ands	r3, r1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d108      	bne.n	80015a0 <HAL_ADC_PollForConversion+0x140>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68d9      	ldr	r1, [r3, #12]
 8001594:	4b34      	ldr	r3, [pc, #208]	@ (8001668 <HAL_ADC_PollForConversion+0x208>)
 8001596:	400b      	ands	r3, r1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_PollForConversion+0x140>
 800159c:	2354      	movs	r3, #84	@ 0x54
 800159e:	e000      	b.n	80015a2 <HAL_ADC_PollForConversion+0x142>
 80015a0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015a8:	e021      	b.n	80015ee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015b0:	d01a      	beq.n	80015e8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d007      	beq.n	80015c8 <HAL_ADC_PollForConversion+0x168>
 80015b8:	f7ff fd72 	bl	80010a0 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d20f      	bcs.n	80015e8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d90b      	bls.n	80015e8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	f043 0204 	orr.w	r2, r3, #4
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e030      	b.n	800164a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d8d9      	bhi.n	80015aa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f06f 0212 	mvn.w	r2, #18
 80015fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001616:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800161a:	d115      	bne.n	8001648 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001620:	2b00      	cmp	r3, #0
 8001622:	d111      	bne.n	8001648 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001634:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	f043 0201 	orr.w	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	20000000 	.word	0x20000000
 8001658:	24924924 	.word	0x24924924
 800165c:	00924924 	.word	0x00924924
 8001660:	12492492 	.word	0x12492492
 8001664:	00492492 	.word	0x00492492
 8001668:	00249249 	.word	0x00249249

0800166c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x20>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e0dc      	b.n	800185e <HAL_ADC_ConfigChannel+0x1da>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	d81c      	bhi.n	80016ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3b05      	subs	r3, #5
 80016c6:	221f      	movs	r2, #31
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4019      	ands	r1, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	3b05      	subs	r3, #5
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ec:	e03c      	b.n	8001768 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d81c      	bhi.n	8001730 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	3b23      	subs	r3, #35	@ 0x23
 8001708:	221f      	movs	r2, #31
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	4019      	ands	r1, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b23      	subs	r3, #35	@ 0x23
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	631a      	str	r2, [r3, #48]	@ 0x30
 800172e:	e01b      	b.n	8001768 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b41      	subs	r3, #65	@ 0x41
 8001742:	221f      	movs	r2, #31
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	4019      	ands	r1, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	3b41      	subs	r3, #65	@ 0x41
 800175c:	fa00 f203 	lsl.w	r2, r0, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b09      	cmp	r3, #9
 800176e:	d91c      	bls.n	80017aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68d9      	ldr	r1, [r3, #12]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	3b1e      	subs	r3, #30
 8001782:	2207      	movs	r2, #7
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	4019      	ands	r1, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6898      	ldr	r0, [r3, #8]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	3b1e      	subs	r3, #30
 800179c:	fa00 f203 	lsl.w	r2, r0, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	e019      	b.n	80017de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6919      	ldr	r1, [r3, #16]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	2207      	movs	r2, #7
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4019      	ands	r1, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6898      	ldr	r0, [r3, #8]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	fa00 f203 	lsl.w	r2, r0, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d003      	beq.n	80017ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017ea:	2b11      	cmp	r3, #17
 80017ec:	d132      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001868 <HAL_ADC_ConfigChannel+0x1e4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d125      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d126      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001814:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b10      	cmp	r3, #16
 800181c:	d11a      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800181e:	4b13      	ldr	r3, [pc, #76]	@ (800186c <HAL_ADC_ConfigChannel+0x1e8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <HAL_ADC_ConfigChannel+0x1ec>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	0c9a      	lsrs	r2, r3, #18
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001834:	e002      	b.n	800183c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3b01      	subs	r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f9      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x1b2>
 8001842:	e007      	b.n	8001854 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001848:	f043 0220 	orr.w	r2, r3, #32
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40012400 	.word	0x40012400
 800186c:	20000000 	.word	0x20000000
 8001870:	431bde83 	.word	0x431bde83

08001874 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b01      	cmp	r3, #1
 8001890:	d040      	beq.n	8001914 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0201 	orr.w	r2, r2, #1
 80018a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <ADC_Enable+0xac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001924 <ADC_Enable+0xb0>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	0c9b      	lsrs	r3, r3, #18
 80018ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018b0:	e002      	b.n	80018b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018be:	f7ff fbef 	bl	80010a0 <HAL_GetTick>
 80018c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018c4:	e01f      	b.n	8001906 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018c6:	f7ff fbeb 	bl	80010a0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d918      	bls.n	8001906 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d011      	beq.n	8001906 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	f043 0210 	orr.w	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e007      	b.n	8001916 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b01      	cmp	r3, #1
 8001912:	d1d8      	bne.n	80018c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000000 	.word	0x20000000
 8001924:	431bde83 	.word	0x431bde83

08001928 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d12e      	bne.n	80019a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001952:	f7ff fba5 	bl	80010a0 <HAL_GetTick>
 8001956:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001958:	e01b      	b.n	8001992 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800195a:	f7ff fba1 	bl	80010a0 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d914      	bls.n	8001992 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10d      	bne.n	8001992 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197a:	f043 0210 	orr.w	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001986:	f043 0201 	orr.w	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e007      	b.n	80019a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d0dc      	beq.n	800195a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0ed      	b.n	8001b98 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff f991 	bl	8000cf0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0201 	orr.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019de:	f7ff fb5f 	bl	80010a0 <HAL_GetTick>
 80019e2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019e4:	e012      	b.n	8001a0c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019e6:	f7ff fb5b 	bl	80010a0 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b0a      	cmp	r3, #10
 80019f2:	d90b      	bls.n	8001a0c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2205      	movs	r2, #5
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0c5      	b.n	8001b98 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0e5      	beq.n	80019e6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0202 	bic.w	r2, r2, #2
 8001a28:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a2a:	f7ff fb39 	bl	80010a0 <HAL_GetTick>
 8001a2e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a30:	e012      	b.n	8001a58 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a32:	f7ff fb35 	bl	80010a0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b0a      	cmp	r3, #10
 8001a3e:	d90b      	bls.n	8001a58 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2205      	movs	r2, #5
 8001a50:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e09f      	b.n	8001b98 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1e5      	bne.n	8001a32 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7e1b      	ldrb	r3, [r3, #24]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7e5b      	ldrb	r3, [r3, #25]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d108      	bne.n	8001aaa <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e007      	b.n	8001aba <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7e9b      	ldrb	r3, [r3, #26]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0220 	orr.w	r2, r2, #32
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e007      	b.n	8001ae4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0220 	bic.w	r2, r2, #32
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7edb      	ldrb	r3, [r3, #27]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d108      	bne.n	8001afe <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0210 	bic.w	r2, r2, #16
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e007      	b.n	8001b0e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0210 	orr.w	r2, r2, #16
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7f1b      	ldrb	r3, [r3, #28]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d108      	bne.n	8001b28 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0208 	orr.w	r2, r2, #8
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e007      	b.n	8001b38 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0208 	bic.w	r2, r2, #8
 8001b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7f5b      	ldrb	r3, [r3, #29]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d108      	bne.n	8001b52 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0204 	orr.w	r2, r2, #4
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e007      	b.n	8001b62 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0204 	bic.w	r2, r2, #4
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	ea42 0103 	orr.w	r1, r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	1e5a      	subs	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d003      	beq.n	8001bc6 <HAL_CAN_ConfigFilter+0x26>
 8001bbe:	7cfb      	ldrb	r3, [r7, #19]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	f040 80aa 	bne.w	8001d1a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2201      	movs	r2, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d123      	bne.n	8001c48 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3248      	adds	r2, #72	@ 0x48
 8001c28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c3e:	6979      	ldr	r1, [r7, #20]
 8001c40:	3348      	adds	r3, #72	@ 0x48
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d122      	bne.n	8001c96 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3248      	adds	r2, #72	@ 0x48
 8001c76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	3348      	adds	r3, #72	@ 0x48
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	401a      	ands	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001cb0:	e007      	b.n	8001cc2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001cdc:	e007      	b.n	8001cee <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d0c:	f023 0201 	bic.w	r2, r3, #1
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e006      	b.n	8001d28 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
  }
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d12e      	bne.n	8001da4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d5e:	f7ff f99f 	bl	80010a0 <HAL_GetTick>
 8001d62:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d64:	e012      	b.n	8001d8c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d66:	f7ff f99b 	bl	80010a0 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b0a      	cmp	r3, #10
 8001d72:	d90b      	bls.n	8001d8c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2205      	movs	r2, #5
 8001d84:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e012      	b.n	8001db2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1e5      	bne.n	8001d66 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e006      	b.n	8001db2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b087      	sub	sp, #28
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d003      	beq.n	8001dde <HAL_CAN_GetRxMessage+0x24>
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	f040 8103 	bne.w	8001fe4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10e      	bne.n	8001e02 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d116      	bne.n	8001e20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0f7      	b.n	8001ff2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0e8      	b.n	8001ff2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	331b      	adds	r3, #27
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	4413      	add	r3, r2
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0204 	and.w	r2, r3, #4
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	331b      	adds	r3, #27
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	4413      	add	r3, r2
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0d5b      	lsrs	r3, r3, #21
 8001e4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e00b      	b.n	8001e70 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	331b      	adds	r3, #27
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4413      	add	r3, r2
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	08db      	lsrs	r3, r3, #3
 8001e68:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	331b      	adds	r3, #27
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	4413      	add	r3, r2
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0202 	and.w	r2, r3, #2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	331b      	adds	r3, #27
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	e00b      	b.n	8001ebe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	331b      	adds	r3, #27
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 020f 	and.w	r2, r3, #15
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	331b      	adds	r3, #27
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	3304      	adds	r3, #4
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	331b      	adds	r3, #27
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	0c1b      	lsrs	r3, r3, #16
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0a1a      	lsrs	r2, r3, #8
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0c1a      	lsrs	r2, r3, #16
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	3302      	adds	r3, #2
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e1a      	lsrs	r2, r3, #24
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	3304      	adds	r3, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	0a1a      	lsrs	r2, r3, #8
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	3305      	adds	r3, #5
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0c1a      	lsrs	r2, r3, #16
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	3306      	adds	r3, #6
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e1a      	lsrs	r2, r3, #24
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	3307      	adds	r3, #7
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d108      	bne.n	8001fd0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0220 	orr.w	r2, r2, #32
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	e007      	b.n	8001fe0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0220 	orr.w	r2, r2, #32
 8001fde:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e006      	b.n	8001ff2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800200c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d002      	beq.n	800201a <HAL_CAN_ActivateNotification+0x1e>
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d109      	bne.n	800202e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6959      	ldr	r1, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e006      	b.n	800203c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b08a      	sub	sp, #40	@ 0x28
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d07c      	beq.n	8002186 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d023      	beq.n	80020de <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2201      	movs	r2, #1
 800209c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f983 	bl	80023b4 <HAL_CAN_TxMailbox0CompleteCallback>
 80020ae:	e016      	b.n	80020de <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c2:	e00c      	b.n	80020de <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020d6:	e002      	b.n	80020de <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f986 	bl	80023ea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d024      	beq.n	8002132 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f962 	bl	80023c6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002102:	e016      	b.n	8002132 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
 8002116:	e00c      	b.n	8002132 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
 800212a:	e002      	b.n	8002132 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f965 	bl	80023fc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d024      	beq.n	8002186 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002144:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f941 	bl	80023d8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002156:	e016      	b.n	8002186 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d004      	beq.n	800216c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
 800216a:	e00c      	b.n	8002186 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
 800217e:	e002      	b.n	8002186 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f944 	bl	800240e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00c      	beq.n	80021aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2210      	movs	r2, #16
 80021a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2208      	movs	r2, #8
 80021c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f92a 	bl	8002420 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7fe f8cb 	bl	8000380 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00c      	beq.n	800220e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2210      	movs	r2, #16
 800220c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2208      	movs	r2, #8
 8002228:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f90a 	bl	8002444 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f8f2 	bl	8002432 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00b      	beq.n	8002270 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2210      	movs	r2, #16
 8002268:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8f3 	bl	8002456 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2208      	movs	r2, #8
 800228a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f8eb 	bl	8002468 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d07b      	beq.n	8002394 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d072      	beq.n	800238c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002300:	2b00      	cmp	r3, #0
 8002302:	d043      	beq.n	800238c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	d03e      	beq.n	800238c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002314:	2b60      	cmp	r3, #96	@ 0x60
 8002316:	d02b      	beq.n	8002370 <HAL_CAN_IRQHandler+0x32a>
 8002318:	2b60      	cmp	r3, #96	@ 0x60
 800231a:	d82e      	bhi.n	800237a <HAL_CAN_IRQHandler+0x334>
 800231c:	2b50      	cmp	r3, #80	@ 0x50
 800231e:	d022      	beq.n	8002366 <HAL_CAN_IRQHandler+0x320>
 8002320:	2b50      	cmp	r3, #80	@ 0x50
 8002322:	d82a      	bhi.n	800237a <HAL_CAN_IRQHandler+0x334>
 8002324:	2b40      	cmp	r3, #64	@ 0x40
 8002326:	d019      	beq.n	800235c <HAL_CAN_IRQHandler+0x316>
 8002328:	2b40      	cmp	r3, #64	@ 0x40
 800232a:	d826      	bhi.n	800237a <HAL_CAN_IRQHandler+0x334>
 800232c:	2b30      	cmp	r3, #48	@ 0x30
 800232e:	d010      	beq.n	8002352 <HAL_CAN_IRQHandler+0x30c>
 8002330:	2b30      	cmp	r3, #48	@ 0x30
 8002332:	d822      	bhi.n	800237a <HAL_CAN_IRQHandler+0x334>
 8002334:	2b10      	cmp	r3, #16
 8002336:	d002      	beq.n	800233e <HAL_CAN_IRQHandler+0x2f8>
 8002338:	2b20      	cmp	r3, #32
 800233a:	d005      	beq.n	8002348 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800233c:	e01d      	b.n	800237a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002346:	e019      	b.n	800237c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	f043 0310 	orr.w	r3, r3, #16
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002350:	e014      	b.n	800237c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	f043 0320 	orr.w	r3, r3, #32
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800235a:	e00f      	b.n	800237c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002364:	e00a      	b.n	800237c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800236e:	e005      	b.n	800237c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002378:	e000      	b.n	800237c <HAL_CAN_IRQHandler+0x336>
            break;
 800237a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800238a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2204      	movs	r2, #4
 8002392:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f867 	bl	800247a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023ac:	bf00      	nop
 80023ae:	3728      	adds	r7, #40	@ 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4906      	ldr	r1, [pc, #24]	@ (8002524 <__NVIC_EnableIRQ+0x34>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	@ (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	@ (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	@ 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff4f 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002608:	f7ff ff64 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 800260c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ffb2 	bl	800257c <NVIC_EncodePriority>
 8002618:	4602      	mov	r2, r0
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff81 	bl	8002528 <__NVIC_SetPriority>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff57 	bl	80024f0 <__NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800264c:	b480      	push	{r7}
 800264e:	b08b      	sub	sp, #44	@ 0x2c
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265e:	e169      	b.n	8002934 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002660:	2201      	movs	r2, #1
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8158 	bne.w	800292e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a9a      	ldr	r2, [pc, #616]	@ (80028ec <HAL_GPIO_Init+0x2a0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d05e      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 8002688:	4a98      	ldr	r2, [pc, #608]	@ (80028ec <HAL_GPIO_Init+0x2a0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d875      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 800268e:	4a98      	ldr	r2, [pc, #608]	@ (80028f0 <HAL_GPIO_Init+0x2a4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d058      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 8002694:	4a96      	ldr	r2, [pc, #600]	@ (80028f0 <HAL_GPIO_Init+0x2a4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d86f      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 800269a:	4a96      	ldr	r2, [pc, #600]	@ (80028f4 <HAL_GPIO_Init+0x2a8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d052      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 80026a0:	4a94      	ldr	r2, [pc, #592]	@ (80028f4 <HAL_GPIO_Init+0x2a8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d869      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026a6:	4a94      	ldr	r2, [pc, #592]	@ (80028f8 <HAL_GPIO_Init+0x2ac>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d04c      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 80026ac:	4a92      	ldr	r2, [pc, #584]	@ (80028f8 <HAL_GPIO_Init+0x2ac>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d863      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026b2:	4a92      	ldr	r2, [pc, #584]	@ (80028fc <HAL_GPIO_Init+0x2b0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d046      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
 80026b8:	4a90      	ldr	r2, [pc, #576]	@ (80028fc <HAL_GPIO_Init+0x2b0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d85d      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026be:	2b12      	cmp	r3, #18
 80026c0:	d82a      	bhi.n	8002718 <HAL_GPIO_Init+0xcc>
 80026c2:	2b12      	cmp	r3, #18
 80026c4:	d859      	bhi.n	800277a <HAL_GPIO_Init+0x12e>
 80026c6:	a201      	add	r2, pc, #4	@ (adr r2, 80026cc <HAL_GPIO_Init+0x80>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	08002747 	.word	0x08002747
 80026d0:	08002721 	.word	0x08002721
 80026d4:	08002733 	.word	0x08002733
 80026d8:	08002775 	.word	0x08002775
 80026dc:	0800277b 	.word	0x0800277b
 80026e0:	0800277b 	.word	0x0800277b
 80026e4:	0800277b 	.word	0x0800277b
 80026e8:	0800277b 	.word	0x0800277b
 80026ec:	0800277b 	.word	0x0800277b
 80026f0:	0800277b 	.word	0x0800277b
 80026f4:	0800277b 	.word	0x0800277b
 80026f8:	0800277b 	.word	0x0800277b
 80026fc:	0800277b 	.word	0x0800277b
 8002700:	0800277b 	.word	0x0800277b
 8002704:	0800277b 	.word	0x0800277b
 8002708:	0800277b 	.word	0x0800277b
 800270c:	0800277b 	.word	0x0800277b
 8002710:	08002729 	.word	0x08002729
 8002714:	0800273d 	.word	0x0800273d
 8002718:	4a79      	ldr	r2, [pc, #484]	@ (8002900 <HAL_GPIO_Init+0x2b4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800271e:	e02c      	b.n	800277a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	623b      	str	r3, [r7, #32]
          break;
 8002726:	e029      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	3304      	adds	r3, #4
 800272e:	623b      	str	r3, [r7, #32]
          break;
 8002730:	e024      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	3308      	adds	r3, #8
 8002738:	623b      	str	r3, [r7, #32]
          break;
 800273a:	e01f      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	330c      	adds	r3, #12
 8002742:	623b      	str	r3, [r7, #32]
          break;
 8002744:	e01a      	b.n	800277c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800274e:	2304      	movs	r3, #4
 8002750:	623b      	str	r3, [r7, #32]
          break;
 8002752:	e013      	b.n	800277c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800275c:	2308      	movs	r3, #8
 800275e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	611a      	str	r2, [r3, #16]
          break;
 8002766:	e009      	b.n	800277c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002768:	2308      	movs	r3, #8
 800276a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	615a      	str	r2, [r3, #20]
          break;
 8002772:	e003      	b.n	800277c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
          break;
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x130>
          break;
 800277a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2bff      	cmp	r3, #255	@ 0xff
 8002780:	d801      	bhi.n	8002786 <HAL_GPIO_Init+0x13a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	e001      	b.n	800278a <HAL_GPIO_Init+0x13e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2bff      	cmp	r3, #255	@ 0xff
 8002790:	d802      	bhi.n	8002798 <HAL_GPIO_Init+0x14c>
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	e002      	b.n	800279e <HAL_GPIO_Init+0x152>
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	3b08      	subs	r3, #8
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	210f      	movs	r1, #15
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	401a      	ands	r2, r3
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	431a      	orrs	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80b1 	beq.w	800292e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002904 <HAL_GPIO_Init+0x2b8>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002904 <HAL_GPIO_Init+0x2b8>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002904 <HAL_GPIO_Init+0x2b8>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027e4:	4a48      	ldr	r2, [pc, #288]	@ (8002908 <HAL_GPIO_Init+0x2bc>)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	3302      	adds	r3, #2
 80027ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	220f      	movs	r2, #15
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a40      	ldr	r2, [pc, #256]	@ (800290c <HAL_GPIO_Init+0x2c0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_GPIO_Init+0x1ec>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3f      	ldr	r2, [pc, #252]	@ (8002910 <HAL_GPIO_Init+0x2c4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00d      	beq.n	8002834 <HAL_GPIO_Init+0x1e8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3e      	ldr	r2, [pc, #248]	@ (8002914 <HAL_GPIO_Init+0x2c8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x1e4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3d      	ldr	r2, [pc, #244]	@ (8002918 <HAL_GPIO_Init+0x2cc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_GPIO_Init+0x1e0>
 8002828:	2303      	movs	r3, #3
 800282a:	e006      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 800282c:	2304      	movs	r3, #4
 800282e:	e004      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 8002830:	2302      	movs	r3, #2
 8002832:	e002      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_GPIO_Init+0x1ee>
 8002838:	2300      	movs	r3, #0
 800283a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800283c:	f002 0203 	and.w	r2, r2, #3
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	4093      	lsls	r3, r2
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800284a:	492f      	ldr	r1, [pc, #188]	@ (8002908 <HAL_GPIO_Init+0x2bc>)
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002864:	4b2d      	ldr	r3, [pc, #180]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	492c      	ldr	r1, [pc, #176]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002872:	4b2a      	ldr	r3, [pc, #168]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	43db      	mvns	r3, r3
 800287a:	4928      	ldr	r1, [pc, #160]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 800287c:	4013      	ands	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800288c:	4b23      	ldr	r3, [pc, #140]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	4922      	ldr	r1, [pc, #136]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	60cb      	str	r3, [r1, #12]
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800289a:	4b20      	ldr	r3, [pc, #128]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	491e      	ldr	r1, [pc, #120]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d006      	beq.n	80028c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4918      	ldr	r1, [pc, #96]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028c2:	4b16      	ldr	r3, [pc, #88]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	4914      	ldr	r1, [pc, #80]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d021      	beq.n	8002920 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028dc:	4b0f      	ldr	r3, [pc, #60]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	490e      	ldr	r1, [pc, #56]	@ (800291c <HAL_GPIO_Init+0x2d0>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]
 80028e8:	e021      	b.n	800292e <HAL_GPIO_Init+0x2e2>
 80028ea:	bf00      	nop
 80028ec:	10320000 	.word	0x10320000
 80028f0:	10310000 	.word	0x10310000
 80028f4:	10220000 	.word	0x10220000
 80028f8:	10210000 	.word	0x10210000
 80028fc:	10120000 	.word	0x10120000
 8002900:	10110000 	.word	0x10110000
 8002904:	40021000 	.word	0x40021000
 8002908:	40010000 	.word	0x40010000
 800290c:	40010800 	.word	0x40010800
 8002910:	40010c00 	.word	0x40010c00
 8002914:	40011000 	.word	0x40011000
 8002918:	40011400 	.word	0x40011400
 800291c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002920:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <HAL_GPIO_Init+0x304>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	43db      	mvns	r3, r3
 8002928:	4909      	ldr	r1, [pc, #36]	@ (8002950 <HAL_GPIO_Init+0x304>)
 800292a:	4013      	ands	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	3301      	adds	r3, #1
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	f47f ae8e 	bne.w	8002660 <HAL_GPIO_Init+0x14>
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	372c      	adds	r7, #44	@ 0x2c
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40010400 	.word	0x40010400

08002954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	e001      	b.n	8002976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	807b      	strh	r3, [r7, #2]
 800298e:	4613      	mov	r3, r2
 8002990:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002992:	787b      	ldrb	r3, [r7, #1]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002998:	887a      	ldrh	r2, [r7, #2]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800299e:	e003      	b.n	80029a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	041a      	lsls	r2, r3, #16
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	611a      	str	r2, [r3, #16]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e272      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8087 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d4:	4b92      	ldr	r3, [pc, #584]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d00c      	beq.n	80029fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d112      	bne.n	8002a12 <HAL_RCC_OscConfig+0x5e>
 80029ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f8:	d10b      	bne.n	8002a12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fa:	4b89      	ldr	r3, [pc, #548]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d06c      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x12c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d168      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e24c      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x76>
 8002a1c:	4b80      	ldr	r3, [pc, #512]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a7f      	ldr	r2, [pc, #508]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	e02e      	b.n	8002a88 <HAL_RCC_OscConfig+0xd4>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x98>
 8002a32:	4b7b      	ldr	r3, [pc, #492]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7a      	ldr	r2, [pc, #488]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b78      	ldr	r3, [pc, #480]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a77      	ldr	r2, [pc, #476]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e01d      	b.n	8002a88 <HAL_RCC_OscConfig+0xd4>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0xbc>
 8002a56:	4b72      	ldr	r3, [pc, #456]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a71      	ldr	r2, [pc, #452]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b6f      	ldr	r3, [pc, #444]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a6e      	ldr	r2, [pc, #440]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0xd4>
 8002a70:	4b6b      	ldr	r3, [pc, #428]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6a      	ldr	r2, [pc, #424]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b68      	ldr	r3, [pc, #416]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a67      	ldr	r2, [pc, #412]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d013      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe fb06 	bl	80010a0 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe fb02 	bl	80010a0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	@ 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e200      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0xe4>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe faf2 	bl	80010a0 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe faee 	bl	80010a0 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	@ 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e1ec      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	4b53      	ldr	r3, [pc, #332]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x10c>
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d063      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aee:	4b4c      	ldr	r3, [pc, #304]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002afa:	4b49      	ldr	r3, [pc, #292]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d11c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x18c>
 8002b06:	4b46      	ldr	r3, [pc, #280]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d116      	bne.n	8002b40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	4b43      	ldr	r3, [pc, #268]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_RCC_OscConfig+0x176>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e1c0      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4939      	ldr	r1, [pc, #228]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	e03a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b48:	4b36      	ldr	r3, [pc, #216]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe faa7 	bl	80010a0 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b56:	f7fe faa3 	bl	80010a0 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e1a1      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b68:	4b2d      	ldr	r3, [pc, #180]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b74:	4b2a      	ldr	r3, [pc, #168]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4927      	ldr	r1, [pc, #156]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
 8002b88:	e015      	b.n	8002bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8a:	4b26      	ldr	r3, [pc, #152]	@ (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fa86 	bl	80010a0 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b98:	f7fe fa82 	bl	80010a0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e180      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002baa:	4b1d      	ldr	r3, [pc, #116]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03a      	beq.n	8002c38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d019      	beq.n	8002bfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bca:	4b17      	ldr	r3, [pc, #92]	@ (8002c28 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fa66 	bl	80010a0 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7fe fa62 	bl	80010a0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e160      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	4b0d      	ldr	r3, [pc, #52]	@ (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f000 fb00 	bl	80031fc <RCC_Delay>
 8002bfc:	e01c      	b.n	8002c38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <HAL_RCC_OscConfig+0x274>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c04:	f7fe fa4c 	bl	80010a0 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0a:	e00f      	b.n	8002c2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fa48 	bl	80010a0 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d908      	bls.n	8002c2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e146      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
 8002c24:	42420000 	.word	0x42420000
 8002c28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	4b92      	ldr	r3, [pc, #584]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e9      	bne.n	8002c0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a6 	beq.w	8002d92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	4b88      	ldr	r3, [pc, #544]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a87      	ldr	r2, [pc, #540]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	61d3      	str	r3, [r2, #28]
 8002c62:	4b85      	ldr	r3, [pc, #532]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b82      	ldr	r3, [pc, #520]	@ (8002e7c <HAL_RCC_OscConfig+0x4c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d118      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e7c <HAL_RCC_OscConfig+0x4c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7e      	ldr	r2, [pc, #504]	@ (8002e7c <HAL_RCC_OscConfig+0x4c8>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fa09 	bl	80010a0 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7fe fa05 	bl	80010a0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b64      	cmp	r3, #100	@ 0x64
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e103      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	4b75      	ldr	r3, [pc, #468]	@ (8002e7c <HAL_RCC_OscConfig+0x4c8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x312>
 8002cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6213      	str	r3, [r2, #32]
 8002cc4:	e02d      	b.n	8002d22 <HAL_RCC_OscConfig+0x36e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x334>
 8002cce:	4b6a      	ldr	r3, [pc, #424]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4a69      	ldr	r2, [pc, #420]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	6213      	str	r3, [r2, #32]
 8002cda:	4b67      	ldr	r3, [pc, #412]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a66      	ldr	r2, [pc, #408]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	f023 0304 	bic.w	r3, r3, #4
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	e01c      	b.n	8002d22 <HAL_RCC_OscConfig+0x36e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d10c      	bne.n	8002d0a <HAL_RCC_OscConfig+0x356>
 8002cf0:	4b61      	ldr	r3, [pc, #388]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4a60      	ldr	r2, [pc, #384]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6213      	str	r3, [r2, #32]
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a5d      	ldr	r2, [pc, #372]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	e00b      	b.n	8002d22 <HAL_RCC_OscConfig+0x36e>
 8002d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6213      	str	r3, [r2, #32]
 8002d16:	4b58      	ldr	r3, [pc, #352]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4a57      	ldr	r2, [pc, #348]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	f023 0304 	bic.w	r3, r3, #4
 8002d20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d015      	beq.n	8002d56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2a:	f7fe f9b9 	bl	80010a0 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe f9b5 	bl	80010a0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0b1      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	4b4b      	ldr	r3, [pc, #300]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ee      	beq.n	8002d32 <HAL_RCC_OscConfig+0x37e>
 8002d54:	e014      	b.n	8002d80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe f9a3 	bl	80010a0 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe f99f 	bl	80010a0 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e09b      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d74:	4b40      	ldr	r3, [pc, #256]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ee      	bne.n	8002d5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d105      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d86:	4b3c      	ldr	r3, [pc, #240]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8087 	beq.w	8002eaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9c:	4b36      	ldr	r3, [pc, #216]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d061      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d146      	bne.n	8002e3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b33      	ldr	r3, [pc, #204]	@ (8002e80 <HAL_RCC_OscConfig+0x4cc>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fe f973 	bl	80010a0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe f96f 	bl	80010a0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e06d      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd0:	4b29      	ldr	r3, [pc, #164]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de4:	d108      	bne.n	8002df8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002de6:	4b24      	ldr	r3, [pc, #144]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	4921      	ldr	r1, [pc, #132]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a19      	ldr	r1, [r3, #32]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	491b      	ldr	r1, [pc, #108]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <HAL_RCC_OscConfig+0x4cc>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe f943 	bl	80010a0 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe f93f 	bl	80010a0 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e03d      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e30:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x46a>
 8002e3c:	e035      	b.n	8002eaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <HAL_RCC_OscConfig+0x4cc>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe f92c 	bl	80010a0 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe f928 	bl	80010a0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e026      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x498>
 8002e6a:	e01e      	b.n	8002eaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e019      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e84:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <HAL_RCC_OscConfig+0x500>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0d0      	b.n	800306e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d910      	bls.n	8002efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b67      	ldr	r3, [pc, #412]	@ (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 0207 	bic.w	r2, r3, #7
 8002ee2:	4965      	ldr	r1, [pc, #404]	@ (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b63      	ldr	r3, [pc, #396]	@ (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0b8      	b.n	800306e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f14:	4b59      	ldr	r3, [pc, #356]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a58      	ldr	r2, [pc, #352]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f2c:	4b53      	ldr	r3, [pc, #332]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a52      	ldr	r2, [pc, #328]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f38:	4b50      	ldr	r3, [pc, #320]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	494d      	ldr	r1, [pc, #308]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d040      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b47      	ldr	r3, [pc, #284]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d115      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e07f      	b.n	800306e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f76:	4b41      	ldr	r3, [pc, #260]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e073      	b.n	800306e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f86:	4b3d      	ldr	r3, [pc, #244]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e06b      	b.n	800306e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f96:	4b39      	ldr	r3, [pc, #228]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f023 0203 	bic.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4936      	ldr	r1, [pc, #216]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe f87a 	bl	80010a0 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb0:	f7fe f876 	bl	80010a0 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e053      	b.n	800306e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 020c 	and.w	r2, r3, #12
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1eb      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b27      	ldr	r3, [pc, #156]	@ (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d210      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 0207 	bic.w	r2, r3, #7
 8002fee:	4922      	ldr	r1, [pc, #136]	@ (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b20      	ldr	r3, [pc, #128]	@ (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e032      	b.n	800306e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003014:	4b19      	ldr	r3, [pc, #100]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4916      	ldr	r1, [pc, #88]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003032:	4b12      	ldr	r3, [pc, #72]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	490e      	ldr	r1, [pc, #56]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003046:	f000 f821 	bl	800308c <HAL_RCC_GetSysClockFreq>
 800304a:	4602      	mov	r2, r0
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	490a      	ldr	r1, [pc, #40]	@ (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	fa22 f303 	lsr.w	r3, r2, r3
 800305e:	4a09      	ldr	r2, [pc, #36]	@ (8003084 <HAL_RCC_ClockConfig+0x1cc>)
 8003060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003062:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <HAL_RCC_ClockConfig+0x1d0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd ff1a 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40022000 	.word	0x40022000
 800307c:	40021000 	.word	0x40021000
 8003080:	08007698 	.word	0x08007698
 8003084:	20000000 	.word	0x20000000
 8003088:	20000004 	.word	0x20000004

0800308c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x94>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d002      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x30>
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x36>
 80030ba:	e027      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030bc:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x98>)
 80030be:	613b      	str	r3, [r7, #16]
      break;
 80030c0:	e027      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	0c9b      	lsrs	r3, r3, #18
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	4a17      	ldr	r2, [pc, #92]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d010      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030da:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x94>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	0c5b      	lsrs	r3, r3, #17
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	4a11      	ldr	r2, [pc, #68]	@ (800312c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030e6:	5cd3      	ldrb	r3, [r2, r3]
 80030e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ee:	fb03 f202 	mul.w	r2, r3, r2
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e004      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003130 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003100:	fb02 f303 	mul.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	613b      	str	r3, [r7, #16]
      break;
 800310a:	e002      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_RCC_GetSysClockFreq+0xa8>)
 800310e:	613b      	str	r3, [r7, #16]
      break;
 8003110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003112:	693b      	ldr	r3, [r7, #16]
}
 8003114:	4618      	mov	r0, r3
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	00f42400 	.word	0x00f42400
 8003128:	080076b0 	.word	0x080076b0
 800312c:	080076c0 	.word	0x080076c0
 8003130:	003d0900 	.word	0x003d0900
 8003134:	007a1200 	.word	0x007a1200

08003138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800313c:	4b02      	ldr	r3, [pc, #8]	@ (8003148 <HAL_RCC_GetHCLKFreq+0x10>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	20000000 	.word	0x20000000

0800314c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003150:	f7ff fff2 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b05      	ldr	r3, [pc, #20]	@ (800316c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4903      	ldr	r1, [pc, #12]	@ (8003170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003168:	4618      	mov	r0, r3
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	080076a8 	.word	0x080076a8

08003174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003178:	f7ff ffde 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0adb      	lsrs	r3, r3, #11
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	4903      	ldr	r1, [pc, #12]	@ (8003198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	080076a8 	.word	0x080076a8

0800319c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	220f      	movs	r2, #15
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031ac:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <HAL_RCC_GetClockConfig+0x58>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0203 	and.w	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031b8:	4b0e      	ldr	r3, [pc, #56]	@ (80031f4 <HAL_RCC_GetClockConfig+0x58>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_GetClockConfig+0x58>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80031d0:	4b08      	ldr	r3, [pc, #32]	@ (80031f4 <HAL_RCC_GetClockConfig+0x58>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	08db      	lsrs	r3, r3, #3
 80031d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031de:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_RCC_GetClockConfig+0x5c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0207 	and.w	r2, r3, #7
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40022000 	.word	0x40022000

080031fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003204:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <RCC_Delay+0x34>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <RCC_Delay+0x38>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	0a5b      	lsrs	r3, r3, #9
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003218:	bf00      	nop
  }
  while (Delay --);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1e5a      	subs	r2, r3, #1
 800321e:	60fa      	str	r2, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f9      	bne.n	8003218 <RCC_Delay+0x1c>
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr
 8003230:	20000000 	.word	0x20000000
 8003234:	10624dd3 	.word	0x10624dd3

08003238 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d07d      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003254:	2300      	movs	r3, #0
 8003256:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003258:	4b4f      	ldr	r3, [pc, #316]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003264:	4b4c      	ldr	r3, [pc, #304]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	4a4b      	ldr	r2, [pc, #300]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800326e:	61d3      	str	r3, [r2, #28]
 8003270:	4b49      	ldr	r3, [pc, #292]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327c:	2301      	movs	r3, #1
 800327e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003280:	4b46      	ldr	r3, [pc, #280]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d118      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328c:	4b43      	ldr	r3, [pc, #268]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a42      	ldr	r2, [pc, #264]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003298:	f7fd ff02 	bl	80010a0 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	e008      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7fd fefe 	bl	80010a0 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e06d      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b3a      	ldr	r3, [pc, #232]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032be:	4b36      	ldr	r3, [pc, #216]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d02e      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d027      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e6:	4b2e      	ldr	r3, [pc, #184]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ec:	4b2c      	ldr	r3, [pc, #176]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032f2:	4a29      	ldr	r2, [pc, #164]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d014      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7fd fecd 	bl	80010a0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fd fec9 	bl	80010a0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e036      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003320:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ee      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800332c:	4b1a      	ldr	r3, [pc, #104]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4917      	ldr	r1, [pc, #92]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	4313      	orrs	r3, r2
 800333c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800333e:	7dfb      	ldrb	r3, [r7, #23]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003344:	4b14      	ldr	r3, [pc, #80]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800334e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800335c:	4b0e      	ldr	r3, [pc, #56]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	490b      	ldr	r1, [pc, #44]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800337a:	4b07      	ldr	r3, [pc, #28]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4904      	ldr	r1, [pc, #16]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	40007000 	.word	0x40007000
 80033a0:	42420440 	.word	0x42420440

080033a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	f200 8089 	bhi.w	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d045      	beq.n	8003460 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d074      	beq.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033da:	e081      	b.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 80033dc:	4b45      	ldr	r3, [pc, #276]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033e2:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d07a      	beq.n	80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	0c9b      	lsrs	r3, r3, #18
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	4a40      	ldr	r2, [pc, #256]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033f8:	5cd3      	ldrb	r3, [r2, r3]
 80033fa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d015      	beq.n	8003432 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003406:	4b3b      	ldr	r3, [pc, #236]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	0c5b      	lsrs	r3, r3, #17
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	4a3a      	ldr	r2, [pc, #232]	@ (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003420:	4a37      	ldr	r2, [pc, #220]	@ (8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	fbb2 f2f3 	udiv	r2, r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	e004      	b.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4a33      	ldr	r2, [pc, #204]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800343c:	4b2d      	ldr	r3, [pc, #180]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003444:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003448:	d102      	bne.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	61bb      	str	r3, [r7, #24]
      break;
 800344e:	e049      	b.n	80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4a2c      	ldr	r2, [pc, #176]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	61bb      	str	r3, [r7, #24]
      break;
 800345e:	e041      	b.n	80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8003460:	4b24      	ldr	r3, [pc, #144]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800346c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003470:	d108      	bne.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800347c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e01e      	b.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800348e:	d109      	bne.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003490:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800349c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	e00e      	b.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034ae:	d11b      	bne.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80034b0:	4b10      	ldr	r3, [pc, #64]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d015      	beq.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 80034bc:	4b13      	ldr	r3, [pc, #76]	@ (800350c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034be:	61bb      	str	r3, [r7, #24]
      break;
 80034c0:	e012      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80034c2:	e011      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80034c4:	f7ff fe56 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	0b9b      	lsrs	r3, r3, #14
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	3301      	adds	r3, #1
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	61bb      	str	r3, [r7, #24]
      break;
 80034de:	e004      	b.n	80034ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80034e0:	bf00      	nop
 80034e2:	e002      	b.n	80034ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80034e4:	bf00      	nop
 80034e6:	e000      	b.n	80034ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80034e8:	bf00      	nop
    }
  }
  return (frequency);
 80034ea:	69bb      	ldr	r3, [r7, #24]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	080076c4 	.word	0x080076c4
 80034fc:	080076d4 	.word	0x080076d4
 8003500:	00f42400 	.word	0x00f42400
 8003504:	003d0900 	.word	0x003d0900
 8003508:	aaaaaaab 	.word	0xaaaaaaab
 800350c:	0001e848 	.word	0x0001e848

08003510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e041      	b.n	80035a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd fc60 	bl	8000dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 fc5a 	bl	8003e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d001      	beq.n	80035c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e032      	b.n	800362e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a18      	ldr	r2, [pc, #96]	@ (8003638 <HAL_TIM_Base_Start+0x88>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00e      	beq.n	80035f8 <HAL_TIM_Base_Start+0x48>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e2:	d009      	beq.n	80035f8 <HAL_TIM_Base_Start+0x48>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a14      	ldr	r2, [pc, #80]	@ (800363c <HAL_TIM_Base_Start+0x8c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_TIM_Base_Start+0x48>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a13      	ldr	r2, [pc, #76]	@ (8003640 <HAL_TIM_Base_Start+0x90>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d111      	bne.n	800361c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b06      	cmp	r3, #6
 8003608:	d010      	beq.n	800362c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361a:	e007      	b.n	800362c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800

08003644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d001      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e03a      	b.n	80036d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a18      	ldr	r2, [pc, #96]	@ (80036dc <HAL_TIM_Base_Start_IT+0x98>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00e      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x58>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003686:	d009      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x58>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a14      	ldr	r2, [pc, #80]	@ (80036e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x58>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d111      	bne.n	80036c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d010      	beq.n	80036d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	e007      	b.n	80036d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800

080036e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e041      	b.n	800377e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fb56 	bl	8000dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f000 fb6e 	bl	8003e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x24>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e022      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d109      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x3e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e015      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d109      	bne.n	80037e0 <HAL_TIM_PWM_Start+0x58>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e008      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e05e      	b.n	80038b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0x82>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003808:	e013      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0x92>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003818:	e00b      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start+0xa2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003828:	e003      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fd70 	bl	8004320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1e      	ldr	r2, [pc, #120]	@ (80038c0 <HAL_TIM_PWM_Start+0x138>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d107      	bne.n	800385a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <HAL_TIM_PWM_Start+0x138>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00e      	beq.n	8003882 <HAL_TIM_PWM_Start+0xfa>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386c:	d009      	beq.n	8003882 <HAL_TIM_PWM_Start+0xfa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a14      	ldr	r2, [pc, #80]	@ (80038c4 <HAL_TIM_PWM_Start+0x13c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_TIM_PWM_Start+0xfa>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <HAL_TIM_PWM_Start+0x140>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b06      	cmp	r3, #6
 8003892:	d010      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	e007      	b.n	80038b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800

080038cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d020      	beq.n	8003930 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0202 	mvn.w	r2, #2
 8003900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa5a 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fa4d 	bl	8003dbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa5c 	bl	8003de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	d020      	beq.n	800397c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01b      	beq.n	800397c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0204 	mvn.w	r2, #4
 800394c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fa34 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fa27 	bl	8003dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fa36 	bl	8003de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d020      	beq.n	80039c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01b      	beq.n	80039c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0208 	mvn.w	r2, #8
 8003998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2204      	movs	r2, #4
 800399e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa0e 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
 80039b4:	e005      	b.n	80039c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fa01 	bl	8003dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fa10 	bl	8003de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d020      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01b      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0210 	mvn.w	r2, #16
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2208      	movs	r2, #8
 80039ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f9e8 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f9db 	bl	8003dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f9ea 	bl	8003de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0201 	mvn.w	r2, #1
 8003a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd f8d0 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fd3e 	bl	80044d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00c      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9ba 	bl	8003df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00c      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0220 	mvn.w	r2, #32
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fd11 	bl	80044c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e0ae      	b.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b0c      	cmp	r3, #12
 8003ad6:	f200 809f 	bhi.w	8003c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ada:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003b15 	.word	0x08003b15
 8003ae4:	08003c19 	.word	0x08003c19
 8003ae8:	08003c19 	.word	0x08003c19
 8003aec:	08003c19 	.word	0x08003c19
 8003af0:	08003b55 	.word	0x08003b55
 8003af4:	08003c19 	.word	0x08003c19
 8003af8:	08003c19 	.word	0x08003c19
 8003afc:	08003c19 	.word	0x08003c19
 8003b00:	08003b97 	.word	0x08003b97
 8003b04:	08003c19 	.word	0x08003c19
 8003b08:	08003c19 	.word	0x08003c19
 8003b0c:	08003c19 	.word	0x08003c19
 8003b10:	08003bd7 	.word	0x08003bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f9e2 	bl	8003ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0208 	orr.w	r2, r2, #8
 8003b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0204 	bic.w	r2, r2, #4
 8003b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6999      	ldr	r1, [r3, #24]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	619a      	str	r2, [r3, #24]
      break;
 8003b52:	e064      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fa28 	bl	8003fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6999      	ldr	r1, [r3, #24]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	021a      	lsls	r2, r3, #8
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	619a      	str	r2, [r3, #24]
      break;
 8003b94:	e043      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fa71 	bl	8004084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0208 	orr.w	r2, r2, #8
 8003bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0204 	bic.w	r2, r2, #4
 8003bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69d9      	ldr	r1, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	61da      	str	r2, [r3, #28]
      break;
 8003bd4:	e023      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fabb 	bl	8004158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69d9      	ldr	r1, [r3, #28]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	021a      	lsls	r2, r3, #8
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	61da      	str	r2, [r3, #28]
      break;
 8003c16:	e002      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIM_ConfigClockSource+0x1c>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0b4      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x186>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c84:	d03e      	beq.n	8003d04 <HAL_TIM_ConfigClockSource+0xd4>
 8003c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c8a:	f200 8087 	bhi.w	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c92:	f000 8086 	beq.w	8003da2 <HAL_TIM_ConfigClockSource+0x172>
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9a:	d87f      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b70      	cmp	r3, #112	@ 0x70
 8003c9e:	d01a      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8003ca0:	2b70      	cmp	r3, #112	@ 0x70
 8003ca2:	d87b      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b60      	cmp	r3, #96	@ 0x60
 8003ca6:	d050      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x11a>
 8003ca8:	2b60      	cmp	r3, #96	@ 0x60
 8003caa:	d877      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b50      	cmp	r3, #80	@ 0x50
 8003cae:	d03c      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0xfa>
 8003cb0:	2b50      	cmp	r3, #80	@ 0x50
 8003cb2:	d873      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b40      	cmp	r3, #64	@ 0x40
 8003cb6:	d058      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x13a>
 8003cb8:	2b40      	cmp	r3, #64	@ 0x40
 8003cba:	d86f      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b30      	cmp	r3, #48	@ 0x30
 8003cbe:	d064      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cc0:	2b30      	cmp	r3, #48	@ 0x30
 8003cc2:	d86b      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d060      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d867      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d05c      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d05a      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd4:	e062      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ce6:	f000 fafc 	bl	80042e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	609a      	str	r2, [r3, #8]
      break;
 8003d02:	e04f      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d14:	f000 fae5 	bl	80042e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d26:	609a      	str	r2, [r3, #8]
      break;
 8003d28:	e03c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d36:	461a      	mov	r2, r3
 8003d38:	f000 fa5c 	bl	80041f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2150      	movs	r1, #80	@ 0x50
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fab3 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8003d48:	e02c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d56:	461a      	mov	r2, r3
 8003d58:	f000 fa7a 	bl	8004250 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2160      	movs	r1, #96	@ 0x60
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 faa3 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8003d68:	e01c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d76:	461a      	mov	r2, r3
 8003d78:	f000 fa3c 	bl	80041f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2140      	movs	r1, #64	@ 0x40
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fa93 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8003d88:	e00c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f000 fa8a 	bl	80042ae <TIM_ITRx_SetConfig>
      break;
 8003d9a:	e003      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003da0:	e000      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr

08003de2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
	...

08003e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ed8 <TIM_Base_SetConfig+0xd0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <TIM_Base_SetConfig+0x30>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e26:	d007      	beq.n	8003e38 <TIM_Base_SetConfig+0x30>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003edc <TIM_Base_SetConfig+0xd4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_Base_SetConfig+0x30>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a2b      	ldr	r2, [pc, #172]	@ (8003ee0 <TIM_Base_SetConfig+0xd8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d108      	bne.n	8003e4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a22      	ldr	r2, [pc, #136]	@ (8003ed8 <TIM_Base_SetConfig+0xd0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0x62>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0x62>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003edc <TIM_Base_SetConfig+0xd4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0x62>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee0 <TIM_Base_SetConfig+0xd8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ed8 <TIM_Base_SetConfig+0xd0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d103      	bne.n	8003eb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f023 0201 	bic.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	611a      	str	r2, [r3, #16]
  }
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800

08003ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f023 0201 	bic.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0303 	bic.w	r3, r3, #3
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f023 0302 	bic.w	r3, r3, #2
 8003f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fac <TIM_OC1_SetConfig+0xc8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10c      	bne.n	8003f5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f023 0308 	bic.w	r3, r3, #8
 8003f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f023 0304 	bic.w	r3, r3, #4
 8003f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	@ (8003fac <TIM_OC1_SetConfig+0xc8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d111      	bne.n	8003f86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	621a      	str	r2, [r3, #32]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40012c00 	.word	0x40012c00

08003fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f023 0210 	bic.w	r2, r3, #16
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0320 	bic.w	r3, r3, #32
 8003ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a1d      	ldr	r2, [pc, #116]	@ (8004080 <TIM_OC2_SetConfig+0xd0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10d      	bne.n	800402c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800402a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <TIM_OC2_SetConfig+0xd0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d113      	bne.n	800405c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800403a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	40012c00 	.word	0x40012c00

08004084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <TIM_OC3_SetConfig+0xd0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10d      	bne.n	80040fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a14      	ldr	r2, [pc, #80]	@ (8004154 <TIM_OC3_SetConfig+0xd0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d113      	bne.n	800412e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800410c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00

08004158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800418e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	031b      	lsls	r3, r3, #12
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a0f      	ldr	r2, [pc, #60]	@ (80041f0 <TIM_OC4_SetConfig+0x98>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d109      	bne.n	80041cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	019b      	lsls	r3, r3, #6
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr
 80041f0:	40012c00 	.word	0x40012c00

080041f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800421e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 030a 	bic.w	r3, r3, #10
 8004230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0210 	bic.w	r2, r3, #16
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800427a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	031b      	lsls	r3, r3, #12
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800428c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f043 0307 	orr.w	r3, r3, #7
 80042d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b087      	sub	sp, #28
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	021a      	lsls	r2, r3, #8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	431a      	orrs	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4313      	orrs	r3, r2
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	609a      	str	r2, [r3, #8]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	2201      	movs	r2, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1a      	ldr	r2, [r3, #32]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	43db      	mvns	r3, r3
 8004342:	401a      	ands	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800437c:	2302      	movs	r3, #2
 800437e:	e046      	b.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a16      	ldr	r2, [pc, #88]	@ (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043cc:	d009      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a12      	ldr	r2, [pc, #72]	@ (800441c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a10      	ldr	r2, [pc, #64]	@ (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10c      	bne.n	80043fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800

08004424 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800443c:	2302      	movs	r3, #2
 800443e:	e03d      	b.n	80044bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
	...

080044ec <__NVIC_SetPriority>:
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	db0a      	blt.n	8004516 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	490c      	ldr	r1, [pc, #48]	@ (8004538 <__NVIC_SetPriority+0x4c>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	0112      	lsls	r2, r2, #4
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	440b      	add	r3, r1
 8004510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004514:	e00a      	b.n	800452c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4908      	ldr	r1, [pc, #32]	@ (800453c <__NVIC_SetPriority+0x50>)
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	3b04      	subs	r3, #4
 8004524:	0112      	lsls	r2, r2, #4
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	440b      	add	r3, r1
 800452a:	761a      	strb	r2, [r3, #24]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000e100 	.word	0xe000e100
 800453c:	e000ed00 	.word	0xe000ed00

08004540 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004544:	4b05      	ldr	r3, [pc, #20]	@ (800455c <SysTick_Handler+0x1c>)
 8004546:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004548:	f001 ff26 	bl	8006398 <xTaskGetSchedulerState>
 800454c:	4603      	mov	r3, r0
 800454e:	2b01      	cmp	r3, #1
 8004550:	d001      	beq.n	8004556 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004552:	f002 fcc9 	bl	8006ee8 <xPortSysTickHandler>
  }
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	e000e010 	.word	0xe000e010

08004560 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004564:	2100      	movs	r1, #0
 8004566:	f06f 0004 	mvn.w	r0, #4
 800456a:	f7ff ffbf 	bl	80044ec <__NVIC_SetPriority>
#endif
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800457a:	f3ef 8305 	mrs	r3, IPSR
 800457e:	603b      	str	r3, [r7, #0]
  return(result);
 8004580:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004586:	f06f 0305 	mvn.w	r3, #5
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	e00c      	b.n	80045a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <osKernelInitialize+0x40>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d105      	bne.n	80045a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004596:	4b07      	ldr	r3, [pc, #28]	@ (80045b4 <osKernelInitialize+0x40>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800459c:	2300      	movs	r3, #0
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	e002      	b.n	80045a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045a8:	687b      	ldr	r3, [r7, #4]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	20000218 	.word	0x20000218

080045b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045be:	f3ef 8305 	mrs	r3, IPSR
 80045c2:	603b      	str	r3, [r7, #0]
  return(result);
 80045c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80045ca:	f06f 0305 	mvn.w	r3, #5
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	e010      	b.n	80045f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <osKernelStart+0x48>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d109      	bne.n	80045ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045da:	f7ff ffc1 	bl	8004560 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045de:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <osKernelStart+0x48>)
 80045e0:	2202      	movs	r2, #2
 80045e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045e4:	f001 fa78 	bl	8005ad8 <vTaskStartScheduler>
      stat = osOK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	607b      	str	r3, [r7, #4]
 80045ec:	e002      	b.n	80045f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045f4:	687b      	ldr	r3, [r7, #4]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000218 	.word	0x20000218

08004604 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004604:	b580      	push	{r7, lr}
 8004606:	b08e      	sub	sp, #56	@ 0x38
 8004608:	af04      	add	r7, sp, #16
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004614:	f3ef 8305 	mrs	r3, IPSR
 8004618:	617b      	str	r3, [r7, #20]
  return(result);
 800461a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800461c:	2b00      	cmp	r3, #0
 800461e:	d17e      	bne.n	800471e <osThreadNew+0x11a>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d07b      	beq.n	800471e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004626:	2380      	movs	r3, #128	@ 0x80
 8004628:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800462a:	2318      	movs	r3, #24
 800462c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800462e:	2300      	movs	r3, #0
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004636:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d045      	beq.n	80046ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <osThreadNew+0x48>
        name = attr->name;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <osThreadNew+0x6e>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	2b38      	cmp	r3, #56	@ 0x38
 8004664:	d805      	bhi.n	8004672 <osThreadNew+0x6e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <osThreadNew+0x72>
        return (NULL);
 8004672:	2300      	movs	r3, #0
 8004674:	e054      	b.n	8004720 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00e      	beq.n	80046ac <osThreadNew+0xa8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2ba7      	cmp	r3, #167	@ 0xa7
 8004694:	d90a      	bls.n	80046ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800469a:	2b00      	cmp	r3, #0
 800469c:	d006      	beq.n	80046ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <osThreadNew+0xa8>
        mem = 1;
 80046a6:	2301      	movs	r3, #1
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	e010      	b.n	80046ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10c      	bne.n	80046ce <osThreadNew+0xca>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d108      	bne.n	80046ce <osThreadNew+0xca>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <osThreadNew+0xca>
          mem = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e001      	b.n	80046ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d110      	bne.n	80046f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046dc:	9202      	str	r2, [sp, #8]
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	6a3a      	ldr	r2, [r7, #32]
 80046e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f001 f800 	bl	80056f0 <xTaskCreateStatic>
 80046f0:	4603      	mov	r3, r0
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	e013      	b.n	800471e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d110      	bne.n	800471e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	b29a      	uxth	r2, r3
 8004700:	f107 0310 	add.w	r3, r7, #16
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f001 f84e 	bl	80057b0 <xTaskCreate>
 8004714:	4603      	mov	r3, r0
 8004716:	2b01      	cmp	r3, #1
 8004718:	d001      	beq.n	800471e <osThreadNew+0x11a>
            hTask = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800471e:	693b      	ldr	r3, [r7, #16]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3728      	adds	r7, #40	@ 0x28
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004730:	f3ef 8305 	mrs	r3, IPSR
 8004734:	60bb      	str	r3, [r7, #8]
  return(result);
 8004736:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <osDelay+0x1c>
    stat = osErrorISR;
 800473c:	f06f 0305 	mvn.w	r3, #5
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	e007      	b.n	8004754 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <osDelay+0x2c>
      vTaskDelay(ticks);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f001 f98c 	bl	8005a6c <vTaskDelay>
    }
  }

  return (stat);
 8004754:	68fb      	ldr	r3, [r7, #12]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800475e:	b580      	push	{r7, lr}
 8004760:	b08a      	sub	sp, #40	@ 0x28
 8004762:	af02      	add	r7, sp, #8
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800476e:	f3ef 8305 	mrs	r3, IPSR
 8004772:	613b      	str	r3, [r7, #16]
  return(result);
 8004774:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004776:	2b00      	cmp	r3, #0
 8004778:	d15f      	bne.n	800483a <osMessageQueueNew+0xdc>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d05c      	beq.n	800483a <osMessageQueueNew+0xdc>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d059      	beq.n	800483a <osMessageQueueNew+0xdc>
    mem = -1;
 8004786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800478a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d029      	beq.n	80047e6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d012      	beq.n	80047c0 <osMessageQueueNew+0x62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b4f      	cmp	r3, #79	@ 0x4f
 80047a0:	d90e      	bls.n	80047c0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <osMessageQueueNew+0x62>
        mem = 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	e014      	b.n	80047ea <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d110      	bne.n	80047ea <osMessageQueueNew+0x8c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10c      	bne.n	80047ea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d108      	bne.n	80047ea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <osMessageQueueNew+0x8c>
          mem = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	e001      	b.n	80047ea <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d10b      	bne.n	8004808 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2100      	movs	r1, #0
 80047fa:	9100      	str	r1, [sp, #0]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fa2a 	bl	8004c58 <xQueueGenericCreateStatic>
 8004804:	61f8      	str	r0, [r7, #28]
 8004806:	e008      	b.n	800481a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d105      	bne.n	800481a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800480e:	2200      	movs	r2, #0
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fa9d 	bl	8004d52 <xQueueGenericCreate>
 8004818:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00c      	beq.n	800483a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e001      	b.n	8004832 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004832:	6979      	ldr	r1, [r7, #20]
 8004834:	69f8      	ldr	r0, [r7, #28]
 8004836:	f000 feff 	bl	8005638 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800483a:	69fb      	ldr	r3, [r7, #28]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800485c:	f3ef 8305 	mrs	r3, IPSR
 8004860:	617b      	str	r3, [r7, #20]
  return(result);
 8004862:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004864:	2b00      	cmp	r3, #0
 8004866:	d028      	beq.n	80048ba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <osMessageQueuePut+0x36>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <osMessageQueuePut+0x36>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800487a:	f06f 0303 	mvn.w	r3, #3
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	e038      	b.n	80048f4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004886:	f107 0210 	add.w	r2, r7, #16
 800488a:	2300      	movs	r3, #0
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	69b8      	ldr	r0, [r7, #24]
 8004890:	f000 fbc0 	bl	8005014 <xQueueGenericSendFromISR>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d003      	beq.n	80048a2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800489a:	f06f 0302 	mvn.w	r3, #2
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	e028      	b.n	80048f4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d025      	beq.n	80048f4 <osMessageQueuePut+0xb0>
 80048a8:	4b15      	ldr	r3, [pc, #84]	@ (8004900 <osMessageQueuePut+0xbc>)
 80048aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	e01c      	b.n	80048f4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <osMessageQueuePut+0x82>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80048c6:	f06f 0303 	mvn.w	r3, #3
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	e012      	b.n	80048f4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80048ce:	2300      	movs	r3, #0
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	69b8      	ldr	r0, [r7, #24]
 80048d6:	f000 fa9b 	bl	8004e10 <xQueueGenericSend>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d009      	beq.n	80048f4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80048e6:	f06f 0301 	mvn.w	r3, #1
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	e002      	b.n	80048f4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80048ee:	f06f 0302 	mvn.w	r3, #2
 80048f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80048f4:	69fb      	ldr	r3, [r7, #28]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800491a:	f3ef 8305 	mrs	r3, IPSR
 800491e:	617b      	str	r3, [r7, #20]
  return(result);
 8004920:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004922:	2b00      	cmp	r3, #0
 8004924:	d028      	beq.n	8004978 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <osMessageQueueGet+0x34>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <osMessageQueueGet+0x34>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004938:	f06f 0303 	mvn.w	r3, #3
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	e037      	b.n	80049b0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004944:	f107 0310 	add.w	r3, r7, #16
 8004948:	461a      	mov	r2, r3
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	69b8      	ldr	r0, [r7, #24]
 800494e:	f000 fce1 	bl	8005314 <xQueueReceiveFromISR>
 8004952:	4603      	mov	r3, r0
 8004954:	2b01      	cmp	r3, #1
 8004956:	d003      	beq.n	8004960 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004958:	f06f 0302 	mvn.w	r3, #2
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e027      	b.n	80049b0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d024      	beq.n	80049b0 <osMessageQueueGet+0xac>
 8004966:	4b15      	ldr	r3, [pc, #84]	@ (80049bc <osMessageQueueGet+0xb8>)
 8004968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	e01b      	b.n	80049b0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <osMessageQueueGet+0x80>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004984:	f06f 0303 	mvn.w	r3, #3
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e011      	b.n	80049b0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	69b8      	ldr	r0, [r7, #24]
 8004992:	f000 fbdd 	bl	8005150 <xQueueReceive>
 8004996:	4603      	mov	r3, r0
 8004998:	2b01      	cmp	r3, #1
 800499a:	d009      	beq.n	80049b0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80049a2:	f06f 0301 	mvn.w	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e002      	b.n	80049b0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80049aa:	f06f 0302 	mvn.w	r3, #2
 80049ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80049b0:	69fb      	ldr	r3, [r7, #28]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a06      	ldr	r2, [pc, #24]	@ (80049e8 <vApplicationGetIdleTaskMemory+0x28>)
 80049d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4a05      	ldr	r2, [pc, #20]	@ (80049ec <vApplicationGetIdleTaskMemory+0x2c>)
 80049d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2280      	movs	r2, #128	@ 0x80
 80049dc:	601a      	str	r2, [r3, #0]
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	2000021c 	.word	0x2000021c
 80049ec:	200002c4 	.word	0x200002c4

080049f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a07      	ldr	r2, [pc, #28]	@ (8004a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8004a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4a06      	ldr	r2, [pc, #24]	@ (8004a20 <vApplicationGetTimerTaskMemory+0x30>)
 8004a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a0e:	601a      	str	r2, [r3, #0]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	200004c4 	.word	0x200004c4
 8004a20:	2000056c 	.word	0x2000056c

08004a24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f103 0208 	add.w	r2, r3, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f103 0208 	add.w	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f103 0208 	add.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ad6:	d103      	bne.n	8004ae0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e00c      	b.n	8004afa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e002      	b.n	8004aee <vListInsert+0x2e>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d2f6      	bcs.n	8004ae8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6892      	ldr	r2, [r2, #8]
 8004b46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6852      	ldr	r2, [r2, #4]
 8004b50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d103      	bne.n	8004b64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	1e5a      	subs	r2, r3, #1
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
	...

08004b84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bb0:	f002 f91c 	bl	8006dec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbc:	68f9      	ldr	r1, [r7, #12]
 8004bbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	441a      	add	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be0:	3b01      	subs	r3, #1
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004be6:	fb01 f303 	mul.w	r3, r1, r3
 8004bea:	441a      	add	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	22ff      	movs	r2, #255	@ 0xff
 8004bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	22ff      	movs	r2, #255	@ 0xff
 8004bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d114      	bne.n	8004c30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01a      	beq.n	8004c44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3310      	adds	r3, #16
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 f9fa 	bl	800600c <xTaskRemoveFromEventList>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d012      	beq.n	8004c44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <xQueueGenericReset+0xd0>)
 8004c20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	e009      	b.n	8004c44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3310      	adds	r3, #16
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fef5 	bl	8004a24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3324      	adds	r3, #36	@ 0x24
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fef0 	bl	8004a24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c44:	f002 f902 	bl	8006e4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c48:	2301      	movs	r3, #1
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08e      	sub	sp, #56	@ 0x38
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	e7fd      	b.n	8004c80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10b      	bne.n	8004ca2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c9c:	bf00      	nop
 8004c9e:	bf00      	nop
 8004ca0:	e7fd      	b.n	8004c9e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <xQueueGenericCreateStatic+0x56>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <xQueueGenericCreateStatic+0x5a>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueGenericCreateStatic+0x5c>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	623b      	str	r3, [r7, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <xQueueGenericCreateStatic+0x84>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <xQueueGenericCreateStatic+0x88>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <xQueueGenericCreateStatic+0x8a>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	61fb      	str	r3, [r7, #28]
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	e7fd      	b.n	8004cfa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cfe:	2350      	movs	r3, #80	@ 0x50
 8004d00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b50      	cmp	r3, #80	@ 0x50
 8004d06:	d00b      	beq.n	8004d20 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	61bb      	str	r3, [r7, #24]
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d20:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00d      	beq.n	8004d48 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d34:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f840 	bl	8004dc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3730      	adds	r7, #48	@ 0x30
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b08a      	sub	sp, #40	@ 0x28
 8004d56:	af02      	add	r7, sp, #8
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	613b      	str	r3, [r7, #16]
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	e7fd      	b.n	8004d7a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	3350      	adds	r3, #80	@ 0x50
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f002 f92f 	bl	8006ff0 <pvPortMalloc>
 8004d92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	3350      	adds	r3, #80	@ 0x50
 8004da2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dac:	79fa      	ldrb	r2, [r7, #7]
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	4613      	mov	r3, r2
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f805 	bl	8004dc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
	}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d103      	bne.n	8004de4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e002      	b.n	8004dea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004df6:	2101      	movs	r1, #1
 8004df8:	69b8      	ldr	r0, [r7, #24]
 8004dfa:	f7ff fec3 	bl	8004b84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e06:	bf00      	nop
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08e      	sub	sp, #56	@ 0x38
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <xQueueGenericSend+0x34>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <xQueueGenericSend+0x42>
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <xQueueGenericSend+0x46>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <xQueueGenericSend+0x48>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <xQueueGenericSend+0x64>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e6e:	bf00      	nop
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d103      	bne.n	8004e82 <xQueueGenericSend+0x72>
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <xQueueGenericSend+0x76>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <xQueueGenericSend+0x78>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <xQueueGenericSend+0x94>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	623b      	str	r3, [r7, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ea4:	f001 fa78 	bl	8006398 <xTaskGetSchedulerState>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <xQueueGenericSend+0xa4>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <xQueueGenericSend+0xa8>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <xQueueGenericSend+0xaa>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <xQueueGenericSend+0xc6>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	61fb      	str	r3, [r7, #28]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ed6:	f001 ff89 	bl	8006dec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d302      	bcc.n	8004eec <xQueueGenericSend+0xdc>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d129      	bne.n	8004f40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ef2:	f000 fa91 	bl	8005418 <prvCopyDataToQueue>
 8004ef6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	3324      	adds	r3, #36	@ 0x24
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f881 	bl	800600c <xTaskRemoveFromEventList>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f10:	4b3f      	ldr	r3, [pc, #252]	@ (8005010 <xQueueGenericSend+0x200>)
 8004f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	e00a      	b.n	8004f38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f28:	4b39      	ldr	r3, [pc, #228]	@ (8005010 <xQueueGenericSend+0x200>)
 8004f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f38:	f001 ff88 	bl	8006e4c <vPortExitCritical>
				return pdPASS;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e063      	b.n	8005008 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f46:	f001 ff81 	bl	8006e4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e05c      	b.n	8005008 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 f8bb 	bl	80060d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f62:	f001 ff73 	bl	8006e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f66:	f000 fe27 	bl	8005bb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f6a:	f001 ff3f 	bl	8006dec <vPortEnterCritical>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f74:	b25b      	sxtb	r3, r3
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f7a:	d103      	bne.n	8004f84 <xQueueGenericSend+0x174>
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f90:	d103      	bne.n	8004f9a <xQueueGenericSend+0x18a>
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f9a:	f001 ff57 	bl	8006e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f9e:	1d3a      	adds	r2, r7, #4
 8004fa0:	f107 0314 	add.w	r3, r7, #20
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f001 f8aa 	bl	8006100 <xTaskCheckForTimeOut>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d124      	bne.n	8004ffc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004fb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fb4:	f000 fb28 	bl	8005608 <prvIsQueueFull>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d018      	beq.n	8004ff0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	3310      	adds	r3, #16
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 ffce 	bl	8005f68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004fcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fce:	f000 fab3 	bl	8005538 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004fd2:	f000 fdff 	bl	8005bd4 <xTaskResumeAll>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f47f af7c 	bne.w	8004ed6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004fde:	4b0c      	ldr	r3, [pc, #48]	@ (8005010 <xQueueGenericSend+0x200>)
 8004fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	e772      	b.n	8004ed6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ff2:	f000 faa1 	bl	8005538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ff6:	f000 fded 	bl	8005bd4 <xTaskResumeAll>
 8004ffa:	e76c      	b.n	8004ed6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ffe:	f000 fa9b 	bl	8005538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005002:	f000 fde7 	bl	8005bd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005006:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005008:	4618      	mov	r0, r3
 800500a:	3738      	adds	r7, #56	@ 0x38
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	e000ed04 	.word	0xe000ed04

08005014 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b090      	sub	sp, #64	@ 0x40
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10b      	bne.n	8005044 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	e7fd      	b.n	8005040 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <xQueueGenericSendFromISR+0x3e>
 800504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <xQueueGenericSendFromISR+0x42>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <xQueueGenericSendFromISR+0x44>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800506e:	bf00      	nop
 8005070:	bf00      	nop
 8005072:	e7fd      	b.n	8005070 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d103      	bne.n	8005082 <xQueueGenericSendFromISR+0x6e>
 800507a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <xQueueGenericSendFromISR+0x72>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <xQueueGenericSendFromISR+0x74>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	623b      	str	r3, [r7, #32]
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050a4:	f001 ff64 	bl	8006f70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050a8:	f3ef 8211 	mrs	r2, BASEPRI
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d302      	bcc.n	80050d6 <xQueueGenericSendFromISR+0xc2>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d12f      	bne.n	8005136 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80050ec:	f000 f994 	bl	8005418 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050f8:	d112      	bne.n	8005120 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	3324      	adds	r3, #36	@ 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f000 ff80 	bl	800600c <xTaskRemoveFromEventList>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00e      	beq.n	8005130 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e007      	b.n	8005130 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005120:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005124:	3301      	adds	r3, #1
 8005126:	b2db      	uxtb	r3, r3
 8005128:	b25a      	sxtb	r2, r3
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005130:	2301      	movs	r3, #1
 8005132:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005134:	e001      	b.n	800513a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005136:	2300      	movs	r3, #0
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005144:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005148:	4618      	mov	r0, r3
 800514a:	3740      	adds	r7, #64	@ 0x40
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08c      	sub	sp, #48	@ 0x30
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800515c:	2300      	movs	r3, #0
 800515e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10b      	bne.n	8005182 <xQueueReceive+0x32>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	623b      	str	r3, [r7, #32]
}
 800517c:	bf00      	nop
 800517e:	bf00      	nop
 8005180:	e7fd      	b.n	800517e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <xQueueReceive+0x40>
 8005188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <xQueueReceive+0x44>
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <xQueueReceive+0x46>
 8005194:	2300      	movs	r3, #0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <xQueueReceive+0x62>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	61fb      	str	r3, [r7, #28]
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	e7fd      	b.n	80051ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051b2:	f001 f8f1 	bl	8006398 <xTaskGetSchedulerState>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <xQueueReceive+0x72>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <xQueueReceive+0x76>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <xQueueReceive+0x78>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <xQueueReceive+0x94>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	61bb      	str	r3, [r7, #24]
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	e7fd      	b.n	80051e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051e4:	f001 fe02 	bl	8006dec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01f      	beq.n	8005234 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051f8:	f000 f978 	bl	80054ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	1e5a      	subs	r2, r3, #1
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00f      	beq.n	800522c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	3310      	adds	r3, #16
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fefb 	bl	800600c <xTaskRemoveFromEventList>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800521c:	4b3c      	ldr	r3, [pc, #240]	@ (8005310 <xQueueReceive+0x1c0>)
 800521e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800522c:	f001 fe0e 	bl	8006e4c <vPortExitCritical>
				return pdPASS;
 8005230:	2301      	movs	r3, #1
 8005232:	e069      	b.n	8005308 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d103      	bne.n	8005242 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800523a:	f001 fe07 	bl	8006e4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800523e:	2300      	movs	r3, #0
 8005240:	e062      	b.n	8005308 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005248:	f107 0310 	add.w	r3, r7, #16
 800524c:	4618      	mov	r0, r3
 800524e:	f000 ff41 	bl	80060d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005252:	2301      	movs	r3, #1
 8005254:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005256:	f001 fdf9 	bl	8006e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800525a:	f000 fcad 	bl	8005bb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800525e:	f001 fdc5 	bl	8006dec <vPortEnterCritical>
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005268:	b25b      	sxtb	r3, r3
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800526e:	d103      	bne.n	8005278 <xQueueReceive+0x128>
 8005270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800527e:	b25b      	sxtb	r3, r3
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005284:	d103      	bne.n	800528e <xQueueReceive+0x13e>
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800528e:	f001 fddd 	bl	8006e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005292:	1d3a      	adds	r2, r7, #4
 8005294:	f107 0310 	add.w	r3, r7, #16
 8005298:	4611      	mov	r1, r2
 800529a:	4618      	mov	r0, r3
 800529c:	f000 ff30 	bl	8006100 <xTaskCheckForTimeOut>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d123      	bne.n	80052ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052a8:	f000 f998 	bl	80055dc <prvIsQueueEmpty>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d017      	beq.n	80052e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	3324      	adds	r3, #36	@ 0x24
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fe54 	bl	8005f68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052c2:	f000 f939 	bl	8005538 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052c6:	f000 fc85 	bl	8005bd4 <xTaskResumeAll>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d189      	bne.n	80051e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80052d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005310 <xQueueReceive+0x1c0>)
 80052d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	e780      	b.n	80051e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052e4:	f000 f928 	bl	8005538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052e8:	f000 fc74 	bl	8005bd4 <xTaskResumeAll>
 80052ec:	e77a      	b.n	80051e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052f0:	f000 f922 	bl	8005538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052f4:	f000 fc6e 	bl	8005bd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052fa:	f000 f96f 	bl	80055dc <prvIsQueueEmpty>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	f43f af6f 	beq.w	80051e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005306:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005308:	4618      	mov	r0, r3
 800530a:	3730      	adds	r7, #48	@ 0x30
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08e      	sub	sp, #56	@ 0x38
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	623b      	str	r3, [r7, #32]
}
 800533c:	bf00      	nop
 800533e:	bf00      	nop
 8005340:	e7fd      	b.n	800533e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d103      	bne.n	8005350 <xQueueReceiveFromISR+0x3c>
 8005348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <xQueueReceiveFromISR+0x40>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <xQueueReceiveFromISR+0x42>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	61fb      	str	r3, [r7, #28]
}
 800536c:	bf00      	nop
 800536e:	bf00      	nop
 8005370:	e7fd      	b.n	800536e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005372:	f001 fdfd 	bl	8006f70 <vPortValidateInterruptPriority>
	__asm volatile
 8005376:	f3ef 8211 	mrs	r2, BASEPRI
 800537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	61ba      	str	r2, [r7, #24]
 800538c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800538e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005390:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005396:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02f      	beq.n	80053fe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053ac:	f000 f89e 	bl	80054ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80053b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053c0:	d112      	bne.n	80053e8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053cc:	3310      	adds	r3, #16
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fe1c 	bl	800600c <xTaskRemoveFromEventList>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00e      	beq.n	80053f8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e007      	b.n	80053f8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80053e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053ec:	3301      	adds	r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	b25a      	sxtb	r2, r3
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80053f8:	2301      	movs	r3, #1
 80053fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fc:	e001      	b.n	8005402 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80053fe:	2300      	movs	r3, #0
 8005400:	637b      	str	r3, [r7, #52]	@ 0x34
 8005402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005404:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f383 8811 	msr	BASEPRI, r3
}
 800540c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005410:	4618      	mov	r0, r3
 8005412:	3738      	adds	r7, #56	@ 0x38
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10d      	bne.n	8005452 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d14d      	bne.n	80054da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 ffc6 	bl	80063d4 <xTaskPriorityDisinherit>
 8005448:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	e043      	b.n	80054da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d119      	bne.n	800548c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6858      	ldr	r0, [r3, #4]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005460:	461a      	mov	r2, r3
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	f002 f83c 	bl	80074e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005470:	441a      	add	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	d32b      	bcc.n	80054da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	e026      	b.n	80054da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68d8      	ldr	r0, [r3, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005494:	461a      	mov	r2, r3
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	f002 f822 	bl	80074e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a4:	425b      	negs	r3, r3
 80054a6:	441a      	add	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d207      	bcs.n	80054c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	425b      	negs	r3, r3
 80054c2:	441a      	add	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d105      	bne.n	80054da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80054e2:	697b      	ldr	r3, [r7, #20]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d018      	beq.n	8005530 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	441a      	add	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	d303      	bcc.n	8005520 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68d9      	ldr	r1, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	461a      	mov	r2, r3
 800552a:	6838      	ldr	r0, [r7, #0]
 800552c:	f001 ffd8 	bl	80074e0 <memcpy>
	}
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005540:	f001 fc54 	bl	8006dec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800554a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800554c:	e011      	b.n	8005572 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d012      	beq.n	800557c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3324      	adds	r3, #36	@ 0x24
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fd56 	bl	800600c <xTaskRemoveFromEventList>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005566:	f000 fe2f 	bl	80061c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	3b01      	subs	r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	dce9      	bgt.n	800554e <prvUnlockQueue+0x16>
 800557a:	e000      	b.n	800557e <prvUnlockQueue+0x46>
					break;
 800557c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	22ff      	movs	r2, #255	@ 0xff
 8005582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005586:	f001 fc61 	bl	8006e4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800558a:	f001 fc2f 	bl	8006dec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005594:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005596:	e011      	b.n	80055bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d012      	beq.n	80055c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3310      	adds	r3, #16
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fd31 	bl	800600c <xTaskRemoveFromEventList>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055b0:	f000 fe0a 	bl	80061c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055b4:	7bbb      	ldrb	r3, [r7, #14]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	dce9      	bgt.n	8005598 <prvUnlockQueue+0x60>
 80055c4:	e000      	b.n	80055c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	22ff      	movs	r2, #255	@ 0xff
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80055d0:	f001 fc3c 	bl	8006e4c <vPortExitCritical>
}
 80055d4:	bf00      	nop
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055e4:	f001 fc02 	bl	8006dec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e001      	b.n	80055fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055fa:	f001 fc27 	bl	8006e4c <vPortExitCritical>

	return xReturn;
 80055fe:	68fb      	ldr	r3, [r7, #12]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005610:	f001 fbec 	bl	8006dec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	429a      	cmp	r2, r3
 800561e:	d102      	bne.n	8005626 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005620:	2301      	movs	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e001      	b.n	800562a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800562a:	f001 fc0f 	bl	8006e4c <vPortExitCritical>

	return xReturn;
 800562e:	68fb      	ldr	r3, [r7, #12]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	e014      	b.n	8005672 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005648:	4a0e      	ldr	r2, [pc, #56]	@ (8005684 <vQueueAddToRegistry+0x4c>)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10b      	bne.n	800566c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005654:	490b      	ldr	r1, [pc, #44]	@ (8005684 <vQueueAddToRegistry+0x4c>)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800565e:	4a09      	ldr	r2, [pc, #36]	@ (8005684 <vQueueAddToRegistry+0x4c>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800566a:	e006      	b.n	800567a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3301      	adds	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b07      	cmp	r3, #7
 8005676:	d9e7      	bls.n	8005648 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	2000096c 	.word	0x2000096c

08005688 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005698:	f001 fba8 	bl	8006dec <vPortEnterCritical>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056a2:	b25b      	sxtb	r3, r3
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056a8:	d103      	bne.n	80056b2 <vQueueWaitForMessageRestricted+0x2a>
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056b8:	b25b      	sxtb	r3, r3
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056be:	d103      	bne.n	80056c8 <vQueueWaitForMessageRestricted+0x40>
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056c8:	f001 fbc0 	bl	8006e4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	3324      	adds	r3, #36	@ 0x24
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fc69 	bl	8005fb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056e2:	6978      	ldr	r0, [r7, #20]
 80056e4:	f7ff ff28 	bl	8005538 <prvUnlockQueue>
	}
 80056e8:	bf00      	nop
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08e      	sub	sp, #56	@ 0x38
 80056f4:	af04      	add	r7, sp, #16
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10b      	bne.n	800571c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	623b      	str	r3, [r7, #32]
}
 8005716:	bf00      	nop
 8005718:	bf00      	nop
 800571a:	e7fd      	b.n	8005718 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10b      	bne.n	800573a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	61fb      	str	r3, [r7, #28]
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	e7fd      	b.n	8005736 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800573a:	23a8      	movs	r3, #168	@ 0xa8
 800573c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2ba8      	cmp	r3, #168	@ 0xa8
 8005742:	d00b      	beq.n	800575c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	61bb      	str	r3, [r7, #24]
}
 8005756:	bf00      	nop
 8005758:	bf00      	nop
 800575a:	e7fd      	b.n	8005758 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800575c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800575e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01e      	beq.n	80057a2 <xTaskCreateStatic+0xb2>
 8005764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01b      	beq.n	80057a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005772:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	2202      	movs	r2, #2
 8005778:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800577c:	2300      	movs	r3, #0
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	9302      	str	r3, [sp, #8]
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f851 	bl	800583c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800579a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800579c:	f000 f8f6 	bl	800598c <prvAddNewTaskToReadyList>
 80057a0:	e001      	b.n	80057a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057a6:	697b      	ldr	r3, [r7, #20]
	}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3728      	adds	r7, #40	@ 0x28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08c      	sub	sp, #48	@ 0x30
 80057b4:	af04      	add	r7, sp, #16
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fc13 	bl	8006ff0 <pvPortMalloc>
 80057ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057d2:	20a8      	movs	r0, #168	@ 0xa8
 80057d4:	f001 fc0c 	bl	8006ff0 <pvPortMalloc>
 80057d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80057e6:	e005      	b.n	80057f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057e8:	6978      	ldr	r0, [r7, #20]
 80057ea:	f001 fccf 	bl	800718c <vPortFree>
 80057ee:	e001      	b.n	80057f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	2300      	movs	r3, #0
 8005806:	9303      	str	r3, [sp, #12]
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f80f 	bl	800583c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800581e:	69f8      	ldr	r0, [r7, #28]
 8005820:	f000 f8b4 	bl	800598c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005824:	2301      	movs	r3, #1
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	e002      	b.n	8005830 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800582a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800582e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005830:	69bb      	ldr	r3, [r7, #24]
	}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800584a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	461a      	mov	r2, r3
 8005854:	21a5      	movs	r1, #165	@ 0xa5
 8005856:	f001 fdb7 	bl	80073c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005864:	3b01      	subs	r3, #1
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f023 0307 	bic.w	r3, r3, #7
 8005872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	617b      	str	r3, [r7, #20]
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	e7fd      	b.n	8005892 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01f      	beq.n	80058dc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	e012      	b.n	80058c8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	7819      	ldrb	r1, [r3, #0]
 80058aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	3334      	adds	r3, #52	@ 0x34
 80058b2:	460a      	mov	r2, r1
 80058b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d006      	beq.n	80058d0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b0f      	cmp	r3, #15
 80058cc:	d9e9      	bls.n	80058a2 <prvInitialiseNewTask+0x66>
 80058ce:	e000      	b.n	80058d2 <prvInitialiseNewTask+0x96>
			{
				break;
 80058d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058da:	e003      	b.n	80058e4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	2b37      	cmp	r3, #55	@ 0x37
 80058e8:	d901      	bls.n	80058ee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058ea:	2337      	movs	r3, #55	@ 0x37
 80058ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	2200      	movs	r2, #0
 80058fe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005902:	3304      	adds	r3, #4
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff f8ac 	bl	8004a62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	3318      	adds	r3, #24
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff f8a7 	bl	8004a62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005918:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005928:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005934:	2200      	movs	r2, #0
 8005936:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	3354      	adds	r3, #84	@ 0x54
 800593e:	224c      	movs	r2, #76	@ 0x4c
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f001 fd40 	bl	80073c8 <memset>
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	4a0d      	ldr	r2, [pc, #52]	@ (8005980 <prvInitialiseNewTask+0x144>)
 800594c:	659a      	str	r2, [r3, #88]	@ 0x58
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	4a0c      	ldr	r2, [pc, #48]	@ (8005984 <prvInitialiseNewTask+0x148>)
 8005952:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	4a0c      	ldr	r2, [pc, #48]	@ (8005988 <prvInitialiseNewTask+0x14c>)
 8005958:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	68f9      	ldr	r1, [r7, #12]
 800595e:	69b8      	ldr	r0, [r7, #24]
 8005960:	f001 f954 	bl	8006c0c <pxPortInitialiseStack>
 8005964:	4602      	mov	r2, r0
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005976:	bf00      	nop
 8005978:	3720      	adds	r7, #32
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20001c00 	.word	0x20001c00
 8005984:	20001c68 	.word	0x20001c68
 8005988:	20001cd0 	.word	0x20001cd0

0800598c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005994:	f001 fa2a 	bl	8006dec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005998:	4b2d      	ldr	r3, [pc, #180]	@ (8005a50 <prvAddNewTaskToReadyList+0xc4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3301      	adds	r3, #1
 800599e:	4a2c      	ldr	r2, [pc, #176]	@ (8005a50 <prvAddNewTaskToReadyList+0xc4>)
 80059a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a54 <prvAddNewTaskToReadyList+0xc8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005a54 <prvAddNewTaskToReadyList+0xc8>)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059b0:	4b27      	ldr	r3, [pc, #156]	@ (8005a50 <prvAddNewTaskToReadyList+0xc4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d110      	bne.n	80059da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059b8:	f000 fc2a 	bl	8006210 <prvInitialiseTaskLists>
 80059bc:	e00d      	b.n	80059da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059be:	4b26      	ldr	r3, [pc, #152]	@ (8005a58 <prvAddNewTaskToReadyList+0xcc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d109      	bne.n	80059da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059c6:	4b23      	ldr	r3, [pc, #140]	@ (8005a54 <prvAddNewTaskToReadyList+0xc8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d802      	bhi.n	80059da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a54 <prvAddNewTaskToReadyList+0xc8>)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059da:	4b20      	ldr	r3, [pc, #128]	@ (8005a5c <prvAddNewTaskToReadyList+0xd0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a5c <prvAddNewTaskToReadyList+0xd0>)
 80059e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059e4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a5c <prvAddNewTaskToReadyList+0xd0>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a60 <prvAddNewTaskToReadyList+0xd4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d903      	bls.n	8005a00 <prvAddNewTaskToReadyList+0x74>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	4a18      	ldr	r2, [pc, #96]	@ (8005a60 <prvAddNewTaskToReadyList+0xd4>)
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <prvAddNewTaskToReadyList+0xd8>)
 8005a0e:	441a      	add	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f7ff f82f 	bl	8004a7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a1c:	f001 fa16 	bl	8006e4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a20:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <prvAddNewTaskToReadyList+0xcc>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00e      	beq.n	8005a46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a28:	4b0a      	ldr	r3, [pc, #40]	@ (8005a54 <prvAddNewTaskToReadyList+0xc8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d207      	bcs.n	8005a46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a36:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <prvAddNewTaskToReadyList+0xdc>)
 8005a38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a46:	bf00      	nop
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000e80 	.word	0x20000e80
 8005a54:	200009ac 	.word	0x200009ac
 8005a58:	20000e8c 	.word	0x20000e8c
 8005a5c:	20000e9c 	.word	0x20000e9c
 8005a60:	20000e88 	.word	0x20000e88
 8005a64:	200009b0 	.word	0x200009b0
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d018      	beq.n	8005ab0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a7e:	4b14      	ldr	r3, [pc, #80]	@ (8005ad0 <vTaskDelay+0x64>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00b      	beq.n	8005a9e <vTaskDelay+0x32>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	60bb      	str	r3, [r7, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	e7fd      	b.n	8005a9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a9e:	f000 f88b 	bl	8005bb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fd05 	bl	80064b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005aaa:	f000 f893 	bl	8005bd4 <xTaskResumeAll>
 8005aae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d107      	bne.n	8005ac6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005ab6:	4b07      	ldr	r3, [pc, #28]	@ (8005ad4 <vTaskDelay+0x68>)
 8005ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000ea8 	.word	0x20000ea8
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	@ 0x28
 8005adc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ae6:	463a      	mov	r2, r7
 8005ae8:	1d39      	adds	r1, r7, #4
 8005aea:	f107 0308 	add.w	r3, r7, #8
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe ff66 	bl	80049c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	9202      	str	r2, [sp, #8]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	2300      	movs	r3, #0
 8005b04:	460a      	mov	r2, r1
 8005b06:	4924      	ldr	r1, [pc, #144]	@ (8005b98 <vTaskStartScheduler+0xc0>)
 8005b08:	4824      	ldr	r0, [pc, #144]	@ (8005b9c <vTaskStartScheduler+0xc4>)
 8005b0a:	f7ff fdf1 	bl	80056f0 <xTaskCreateStatic>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4a23      	ldr	r2, [pc, #140]	@ (8005ba0 <vTaskStartScheduler+0xc8>)
 8005b12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b14:	4b22      	ldr	r3, [pc, #136]	@ (8005ba0 <vTaskStartScheduler+0xc8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	e001      	b.n	8005b26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d102      	bne.n	8005b32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b2c:	f000 fd16 	bl	800655c <xTimerCreateTimerTask>
 8005b30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d11b      	bne.n	8005b70 <vTaskStartScheduler+0x98>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	613b      	str	r3, [r7, #16]
}
 8005b4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b4c:	4b15      	ldr	r3, [pc, #84]	@ (8005ba4 <vTaskStartScheduler+0xcc>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3354      	adds	r3, #84	@ 0x54
 8005b52:	4a15      	ldr	r2, [pc, #84]	@ (8005ba8 <vTaskStartScheduler+0xd0>)
 8005b54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b56:	4b15      	ldr	r3, [pc, #84]	@ (8005bac <vTaskStartScheduler+0xd4>)
 8005b58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b5e:	4b14      	ldr	r3, [pc, #80]	@ (8005bb0 <vTaskStartScheduler+0xd8>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b64:	4b13      	ldr	r3, [pc, #76]	@ (8005bb4 <vTaskStartScheduler+0xdc>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b6a:	f001 f8cd 	bl	8006d08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b6e:	e00f      	b.n	8005b90 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b76:	d10b      	bne.n	8005b90 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	60fb      	str	r3, [r7, #12]
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	e7fd      	b.n	8005b8c <vTaskStartScheduler+0xb4>
}
 8005b90:	bf00      	nop
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	080075fc 	.word	0x080075fc
 8005b9c:	080061e1 	.word	0x080061e1
 8005ba0:	20000ea4 	.word	0x20000ea4
 8005ba4:	200009ac 	.word	0x200009ac
 8005ba8:	20000010 	.word	0x20000010
 8005bac:	20000ea0 	.word	0x20000ea0
 8005bb0:	20000e8c 	.word	0x20000e8c
 8005bb4:	20000e84 	.word	0x20000e84

08005bb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bbc:	4b04      	ldr	r3, [pc, #16]	@ (8005bd0 <vTaskSuspendAll+0x18>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	4a03      	ldr	r2, [pc, #12]	@ (8005bd0 <vTaskSuspendAll+0x18>)
 8005bc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bc6:	bf00      	nop
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	20000ea8 	.word	0x20000ea8

08005bd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005be2:	4b42      	ldr	r3, [pc, #264]	@ (8005cec <xTaskResumeAll+0x118>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <xTaskResumeAll+0x2e>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	603b      	str	r3, [r7, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	bf00      	nop
 8005c00:	e7fd      	b.n	8005bfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c02:	f001 f8f3 	bl	8006dec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c06:	4b39      	ldr	r3, [pc, #228]	@ (8005cec <xTaskResumeAll+0x118>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	4a37      	ldr	r2, [pc, #220]	@ (8005cec <xTaskResumeAll+0x118>)
 8005c0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c10:	4b36      	ldr	r3, [pc, #216]	@ (8005cec <xTaskResumeAll+0x118>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d162      	bne.n	8005cde <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c18:	4b35      	ldr	r3, [pc, #212]	@ (8005cf0 <xTaskResumeAll+0x11c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d05e      	beq.n	8005cde <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c20:	e02f      	b.n	8005c82 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c22:	4b34      	ldr	r3, [pc, #208]	@ (8005cf4 <xTaskResumeAll+0x120>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3318      	adds	r3, #24
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe ff7e 	bl	8004b30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fe ff79 	bl	8004b30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c42:	4b2d      	ldr	r3, [pc, #180]	@ (8005cf8 <xTaskResumeAll+0x124>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d903      	bls.n	8005c52 <xTaskResumeAll+0x7e>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf8 <xTaskResumeAll+0x124>)
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4a27      	ldr	r2, [pc, #156]	@ (8005cfc <xTaskResumeAll+0x128>)
 8005c60:	441a      	add	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f7fe ff06 	bl	8004a7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c72:	4b23      	ldr	r3, [pc, #140]	@ (8005d00 <xTaskResumeAll+0x12c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d302      	bcc.n	8005c82 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005c7c:	4b21      	ldr	r3, [pc, #132]	@ (8005d04 <xTaskResumeAll+0x130>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c82:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf4 <xTaskResumeAll+0x120>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1cb      	bne.n	8005c22 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c90:	f000 fb62 	bl	8006358 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c94:	4b1c      	ldr	r3, [pc, #112]	@ (8005d08 <xTaskResumeAll+0x134>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d010      	beq.n	8005cc2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ca0:	f000 f844 	bl	8005d2c <xTaskIncrementTick>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005caa:	4b16      	ldr	r3, [pc, #88]	@ (8005d04 <xTaskResumeAll+0x130>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f1      	bne.n	8005ca0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005cbc:	4b12      	ldr	r3, [pc, #72]	@ (8005d08 <xTaskResumeAll+0x134>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cc2:	4b10      	ldr	r3, [pc, #64]	@ (8005d04 <xTaskResumeAll+0x130>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cce:	4b0f      	ldr	r3, [pc, #60]	@ (8005d0c <xTaskResumeAll+0x138>)
 8005cd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cde:	f001 f8b5 	bl	8006e4c <vPortExitCritical>

	return xAlreadyYielded;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000ea8 	.word	0x20000ea8
 8005cf0:	20000e80 	.word	0x20000e80
 8005cf4:	20000e40 	.word	0x20000e40
 8005cf8:	20000e88 	.word	0x20000e88
 8005cfc:	200009b0 	.word	0x200009b0
 8005d00:	200009ac 	.word	0x200009ac
 8005d04:	20000e94 	.word	0x20000e94
 8005d08:	20000e90 	.word	0x20000e90
 8005d0c:	e000ed04 	.word	0xe000ed04

08005d10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d16:	4b04      	ldr	r3, [pc, #16]	@ (8005d28 <xTaskGetTickCount+0x18>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d1c:	687b      	ldr	r3, [r7, #4]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr
 8005d28:	20000e84 	.word	0x20000e84

08005d2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d36:	4b4f      	ldr	r3, [pc, #316]	@ (8005e74 <xTaskIncrementTick+0x148>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f040 8090 	bne.w	8005e60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d40:	4b4d      	ldr	r3, [pc, #308]	@ (8005e78 <xTaskIncrementTick+0x14c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3301      	adds	r3, #1
 8005d46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d48:	4a4b      	ldr	r2, [pc, #300]	@ (8005e78 <xTaskIncrementTick+0x14c>)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d121      	bne.n	8005d98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d54:	4b49      	ldr	r3, [pc, #292]	@ (8005e7c <xTaskIncrementTick+0x150>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00b      	beq.n	8005d76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	603b      	str	r3, [r7, #0]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <xTaskIncrementTick+0x46>
 8005d76:	4b41      	ldr	r3, [pc, #260]	@ (8005e7c <xTaskIncrementTick+0x150>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	4b40      	ldr	r3, [pc, #256]	@ (8005e80 <xTaskIncrementTick+0x154>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a3e      	ldr	r2, [pc, #248]	@ (8005e7c <xTaskIncrementTick+0x150>)
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	4a3e      	ldr	r2, [pc, #248]	@ (8005e80 <xTaskIncrementTick+0x154>)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e84 <xTaskIncrementTick+0x158>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	4a3c      	ldr	r2, [pc, #240]	@ (8005e84 <xTaskIncrementTick+0x158>)
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	f000 fae0 	bl	8006358 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d98:	4b3b      	ldr	r3, [pc, #236]	@ (8005e88 <xTaskIncrementTick+0x15c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d349      	bcc.n	8005e36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da2:	4b36      	ldr	r3, [pc, #216]	@ (8005e7c <xTaskIncrementTick+0x150>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d104      	bne.n	8005db6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dac:	4b36      	ldr	r3, [pc, #216]	@ (8005e88 <xTaskIncrementTick+0x15c>)
 8005dae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005db2:	601a      	str	r2, [r3, #0]
					break;
 8005db4:	e03f      	b.n	8005e36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db6:	4b31      	ldr	r3, [pc, #196]	@ (8005e7c <xTaskIncrementTick+0x150>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d203      	bcs.n	8005dd6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dce:	4a2e      	ldr	r2, [pc, #184]	@ (8005e88 <xTaskIncrementTick+0x15c>)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dd4:	e02f      	b.n	8005e36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fea8 	bl	8004b30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	3318      	adds	r3, #24
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fe fe9f 	bl	8004b30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df6:	4b25      	ldr	r3, [pc, #148]	@ (8005e8c <xTaskIncrementTick+0x160>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d903      	bls.n	8005e06 <xTaskIncrementTick+0xda>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	4a22      	ldr	r2, [pc, #136]	@ (8005e8c <xTaskIncrementTick+0x160>)
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <xTaskIncrementTick+0x164>)
 8005e14:	441a      	add	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f7fe fe2c 	bl	8004a7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e26:	4b1b      	ldr	r3, [pc, #108]	@ (8005e94 <xTaskIncrementTick+0x168>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d3b8      	bcc.n	8005da2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e34:	e7b5      	b.n	8005da2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e36:	4b17      	ldr	r3, [pc, #92]	@ (8005e94 <xTaskIncrementTick+0x168>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3c:	4914      	ldr	r1, [pc, #80]	@ (8005e90 <xTaskIncrementTick+0x164>)
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	440b      	add	r3, r1
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d901      	bls.n	8005e52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e52:	4b11      	ldr	r3, [pc, #68]	@ (8005e98 <xTaskIncrementTick+0x16c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e004      	b.n	8005e6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e60:	4b0e      	ldr	r3, [pc, #56]	@ (8005e9c <xTaskIncrementTick+0x170>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	4a0d      	ldr	r2, [pc, #52]	@ (8005e9c <xTaskIncrementTick+0x170>)
 8005e68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e6a:	697b      	ldr	r3, [r7, #20]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000ea8 	.word	0x20000ea8
 8005e78:	20000e84 	.word	0x20000e84
 8005e7c:	20000e38 	.word	0x20000e38
 8005e80:	20000e3c 	.word	0x20000e3c
 8005e84:	20000e98 	.word	0x20000e98
 8005e88:	20000ea0 	.word	0x20000ea0
 8005e8c:	20000e88 	.word	0x20000e88
 8005e90:	200009b0 	.word	0x200009b0
 8005e94:	200009ac 	.word	0x200009ac
 8005e98:	20000e94 	.word	0x20000e94
 8005e9c:	20000e90 	.word	0x20000e90

08005ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f50 <vTaskSwitchContext+0xb0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eae:	4b29      	ldr	r3, [pc, #164]	@ (8005f54 <vTaskSwitchContext+0xb4>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005eb4:	e047      	b.n	8005f46 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005eb6:	4b27      	ldr	r3, [pc, #156]	@ (8005f54 <vTaskSwitchContext+0xb4>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebc:	4b26      	ldr	r3, [pc, #152]	@ (8005f58 <vTaskSwitchContext+0xb8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e011      	b.n	8005ee8 <vTaskSwitchContext+0x48>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10b      	bne.n	8005ee2 <vTaskSwitchContext+0x42>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	607b      	str	r3, [r7, #4]
}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	e7fd      	b.n	8005ede <vTaskSwitchContext+0x3e>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	491c      	ldr	r1, [pc, #112]	@ (8005f5c <vTaskSwitchContext+0xbc>)
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0e3      	beq.n	8005ec4 <vTaskSwitchContext+0x24>
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4a15      	ldr	r2, [pc, #84]	@ (8005f5c <vTaskSwitchContext+0xbc>)
 8005f08:	4413      	add	r3, r2
 8005f0a:	60bb      	str	r3, [r7, #8]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d104      	bne.n	8005f2c <vTaskSwitchContext+0x8c>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	4a0b      	ldr	r2, [pc, #44]	@ (8005f60 <vTaskSwitchContext+0xc0>)
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	4a08      	ldr	r2, [pc, #32]	@ (8005f58 <vTaskSwitchContext+0xb8>)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f3c:	4b08      	ldr	r3, [pc, #32]	@ (8005f60 <vTaskSwitchContext+0xc0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3354      	adds	r3, #84	@ 0x54
 8005f42:	4a08      	ldr	r2, [pc, #32]	@ (8005f64 <vTaskSwitchContext+0xc4>)
 8005f44:	6013      	str	r3, [r2, #0]
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr
 8005f50:	20000ea8 	.word	0x20000ea8
 8005f54:	20000e94 	.word	0x20000e94
 8005f58:	20000e88 	.word	0x20000e88
 8005f5c:	200009b0 	.word	0x200009b0
 8005f60:	200009ac 	.word	0x200009ac
 8005f64:	20000010 	.word	0x20000010

08005f68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10b      	bne.n	8005f90 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60fb      	str	r3, [r7, #12]
}
 8005f8a:	bf00      	nop
 8005f8c:	bf00      	nop
 8005f8e:	e7fd      	b.n	8005f8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f90:	4b07      	ldr	r3, [pc, #28]	@ (8005fb0 <vTaskPlaceOnEventList+0x48>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3318      	adds	r3, #24
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7fe fd91 	bl	8004ac0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	6838      	ldr	r0, [r7, #0]
 8005fa2:	f000 fa87 	bl	80064b4 <prvAddCurrentTaskToDelayedList>
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	200009ac 	.word	0x200009ac

08005fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10b      	bne.n	8005fde <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	617b      	str	r3, [r7, #20]
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	e7fd      	b.n	8005fda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fde:	4b0a      	ldr	r3, [pc, #40]	@ (8006008 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7fe fd47 	bl	8004a7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005ff2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ff6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	68b8      	ldr	r0, [r7, #8]
 8005ffc:	f000 fa5a 	bl	80064b4 <prvAddCurrentTaskToDelayedList>
	}
 8006000:	bf00      	nop
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	200009ac 	.word	0x200009ac

0800600c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10b      	bne.n	800603a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	60fb      	str	r3, [r7, #12]
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	e7fd      	b.n	8006036 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	3318      	adds	r3, #24
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fd76 	bl	8004b30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006044:	4b1d      	ldr	r3, [pc, #116]	@ (80060bc <xTaskRemoveFromEventList+0xb0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d11d      	bne.n	8006088 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	3304      	adds	r3, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe fd6d 	bl	8004b30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605a:	4b19      	ldr	r3, [pc, #100]	@ (80060c0 <xTaskRemoveFromEventList+0xb4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d903      	bls.n	800606a <xTaskRemoveFromEventList+0x5e>
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	4a16      	ldr	r2, [pc, #88]	@ (80060c0 <xTaskRemoveFromEventList+0xb4>)
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4a13      	ldr	r2, [pc, #76]	@ (80060c4 <xTaskRemoveFromEventList+0xb8>)
 8006078:	441a      	add	r2, r3
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3304      	adds	r3, #4
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f7fe fcfa 	bl	8004a7a <vListInsertEnd>
 8006086:	e005      	b.n	8006094 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	3318      	adds	r3, #24
 800608c:	4619      	mov	r1, r3
 800608e:	480e      	ldr	r0, [pc, #56]	@ (80060c8 <xTaskRemoveFromEventList+0xbc>)
 8006090:	f7fe fcf3 	bl	8004a7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006098:	4b0c      	ldr	r3, [pc, #48]	@ (80060cc <xTaskRemoveFromEventList+0xc0>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	429a      	cmp	r2, r3
 80060a0:	d905      	bls.n	80060ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060a2:	2301      	movs	r3, #1
 80060a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060a6:	4b0a      	ldr	r3, [pc, #40]	@ (80060d0 <xTaskRemoveFromEventList+0xc4>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	e001      	b.n	80060b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060b2:	697b      	ldr	r3, [r7, #20]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20000ea8 	.word	0x20000ea8
 80060c0:	20000e88 	.word	0x20000e88
 80060c4:	200009b0 	.word	0x200009b0
 80060c8:	20000e40 	.word	0x20000e40
 80060cc:	200009ac 	.word	0x200009ac
 80060d0:	20000e94 	.word	0x20000e94

080060d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060dc:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <vTaskInternalSetTimeOutState+0x24>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060e4:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <vTaskInternalSetTimeOutState+0x28>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	605a      	str	r2, [r3, #4]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000e98 	.word	0x20000e98
 80060fc:	20000e84 	.word	0x20000e84

08006100 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10b      	bne.n	8006128 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	613b      	str	r3, [r7, #16]
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	e7fd      	b.n	8006124 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10b      	bne.n	8006146 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	60fb      	str	r3, [r7, #12]
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	e7fd      	b.n	8006142 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006146:	f000 fe51 	bl	8006dec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800614a:	4b1d      	ldr	r3, [pc, #116]	@ (80061c0 <xTaskCheckForTimeOut+0xc0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006162:	d102      	bne.n	800616a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006164:	2300      	movs	r3, #0
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	e023      	b.n	80061b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b15      	ldr	r3, [pc, #84]	@ (80061c4 <xTaskCheckForTimeOut+0xc4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d007      	beq.n	8006186 <xTaskCheckForTimeOut+0x86>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	429a      	cmp	r2, r3
 800617e:	d302      	bcc.n	8006186 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006180:	2301      	movs	r3, #1
 8006182:	61fb      	str	r3, [r7, #28]
 8006184:	e015      	b.n	80061b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	429a      	cmp	r2, r3
 800618e:	d20b      	bcs.n	80061a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff ff99 	bl	80060d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061a2:	2300      	movs	r3, #0
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	e004      	b.n	80061b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061ae:	2301      	movs	r3, #1
 80061b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061b2:	f000 fe4b 	bl	8006e4c <vPortExitCritical>

	return xReturn;
 80061b6:	69fb      	ldr	r3, [r7, #28]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000e84 	.word	0x20000e84
 80061c4:	20000e98 	.word	0x20000e98

080061c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061cc:	4b03      	ldr	r3, [pc, #12]	@ (80061dc <vTaskMissedYield+0x14>)
 80061ce:	2201      	movs	r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
}
 80061d2:	bf00      	nop
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000e94 	.word	0x20000e94

080061e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061e8:	f000 f852 	bl	8006290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061ec:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <prvIdleTask+0x28>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d9f9      	bls.n	80061e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061f4:	4b05      	ldr	r3, [pc, #20]	@ (800620c <prvIdleTask+0x2c>)
 80061f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006204:	e7f0      	b.n	80061e8 <prvIdleTask+0x8>
 8006206:	bf00      	nop
 8006208:	200009b0 	.word	0x200009b0
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006216:	2300      	movs	r3, #0
 8006218:	607b      	str	r3, [r7, #4]
 800621a:	e00c      	b.n	8006236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4a12      	ldr	r2, [pc, #72]	@ (8006270 <prvInitialiseTaskLists+0x60>)
 8006228:	4413      	add	r3, r2
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fbfa 	bl	8004a24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3301      	adds	r3, #1
 8006234:	607b      	str	r3, [r7, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b37      	cmp	r3, #55	@ 0x37
 800623a:	d9ef      	bls.n	800621c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800623c:	480d      	ldr	r0, [pc, #52]	@ (8006274 <prvInitialiseTaskLists+0x64>)
 800623e:	f7fe fbf1 	bl	8004a24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006242:	480d      	ldr	r0, [pc, #52]	@ (8006278 <prvInitialiseTaskLists+0x68>)
 8006244:	f7fe fbee 	bl	8004a24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006248:	480c      	ldr	r0, [pc, #48]	@ (800627c <prvInitialiseTaskLists+0x6c>)
 800624a:	f7fe fbeb 	bl	8004a24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800624e:	480c      	ldr	r0, [pc, #48]	@ (8006280 <prvInitialiseTaskLists+0x70>)
 8006250:	f7fe fbe8 	bl	8004a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006254:	480b      	ldr	r0, [pc, #44]	@ (8006284 <prvInitialiseTaskLists+0x74>)
 8006256:	f7fe fbe5 	bl	8004a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800625a:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <prvInitialiseTaskLists+0x78>)
 800625c:	4a05      	ldr	r2, [pc, #20]	@ (8006274 <prvInitialiseTaskLists+0x64>)
 800625e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006260:	4b0a      	ldr	r3, [pc, #40]	@ (800628c <prvInitialiseTaskLists+0x7c>)
 8006262:	4a05      	ldr	r2, [pc, #20]	@ (8006278 <prvInitialiseTaskLists+0x68>)
 8006264:	601a      	str	r2, [r3, #0]
}
 8006266:	bf00      	nop
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	200009b0 	.word	0x200009b0
 8006274:	20000e10 	.word	0x20000e10
 8006278:	20000e24 	.word	0x20000e24
 800627c:	20000e40 	.word	0x20000e40
 8006280:	20000e54 	.word	0x20000e54
 8006284:	20000e6c 	.word	0x20000e6c
 8006288:	20000e38 	.word	0x20000e38
 800628c:	20000e3c 	.word	0x20000e3c

08006290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006296:	e019      	b.n	80062cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006298:	f000 fda8 	bl	8006dec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629c:	4b10      	ldr	r3, [pc, #64]	@ (80062e0 <prvCheckTasksWaitingTermination+0x50>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fe fc41 	bl	8004b30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <prvCheckTasksWaitingTermination+0x54>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	4a0b      	ldr	r2, [pc, #44]	@ (80062e4 <prvCheckTasksWaitingTermination+0x54>)
 80062b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062b8:	4b0b      	ldr	r3, [pc, #44]	@ (80062e8 <prvCheckTasksWaitingTermination+0x58>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3b01      	subs	r3, #1
 80062be:	4a0a      	ldr	r2, [pc, #40]	@ (80062e8 <prvCheckTasksWaitingTermination+0x58>)
 80062c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062c2:	f000 fdc3 	bl	8006e4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f810 	bl	80062ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062cc:	4b06      	ldr	r3, [pc, #24]	@ (80062e8 <prvCheckTasksWaitingTermination+0x58>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e1      	bne.n	8006298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000e54 	.word	0x20000e54
 80062e4:	20000e80 	.word	0x20000e80
 80062e8:	20000e68 	.word	0x20000e68

080062ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3354      	adds	r3, #84	@ 0x54
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 f86d 	bl	80073d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630c:	4618      	mov	r0, r3
 800630e:	f000 ff3d 	bl	800718c <vPortFree>
				vPortFree( pxTCB );
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 ff3a 	bl	800718c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006318:	e019      	b.n	800634e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006320:	2b01      	cmp	r3, #1
 8006322:	d103      	bne.n	800632c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 ff31 	bl	800718c <vPortFree>
	}
 800632a:	e010      	b.n	800634e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006332:	2b02      	cmp	r3, #2
 8006334:	d00b      	beq.n	800634e <prvDeleteTCB+0x62>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60fb      	str	r3, [r7, #12]
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <prvDeleteTCB+0x5e>
	}
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800635e:	4b0c      	ldr	r3, [pc, #48]	@ (8006390 <prvResetNextTaskUnblockTime+0x38>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d104      	bne.n	8006372 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006368:	4b0a      	ldr	r3, [pc, #40]	@ (8006394 <prvResetNextTaskUnblockTime+0x3c>)
 800636a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800636e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006370:	e008      	b.n	8006384 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006372:	4b07      	ldr	r3, [pc, #28]	@ (8006390 <prvResetNextTaskUnblockTime+0x38>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4a04      	ldr	r2, [pc, #16]	@ (8006394 <prvResetNextTaskUnblockTime+0x3c>)
 8006382:	6013      	str	r3, [r2, #0]
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000e38 	.word	0x20000e38
 8006394:	20000ea0 	.word	0x20000ea0

08006398 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800639e:	4b0b      	ldr	r3, [pc, #44]	@ (80063cc <xTaskGetSchedulerState+0x34>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063a6:	2301      	movs	r3, #1
 80063a8:	607b      	str	r3, [r7, #4]
 80063aa:	e008      	b.n	80063be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ac:	4b08      	ldr	r3, [pc, #32]	@ (80063d0 <xTaskGetSchedulerState+0x38>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063b4:	2302      	movs	r3, #2
 80063b6:	607b      	str	r3, [r7, #4]
 80063b8:	e001      	b.n	80063be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063ba:	2300      	movs	r3, #0
 80063bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063be:	687b      	ldr	r3, [r7, #4]
	}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	20000e8c 	.word	0x20000e8c
 80063d0:	20000ea8 	.word	0x20000ea8

080063d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d058      	beq.n	800649c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063ea:	4b2f      	ldr	r3, [pc, #188]	@ (80064a8 <xTaskPriorityDisinherit+0xd4>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d00b      	beq.n	800640c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	60fb      	str	r3, [r7, #12]
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	60bb      	str	r3, [r7, #8]
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	e7fd      	b.n	8006428 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006430:	1e5a      	subs	r2, r3, #1
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800643e:	429a      	cmp	r2, r3
 8006440:	d02c      	beq.n	800649c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006446:	2b00      	cmp	r3, #0
 8006448:	d128      	bne.n	800649c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	3304      	adds	r3, #4
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fb6e 	bl	8004b30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800646c:	4b0f      	ldr	r3, [pc, #60]	@ (80064ac <xTaskPriorityDisinherit+0xd8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d903      	bls.n	800647c <xTaskPriorityDisinherit+0xa8>
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006478:	4a0c      	ldr	r2, [pc, #48]	@ (80064ac <xTaskPriorityDisinherit+0xd8>)
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4a09      	ldr	r2, [pc, #36]	@ (80064b0 <xTaskPriorityDisinherit+0xdc>)
 800648a:	441a      	add	r2, r3
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f7fe faf1 	bl	8004a7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800649c:	697b      	ldr	r3, [r7, #20]
	}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	200009ac 	.word	0x200009ac
 80064ac:	20000e88 	.word	0x20000e88
 80064b0:	200009b0 	.word	0x200009b0

080064b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064be:	4b21      	ldr	r3, [pc, #132]	@ (8006544 <prvAddCurrentTaskToDelayedList+0x90>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064c4:	4b20      	ldr	r3, [pc, #128]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x94>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fb30 	bl	8004b30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064d6:	d10a      	bne.n	80064ee <prvAddCurrentTaskToDelayedList+0x3a>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064de:	4b1a      	ldr	r3, [pc, #104]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x94>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4819      	ldr	r0, [pc, #100]	@ (800654c <prvAddCurrentTaskToDelayedList+0x98>)
 80064e8:	f7fe fac7 	bl	8004a7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064ec:	e026      	b.n	800653c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4413      	add	r3, r2
 80064f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064f6:	4b14      	ldr	r3, [pc, #80]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x94>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	429a      	cmp	r2, r3
 8006504:	d209      	bcs.n	800651a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006506:	4b12      	ldr	r3, [pc, #72]	@ (8006550 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x94>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f7fe fad4 	bl	8004ac0 <vListInsert>
}
 8006518:	e010      	b.n	800653c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800651a:	4b0e      	ldr	r3, [pc, #56]	@ (8006554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4b0a      	ldr	r3, [pc, #40]	@ (8006548 <prvAddCurrentTaskToDelayedList+0x94>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f7fe faca 	bl	8004ac0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800652c:	4b0a      	ldr	r3, [pc, #40]	@ (8006558 <prvAddCurrentTaskToDelayedList+0xa4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	429a      	cmp	r2, r3
 8006534:	d202      	bcs.n	800653c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006536:	4a08      	ldr	r2, [pc, #32]	@ (8006558 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	6013      	str	r3, [r2, #0]
}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000e84 	.word	0x20000e84
 8006548:	200009ac 	.word	0x200009ac
 800654c:	20000e6c 	.word	0x20000e6c
 8006550:	20000e3c 	.word	0x20000e3c
 8006554:	20000e38 	.word	0x20000e38
 8006558:	20000ea0 	.word	0x20000ea0

0800655c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	@ 0x28
 8006560:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006566:	f000 fb11 	bl	8006b8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800656a:	4b1d      	ldr	r3, [pc, #116]	@ (80065e0 <xTimerCreateTimerTask+0x84>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d021      	beq.n	80065b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800657a:	1d3a      	adds	r2, r7, #4
 800657c:	f107 0108 	add.w	r1, r7, #8
 8006580:	f107 030c 	add.w	r3, r7, #12
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe fa33 	bl	80049f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	9202      	str	r2, [sp, #8]
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	2302      	movs	r3, #2
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	2300      	movs	r3, #0
 800659a:	460a      	mov	r2, r1
 800659c:	4911      	ldr	r1, [pc, #68]	@ (80065e4 <xTimerCreateTimerTask+0x88>)
 800659e:	4812      	ldr	r0, [pc, #72]	@ (80065e8 <xTimerCreateTimerTask+0x8c>)
 80065a0:	f7ff f8a6 	bl	80056f0 <xTaskCreateStatic>
 80065a4:	4603      	mov	r3, r0
 80065a6:	4a11      	ldr	r2, [pc, #68]	@ (80065ec <xTimerCreateTimerTask+0x90>)
 80065a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065aa:	4b10      	ldr	r3, [pc, #64]	@ (80065ec <xTimerCreateTimerTask+0x90>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065b2:	2301      	movs	r3, #1
 80065b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	613b      	str	r3, [r7, #16]
}
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
 80065d2:	e7fd      	b.n	80065d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80065d4:	697b      	ldr	r3, [r7, #20]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000edc 	.word	0x20000edc
 80065e4:	08007604 	.word	0x08007604
 80065e8:	08006729 	.word	0x08006729
 80065ec:	20000ee0 	.word	0x20000ee0

080065f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	@ 0x28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065fe:	2300      	movs	r3, #0
 8006600:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <xTimerGenericCommand+0x30>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	623b      	str	r3, [r7, #32]
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	e7fd      	b.n	800661c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006620:	4b19      	ldr	r3, [pc, #100]	@ (8006688 <xTimerGenericCommand+0x98>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d02a      	beq.n	800667e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b05      	cmp	r3, #5
 8006638:	dc18      	bgt.n	800666c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800663a:	f7ff fead 	bl	8006398 <xTaskGetSchedulerState>
 800663e:	4603      	mov	r3, r0
 8006640:	2b02      	cmp	r3, #2
 8006642:	d109      	bne.n	8006658 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006644:	4b10      	ldr	r3, [pc, #64]	@ (8006688 <xTimerGenericCommand+0x98>)
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	f107 0110 	add.w	r1, r7, #16
 800664c:	2300      	movs	r3, #0
 800664e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006650:	f7fe fbde 	bl	8004e10 <xQueueGenericSend>
 8006654:	6278      	str	r0, [r7, #36]	@ 0x24
 8006656:	e012      	b.n	800667e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006658:	4b0b      	ldr	r3, [pc, #44]	@ (8006688 <xTimerGenericCommand+0x98>)
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	f107 0110 	add.w	r1, r7, #16
 8006660:	2300      	movs	r3, #0
 8006662:	2200      	movs	r2, #0
 8006664:	f7fe fbd4 	bl	8004e10 <xQueueGenericSend>
 8006668:	6278      	str	r0, [r7, #36]	@ 0x24
 800666a:	e008      	b.n	800667e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800666c:	4b06      	ldr	r3, [pc, #24]	@ (8006688 <xTimerGenericCommand+0x98>)
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	f107 0110 	add.w	r1, r7, #16
 8006674:	2300      	movs	r3, #0
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	f7fe fccc 	bl	8005014 <xQueueGenericSendFromISR>
 800667c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006680:	4618      	mov	r0, r3
 8006682:	3728      	adds	r7, #40	@ 0x28
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000edc 	.word	0x20000edc

0800668c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006696:	4b23      	ldr	r3, [pc, #140]	@ (8006724 <prvProcessExpiredTimer+0x98>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe fa43 	bl	8004b30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d023      	beq.n	8006700 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	18d1      	adds	r1, r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	6978      	ldr	r0, [r7, #20]
 80066c6:	f000 f8d3 	bl	8006870 <prvInsertTimerInActiveList>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d020      	beq.n	8006712 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066d0:	2300      	movs	r3, #0
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	2300      	movs	r3, #0
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	2100      	movs	r1, #0
 80066da:	6978      	ldr	r0, [r7, #20]
 80066dc:	f7ff ff88 	bl	80065f0 <xTimerGenericCommand>
 80066e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d114      	bne.n	8006712 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	60fb      	str	r3, [r7, #12]
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	e7fd      	b.n	80066fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	6978      	ldr	r0, [r7, #20]
 8006718:	4798      	blx	r3
}
 800671a:	bf00      	nop
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20000ed4 	.word	0x20000ed4

08006728 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006730:	f107 0308 	add.w	r3, r7, #8
 8006734:	4618      	mov	r0, r3
 8006736:	f000 f859 	bl	80067ec <prvGetNextExpireTime>
 800673a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4619      	mov	r1, r3
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 f805 	bl	8006750 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006746:	f000 f8d5 	bl	80068f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800674a:	bf00      	nop
 800674c:	e7f0      	b.n	8006730 <prvTimerTask+0x8>
	...

08006750 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800675a:	f7ff fa2d 	bl	8005bb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800675e:	f107 0308 	add.w	r3, r7, #8
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f864 	bl	8006830 <prvSampleTimeNow>
 8006768:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d130      	bne.n	80067d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <prvProcessTimerOrBlockTask+0x3c>
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	429a      	cmp	r2, r3
 800677c:	d806      	bhi.n	800678c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800677e:	f7ff fa29 	bl	8005bd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff81 	bl	800668c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800678a:	e024      	b.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006792:	4b13      	ldr	r3, [pc, #76]	@ (80067e0 <prvProcessTimerOrBlockTask+0x90>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <prvProcessTimerOrBlockTask+0x50>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <prvProcessTimerOrBlockTask+0x52>
 80067a0:	2300      	movs	r3, #0
 80067a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067a4:	4b0f      	ldr	r3, [pc, #60]	@ (80067e4 <prvProcessTimerOrBlockTask+0x94>)
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	4619      	mov	r1, r3
 80067b2:	f7fe ff69 	bl	8005688 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067b6:	f7ff fa0d 	bl	8005bd4 <xTaskResumeAll>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067c0:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <prvProcessTimerOrBlockTask+0x98>)
 80067c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	f3bf 8f6f 	isb	sy
}
 80067d0:	e001      	b.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067d2:	f7ff f9ff 	bl	8005bd4 <xTaskResumeAll>
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000ed8 	.word	0x20000ed8
 80067e4:	20000edc 	.word	0x20000edc
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067f4:	4b0d      	ldr	r3, [pc, #52]	@ (800682c <prvGetNextExpireTime+0x40>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <prvGetNextExpireTime+0x16>
 80067fe:	2201      	movs	r2, #1
 8006800:	e000      	b.n	8006804 <prvGetNextExpireTime+0x18>
 8006802:	2200      	movs	r2, #0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006810:	4b06      	ldr	r3, [pc, #24]	@ (800682c <prvGetNextExpireTime+0x40>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	e001      	b.n	8006820 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006820:	68fb      	ldr	r3, [r7, #12]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr
 800682c:	20000ed4 	.word	0x20000ed4

08006830 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006838:	f7ff fa6a 	bl	8005d10 <xTaskGetTickCount>
 800683c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800683e:	4b0b      	ldr	r3, [pc, #44]	@ (800686c <prvSampleTimeNow+0x3c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	429a      	cmp	r2, r3
 8006846:	d205      	bcs.n	8006854 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006848:	f000 f93a 	bl	8006ac0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	e002      	b.n	800685a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800685a:	4a04      	ldr	r2, [pc, #16]	@ (800686c <prvSampleTimeNow+0x3c>)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006860:	68fb      	ldr	r3, [r7, #12]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000ee4 	.word	0x20000ee4

08006870 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	429a      	cmp	r2, r3
 8006894:	d812      	bhi.n	80068bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	1ad2      	subs	r2, r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d302      	bcc.n	80068aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e01b      	b.n	80068e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068aa:	4b10      	ldr	r3, [pc, #64]	@ (80068ec <prvInsertTimerInActiveList+0x7c>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f7fe f903 	bl	8004ac0 <vListInsert>
 80068ba:	e012      	b.n	80068e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d206      	bcs.n	80068d2 <prvInsertTimerInActiveList+0x62>
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d302      	bcc.n	80068d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e007      	b.n	80068e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068d2:	4b07      	ldr	r3, [pc, #28]	@ (80068f0 <prvInsertTimerInActiveList+0x80>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3304      	adds	r3, #4
 80068da:	4619      	mov	r1, r3
 80068dc:	4610      	mov	r0, r2
 80068de:	f7fe f8ef 	bl	8004ac0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068e2:	697b      	ldr	r3, [r7, #20]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000ed8 	.word	0x20000ed8
 80068f0:	20000ed4 	.word	0x20000ed4

080068f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08e      	sub	sp, #56	@ 0x38
 80068f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068fa:	e0ce      	b.n	8006a9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da19      	bge.n	8006936 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006902:	1d3b      	adds	r3, r7, #4
 8006904:	3304      	adds	r3, #4
 8006906:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	61fb      	str	r3, [r7, #28]
}
 8006920:	bf00      	nop
 8006922:	bf00      	nop
 8006924:	e7fd      	b.n	8006922 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800692c:	6850      	ldr	r0, [r2, #4]
 800692e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006930:	6892      	ldr	r2, [r2, #8]
 8006932:	4611      	mov	r1, r2
 8006934:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f2c0 80ae 	blt.w	8006a9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800694a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694c:	3304      	adds	r3, #4
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe f8ee 	bl	8004b30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006954:	463b      	mov	r3, r7
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff ff6a 	bl	8006830 <prvSampleTimeNow>
 800695c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b09      	cmp	r3, #9
 8006962:	f200 8097 	bhi.w	8006a94 <prvProcessReceivedCommands+0x1a0>
 8006966:	a201      	add	r2, pc, #4	@ (adr r2, 800696c <prvProcessReceivedCommands+0x78>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	08006995 	.word	0x08006995
 8006970:	08006995 	.word	0x08006995
 8006974:	08006995 	.word	0x08006995
 8006978:	08006a0b 	.word	0x08006a0b
 800697c:	08006a1f 	.word	0x08006a1f
 8006980:	08006a6b 	.word	0x08006a6b
 8006984:	08006995 	.word	0x08006995
 8006988:	08006995 	.word	0x08006995
 800698c:	08006a0b 	.word	0x08006a0b
 8006990:	08006a1f 	.word	0x08006a1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800699a:	f043 0301 	orr.w	r3, r3, #1
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	18d1      	adds	r1, r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069b4:	f7ff ff5c 	bl	8006870 <prvInsertTimerInActiveList>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d06c      	beq.n	8006a98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d061      	beq.n	8006a98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	441a      	add	r2, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	2300      	movs	r3, #0
 80069e2:	2100      	movs	r1, #0
 80069e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069e6:	f7ff fe03 	bl	80065f0 <xTimerGenericCommand>
 80069ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d152      	bne.n	8006a98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	61bb      	str	r3, [r7, #24]
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	e7fd      	b.n	8006a06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a10:	f023 0301 	bic.w	r3, r3, #1
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a1c:	e03d      	b.n	8006a9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	617b      	str	r3, [r7, #20]
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	e7fd      	b.n	8006a52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	18d1      	adds	r1, r2, r3
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a64:	f7ff ff04 	bl	8006870 <prvInsertTimerInActiveList>
					break;
 8006a68:	e017      	b.n	8006a9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006a78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a7a:	f000 fb87 	bl	800718c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a7e:	e00c      	b.n	8006a9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a86:	f023 0301 	bic.w	r3, r3, #1
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a92:	e002      	b.n	8006a9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006a94:	bf00      	nop
 8006a96:	e000      	b.n	8006a9a <prvProcessReceivedCommands+0x1a6>
					break;
 8006a98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a9a:	4b08      	ldr	r3, [pc, #32]	@ (8006abc <prvProcessReceivedCommands+0x1c8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	1d39      	adds	r1, r7, #4
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe fb54 	bl	8005150 <xQueueReceive>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f47f af26 	bne.w	80068fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	3730      	adds	r7, #48	@ 0x30
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000edc 	.word	0x20000edc

08006ac0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ac6:	e049      	b.n	8006b5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8006b84 <prvSwitchTimerLists+0xc4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8006b84 <prvSwitchTimerLists+0xc4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe f825 	bl	8004b30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d02f      	beq.n	8006b5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d90e      	bls.n	8006b2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006b84 <prvSwitchTimerLists+0xc4>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3304      	adds	r3, #4
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f7fd ffcb 	bl	8004ac0 <vListInsert>
 8006b2a:	e017      	b.n	8006b5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2300      	movs	r3, #0
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	2100      	movs	r1, #0
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff fd5a 	bl	80065f0 <xTimerGenericCommand>
 8006b3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	603b      	str	r3, [r7, #0]
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	e7fd      	b.n	8006b58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b5c:	4b09      	ldr	r3, [pc, #36]	@ (8006b84 <prvSwitchTimerLists+0xc4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1b0      	bne.n	8006ac8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b66:	4b07      	ldr	r3, [pc, #28]	@ (8006b84 <prvSwitchTimerLists+0xc4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b6c:	4b06      	ldr	r3, [pc, #24]	@ (8006b88 <prvSwitchTimerLists+0xc8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a04      	ldr	r2, [pc, #16]	@ (8006b84 <prvSwitchTimerLists+0xc4>)
 8006b72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b74:	4a04      	ldr	r2, [pc, #16]	@ (8006b88 <prvSwitchTimerLists+0xc8>)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	6013      	str	r3, [r2, #0]
}
 8006b7a:	bf00      	nop
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000ed4 	.word	0x20000ed4
 8006b88:	20000ed8 	.word	0x20000ed8

08006b8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b92:	f000 f92b 	bl	8006dec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b96:	4b15      	ldr	r3, [pc, #84]	@ (8006bec <prvCheckForValidListAndQueue+0x60>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d120      	bne.n	8006be0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b9e:	4814      	ldr	r0, [pc, #80]	@ (8006bf0 <prvCheckForValidListAndQueue+0x64>)
 8006ba0:	f7fd ff40 	bl	8004a24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ba4:	4813      	ldr	r0, [pc, #76]	@ (8006bf4 <prvCheckForValidListAndQueue+0x68>)
 8006ba6:	f7fd ff3d 	bl	8004a24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006baa:	4b13      	ldr	r3, [pc, #76]	@ (8006bf8 <prvCheckForValidListAndQueue+0x6c>)
 8006bac:	4a10      	ldr	r2, [pc, #64]	@ (8006bf0 <prvCheckForValidListAndQueue+0x64>)
 8006bae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bb0:	4b12      	ldr	r3, [pc, #72]	@ (8006bfc <prvCheckForValidListAndQueue+0x70>)
 8006bb2:	4a10      	ldr	r2, [pc, #64]	@ (8006bf4 <prvCheckForValidListAndQueue+0x68>)
 8006bb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	4b11      	ldr	r3, [pc, #68]	@ (8006c00 <prvCheckForValidListAndQueue+0x74>)
 8006bbc:	4a11      	ldr	r2, [pc, #68]	@ (8006c04 <prvCheckForValidListAndQueue+0x78>)
 8006bbe:	2110      	movs	r1, #16
 8006bc0:	200a      	movs	r0, #10
 8006bc2:	f7fe f849 	bl	8004c58 <xQueueGenericCreateStatic>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	4a08      	ldr	r2, [pc, #32]	@ (8006bec <prvCheckForValidListAndQueue+0x60>)
 8006bca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bcc:	4b07      	ldr	r3, [pc, #28]	@ (8006bec <prvCheckForValidListAndQueue+0x60>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bd4:	4b05      	ldr	r3, [pc, #20]	@ (8006bec <prvCheckForValidListAndQueue+0x60>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	490b      	ldr	r1, [pc, #44]	@ (8006c08 <prvCheckForValidListAndQueue+0x7c>)
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fd2c 	bl	8005638 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006be0:	f000 f934 	bl	8006e4c <vPortExitCritical>
}
 8006be4:	bf00      	nop
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000edc 	.word	0x20000edc
 8006bf0:	20000eac 	.word	0x20000eac
 8006bf4:	20000ec0 	.word	0x20000ec0
 8006bf8:	20000ed4 	.word	0x20000ed4
 8006bfc:	20000ed8 	.word	0x20000ed8
 8006c00:	20000f88 	.word	0x20000f88
 8006c04:	20000ee8 	.word	0x20000ee8
 8006c08:	0800760c 	.word	0x0800760c

08006c0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3b04      	subs	r3, #4
 8006c1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3b04      	subs	r3, #4
 8006c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f023 0201 	bic.w	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3b04      	subs	r3, #4
 8006c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c3c:	4a08      	ldr	r2, [pc, #32]	@ (8006c60 <pxPortInitialiseStack+0x54>)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3b14      	subs	r3, #20
 8006c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3b20      	subs	r3, #32
 8006c52:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c54:	68fb      	ldr	r3, [r7, #12]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr
 8006c60:	08006c65 	.word	0x08006c65

08006c64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c6e:	4b12      	ldr	r3, [pc, #72]	@ (8006cb8 <prvTaskExitError+0x54>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c76:	d00b      	beq.n	8006c90 <prvTaskExitError+0x2c>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	60fb      	str	r3, [r7, #12]
}
 8006c8a:	bf00      	nop
 8006c8c:	bf00      	nop
 8006c8e:	e7fd      	b.n	8006c8c <prvTaskExitError+0x28>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	60bb      	str	r3, [r7, #8]
}
 8006ca2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ca4:	bf00      	nop
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0fc      	beq.n	8006ca6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr
 8006cb8:	2000000c 	.word	0x2000000c
 8006cbc:	00000000 	.word	0x00000000

08006cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006cc0:	4b07      	ldr	r3, [pc, #28]	@ (8006ce0 <pxCurrentTCBConst2>)
 8006cc2:	6819      	ldr	r1, [r3, #0]
 8006cc4:	6808      	ldr	r0, [r1, #0]
 8006cc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006cca:	f380 8809 	msr	PSP, r0
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	f380 8811 	msr	BASEPRI, r0
 8006cda:	f04e 0e0d 	orr.w	lr, lr, #13
 8006cde:	4770      	bx	lr

08006ce0 <pxCurrentTCBConst2>:
 8006ce0:	200009ac 	.word	0x200009ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop

08006ce8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ce8:	4806      	ldr	r0, [pc, #24]	@ (8006d04 <prvPortStartFirstTask+0x1c>)
 8006cea:	6800      	ldr	r0, [r0, #0]
 8006cec:	6800      	ldr	r0, [r0, #0]
 8006cee:	f380 8808 	msr	MSP, r0
 8006cf2:	b662      	cpsie	i
 8006cf4:	b661      	cpsie	f
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	df00      	svc	0
 8006d00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d02:	bf00      	nop
 8006d04:	e000ed08 	.word	0xe000ed08

08006d08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d0e:	4b32      	ldr	r3, [pc, #200]	@ (8006dd8 <xPortStartScheduler+0xd0>)
 8006d10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	22ff      	movs	r2, #255	@ 0xff
 8006d1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	4b2a      	ldr	r3, [pc, #168]	@ (8006ddc <xPortStartScheduler+0xd4>)
 8006d34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d36:	4b2a      	ldr	r3, [pc, #168]	@ (8006de0 <xPortStartScheduler+0xd8>)
 8006d38:	2207      	movs	r2, #7
 8006d3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d3c:	e009      	b.n	8006d52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d3e:	4b28      	ldr	r3, [pc, #160]	@ (8006de0 <xPortStartScheduler+0xd8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	4a26      	ldr	r2, [pc, #152]	@ (8006de0 <xPortStartScheduler+0xd8>)
 8006d46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d5a:	2b80      	cmp	r3, #128	@ 0x80
 8006d5c:	d0ef      	beq.n	8006d3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d5e:	4b20      	ldr	r3, [pc, #128]	@ (8006de0 <xPortStartScheduler+0xd8>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f1c3 0307 	rsb	r3, r3, #7
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d00b      	beq.n	8006d82 <xPortStartScheduler+0x7a>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	60bb      	str	r3, [r7, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d82:	4b17      	ldr	r3, [pc, #92]	@ (8006de0 <xPortStartScheduler+0xd8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	4a15      	ldr	r2, [pc, #84]	@ (8006de0 <xPortStartScheduler+0xd8>)
 8006d8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d8c:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <xPortStartScheduler+0xd8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d94:	4a12      	ldr	r2, [pc, #72]	@ (8006de0 <xPortStartScheduler+0xd8>)
 8006d96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006da0:	4b10      	ldr	r3, [pc, #64]	@ (8006de4 <xPortStartScheduler+0xdc>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a0f      	ldr	r2, [pc, #60]	@ (8006de4 <xPortStartScheduler+0xdc>)
 8006da6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006daa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006dac:	4b0d      	ldr	r3, [pc, #52]	@ (8006de4 <xPortStartScheduler+0xdc>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a0c      	ldr	r2, [pc, #48]	@ (8006de4 <xPortStartScheduler+0xdc>)
 8006db2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006db6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006db8:	f000 f8b8 	bl	8006f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006de8 <xPortStartScheduler+0xe0>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dc2:	f7ff ff91 	bl	8006ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006dc6:	f7ff f86b 	bl	8005ea0 <vTaskSwitchContext>
	prvTaskExitError();
 8006dca:	f7ff ff4b 	bl	8006c64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	e000e400 	.word	0xe000e400
 8006ddc:	20000fd8 	.word	0x20000fd8
 8006de0:	20000fdc 	.word	0x20000fdc
 8006de4:	e000ed20 	.word	0xe000ed20
 8006de8:	2000000c 	.word	0x2000000c

08006dec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	607b      	str	r3, [r7, #4]
}
 8006e04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e06:	4b0f      	ldr	r3, [pc, #60]	@ (8006e44 <vPortEnterCritical+0x58>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e44 <vPortEnterCritical+0x58>)
 8006e0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e10:	4b0c      	ldr	r3, [pc, #48]	@ (8006e44 <vPortEnterCritical+0x58>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d110      	bne.n	8006e3a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e18:	4b0b      	ldr	r3, [pc, #44]	@ (8006e48 <vPortEnterCritical+0x5c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <vPortEnterCritical+0x4e>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	603b      	str	r3, [r7, #0]
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	e7fd      	b.n	8006e36 <vPortEnterCritical+0x4a>
	}
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr
 8006e44:	2000000c 	.word	0x2000000c
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e52:	4b12      	ldr	r3, [pc, #72]	@ (8006e9c <vPortExitCritical+0x50>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10b      	bne.n	8006e72 <vPortExitCritical+0x26>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	607b      	str	r3, [r7, #4]
}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	e7fd      	b.n	8006e6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e72:	4b0a      	ldr	r3, [pc, #40]	@ (8006e9c <vPortExitCritical+0x50>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	4a08      	ldr	r2, [pc, #32]	@ (8006e9c <vPortExitCritical+0x50>)
 8006e7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e7c:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <vPortExitCritical+0x50>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <vPortExitCritical+0x44>
 8006e84:	2300      	movs	r3, #0
 8006e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f383 8811 	msr	BASEPRI, r3
}
 8006e8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	2000000c 	.word	0x2000000c

08006ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ea0:	f3ef 8009 	mrs	r0, PSP
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee0 <pxCurrentTCBConst>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006eb0:	6010      	str	r0, [r2, #0]
 8006eb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006eb6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006eba:	f380 8811 	msr	BASEPRI, r0
 8006ebe:	f7fe ffef 	bl	8005ea0 <vTaskSwitchContext>
 8006ec2:	f04f 0000 	mov.w	r0, #0
 8006ec6:	f380 8811 	msr	BASEPRI, r0
 8006eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ece:	6819      	ldr	r1, [r3, #0]
 8006ed0:	6808      	ldr	r0, [r1, #0]
 8006ed2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ed6:	f380 8809 	msr	PSP, r0
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	4770      	bx	lr

08006ee0 <pxCurrentTCBConst>:
 8006ee0:	200009ac 	.word	0x200009ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop

08006ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	607b      	str	r3, [r7, #4]
}
 8006f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f02:	f7fe ff13 	bl	8005d2c <xTaskIncrementTick>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f0c:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <xPortSysTickHandler+0x40>)
 8006f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	2300      	movs	r3, #0
 8006f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f383 8811 	msr	BASEPRI, r3
}
 8006f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f30:	4b0a      	ldr	r3, [pc, #40]	@ (8006f5c <vPortSetupTimerInterrupt+0x30>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f36:	4b0a      	ldr	r3, [pc, #40]	@ (8006f60 <vPortSetupTimerInterrupt+0x34>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f3c:	4b09      	ldr	r3, [pc, #36]	@ (8006f64 <vPortSetupTimerInterrupt+0x38>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a09      	ldr	r2, [pc, #36]	@ (8006f68 <vPortSetupTimerInterrupt+0x3c>)
 8006f42:	fba2 2303 	umull	r2, r3, r2, r3
 8006f46:	099b      	lsrs	r3, r3, #6
 8006f48:	4a08      	ldr	r2, [pc, #32]	@ (8006f6c <vPortSetupTimerInterrupt+0x40>)
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f4e:	4b03      	ldr	r3, [pc, #12]	@ (8006f5c <vPortSetupTimerInterrupt+0x30>)
 8006f50:	2207      	movs	r2, #7
 8006f52:	601a      	str	r2, [r3, #0]
}
 8006f54:	bf00      	nop
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr
 8006f5c:	e000e010 	.word	0xe000e010
 8006f60:	e000e018 	.word	0xe000e018
 8006f64:	20000000 	.word	0x20000000
 8006f68:	10624dd3 	.word	0x10624dd3
 8006f6c:	e000e014 	.word	0xe000e014

08006f70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f76:	f3ef 8305 	mrs	r3, IPSR
 8006f7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b0f      	cmp	r3, #15
 8006f80:	d915      	bls.n	8006fae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f82:	4a17      	ldr	r2, [pc, #92]	@ (8006fe0 <vPortValidateInterruptPriority+0x70>)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f8c:	4b15      	ldr	r3, [pc, #84]	@ (8006fe4 <vPortValidateInterruptPriority+0x74>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	7afa      	ldrb	r2, [r7, #11]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d20b      	bcs.n	8006fae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	607b      	str	r3, [r7, #4]
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	e7fd      	b.n	8006faa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fae:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe8 <vPortValidateInterruptPriority+0x78>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fec <vPortValidateInterruptPriority+0x7c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d90b      	bls.n	8006fd6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	603b      	str	r3, [r7, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <vPortValidateInterruptPriority+0x62>
	}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bc80      	pop	{r7}
 8006fde:	4770      	bx	lr
 8006fe0:	e000e3f0 	.word	0xe000e3f0
 8006fe4:	20000fd8 	.word	0x20000fd8
 8006fe8:	e000ed0c 	.word	0xe000ed0c
 8006fec:	20000fdc 	.word	0x20000fdc

08006ff0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08a      	sub	sp, #40	@ 0x28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ffc:	f7fe fddc 	bl	8005bb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007000:	4b5c      	ldr	r3, [pc, #368]	@ (8007174 <pvPortMalloc+0x184>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007008:	f000 f924 	bl	8007254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800700c:	4b5a      	ldr	r3, [pc, #360]	@ (8007178 <pvPortMalloc+0x188>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4013      	ands	r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	f040 8095 	bne.w	8007144 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01e      	beq.n	800705e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007020:	2208      	movs	r2, #8
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4413      	add	r3, r2
 8007026:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	2b00      	cmp	r3, #0
 8007030:	d015      	beq.n	800705e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f023 0307 	bic.w	r3, r3, #7
 8007038:	3308      	adds	r3, #8
 800703a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <pvPortMalloc+0x6e>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	617b      	str	r3, [r7, #20]
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	e7fd      	b.n	800705a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d06f      	beq.n	8007144 <pvPortMalloc+0x154>
 8007064:	4b45      	ldr	r3, [pc, #276]	@ (800717c <pvPortMalloc+0x18c>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	429a      	cmp	r2, r3
 800706c:	d86a      	bhi.n	8007144 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800706e:	4b44      	ldr	r3, [pc, #272]	@ (8007180 <pvPortMalloc+0x190>)
 8007070:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007072:	4b43      	ldr	r3, [pc, #268]	@ (8007180 <pvPortMalloc+0x190>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007078:	e004      	b.n	8007084 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	429a      	cmp	r2, r3
 800708c:	d903      	bls.n	8007096 <pvPortMalloc+0xa6>
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f1      	bne.n	800707a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007096:	4b37      	ldr	r3, [pc, #220]	@ (8007174 <pvPortMalloc+0x184>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800709c:	429a      	cmp	r2, r3
 800709e:	d051      	beq.n	8007144 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2208      	movs	r2, #8
 80070a6:	4413      	add	r3, r2
 80070a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	1ad2      	subs	r2, r2, r3
 80070ba:	2308      	movs	r3, #8
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	429a      	cmp	r2, r3
 80070c0:	d920      	bls.n	8007104 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4413      	add	r3, r2
 80070c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <pvPortMalloc+0xfc>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	613b      	str	r3, [r7, #16]
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	e7fd      	b.n	80070e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	1ad2      	subs	r2, r2, r3
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070fe:	69b8      	ldr	r0, [r7, #24]
 8007100:	f000 f90a 	bl	8007318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007104:	4b1d      	ldr	r3, [pc, #116]	@ (800717c <pvPortMalloc+0x18c>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	4a1b      	ldr	r2, [pc, #108]	@ (800717c <pvPortMalloc+0x18c>)
 8007110:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007112:	4b1a      	ldr	r3, [pc, #104]	@ (800717c <pvPortMalloc+0x18c>)
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	4b1b      	ldr	r3, [pc, #108]	@ (8007184 <pvPortMalloc+0x194>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d203      	bcs.n	8007126 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800711e:	4b17      	ldr	r3, [pc, #92]	@ (800717c <pvPortMalloc+0x18c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a18      	ldr	r2, [pc, #96]	@ (8007184 <pvPortMalloc+0x194>)
 8007124:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	4b13      	ldr	r3, [pc, #76]	@ (8007178 <pvPortMalloc+0x188>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	431a      	orrs	r2, r3
 8007130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007132:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800713a:	4b13      	ldr	r3, [pc, #76]	@ (8007188 <pvPortMalloc+0x198>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3301      	adds	r3, #1
 8007140:	4a11      	ldr	r2, [pc, #68]	@ (8007188 <pvPortMalloc+0x198>)
 8007142:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007144:	f7fe fd46 	bl	8005bd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00b      	beq.n	800716a <pvPortMalloc+0x17a>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60fb      	str	r3, [r7, #12]
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop
 8007168:	e7fd      	b.n	8007166 <pvPortMalloc+0x176>
	return pvReturn;
 800716a:	69fb      	ldr	r3, [r7, #28]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3728      	adds	r7, #40	@ 0x28
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20001be8 	.word	0x20001be8
 8007178:	20001bfc 	.word	0x20001bfc
 800717c:	20001bec 	.word	0x20001bec
 8007180:	20001be0 	.word	0x20001be0
 8007184:	20001bf0 	.word	0x20001bf0
 8007188:	20001bf4 	.word	0x20001bf4

0800718c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d04f      	beq.n	800723e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800719e:	2308      	movs	r3, #8
 80071a0:	425b      	negs	r3, r3
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4413      	add	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	4b25      	ldr	r3, [pc, #148]	@ (8007248 <vPortFree+0xbc>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4013      	ands	r3, r2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <vPortFree+0x46>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	60fb      	str	r3, [r7, #12]
}
 80071cc:	bf00      	nop
 80071ce:	bf00      	nop
 80071d0:	e7fd      	b.n	80071ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <vPortFree+0x66>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	60bb      	str	r3, [r7, #8]
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	e7fd      	b.n	80071ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	4b14      	ldr	r3, [pc, #80]	@ (8007248 <vPortFree+0xbc>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01e      	beq.n	800723e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11a      	bne.n	800723e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	4b0e      	ldr	r3, [pc, #56]	@ (8007248 <vPortFree+0xbc>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	43db      	mvns	r3, r3
 8007212:	401a      	ands	r2, r3
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007218:	f7fe fcce 	bl	8005bb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <vPortFree+0xc0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4413      	add	r3, r2
 8007226:	4a09      	ldr	r2, [pc, #36]	@ (800724c <vPortFree+0xc0>)
 8007228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800722a:	6938      	ldr	r0, [r7, #16]
 800722c:	f000 f874 	bl	8007318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007230:	4b07      	ldr	r3, [pc, #28]	@ (8007250 <vPortFree+0xc4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	4a06      	ldr	r2, [pc, #24]	@ (8007250 <vPortFree+0xc4>)
 8007238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800723a:	f7fe fccb 	bl	8005bd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800723e:	bf00      	nop
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20001bfc 	.word	0x20001bfc
 800724c:	20001bec 	.word	0x20001bec
 8007250:	20001bf8 	.word	0x20001bf8

08007254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800725a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800725e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007260:	4b27      	ldr	r3, [pc, #156]	@ (8007300 <prvHeapInit+0xac>)
 8007262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00c      	beq.n	8007288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3307      	adds	r3, #7
 8007272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	4a1f      	ldr	r2, [pc, #124]	@ (8007300 <prvHeapInit+0xac>)
 8007284:	4413      	add	r3, r2
 8007286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800728c:	4a1d      	ldr	r2, [pc, #116]	@ (8007304 <prvHeapInit+0xb0>)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007292:	4b1c      	ldr	r3, [pc, #112]	@ (8007304 <prvHeapInit+0xb0>)
 8007294:	2200      	movs	r2, #0
 8007296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	4413      	add	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072a0:	2208      	movs	r2, #8
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0307 	bic.w	r3, r3, #7
 80072ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4a15      	ldr	r2, [pc, #84]	@ (8007308 <prvHeapInit+0xb4>)
 80072b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072b6:	4b14      	ldr	r3, [pc, #80]	@ (8007308 <prvHeapInit+0xb4>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072be:	4b12      	ldr	r3, [pc, #72]	@ (8007308 <prvHeapInit+0xb4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007308 <prvHeapInit+0xb4>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	4a0a      	ldr	r2, [pc, #40]	@ (800730c <prvHeapInit+0xb8>)
 80072e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	4a09      	ldr	r2, [pc, #36]	@ (8007310 <prvHeapInit+0xbc>)
 80072ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072ec:	4b09      	ldr	r3, [pc, #36]	@ (8007314 <prvHeapInit+0xc0>)
 80072ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80072f2:	601a      	str	r2, [r3, #0]
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	20000fe0 	.word	0x20000fe0
 8007304:	20001be0 	.word	0x20001be0
 8007308:	20001be8 	.word	0x20001be8
 800730c:	20001bf0 	.word	0x20001bf0
 8007310:	20001bec 	.word	0x20001bec
 8007314:	20001bfc 	.word	0x20001bfc

08007318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007320:	4b27      	ldr	r3, [pc, #156]	@ (80073c0 <prvInsertBlockIntoFreeList+0xa8>)
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	e002      	b.n	800732c <prvInsertBlockIntoFreeList+0x14>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	429a      	cmp	r2, r3
 8007334:	d8f7      	bhi.n	8007326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	4413      	add	r3, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d108      	bne.n	800735a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	441a      	add	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	441a      	add	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d118      	bne.n	80073a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <prvInsertBlockIntoFreeList+0xac>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d00d      	beq.n	8007396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	441a      	add	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	e008      	b.n	80073a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007396:	4b0b      	ldr	r3, [pc, #44]	@ (80073c4 <prvInsertBlockIntoFreeList+0xac>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e003      	b.n	80073a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d002      	beq.n	80073b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073b6:	bf00      	nop
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc80      	pop	{r7}
 80073be:	4770      	bx	lr
 80073c0:	20001be0 	.word	0x20001be0
 80073c4:	20001be8 	.word	0x20001be8

080073c8 <memset>:
 80073c8:	4603      	mov	r3, r0
 80073ca:	4402      	add	r2, r0
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d100      	bne.n	80073d2 <memset+0xa>
 80073d0:	4770      	bx	lr
 80073d2:	f803 1b01 	strb.w	r1, [r3], #1
 80073d6:	e7f9      	b.n	80073cc <memset+0x4>

080073d8 <_reclaim_reent>:
 80073d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007490 <_reclaim_reent+0xb8>)
 80073da:	b570      	push	{r4, r5, r6, lr}
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4604      	mov	r4, r0
 80073e0:	4283      	cmp	r3, r0
 80073e2:	d053      	beq.n	800748c <_reclaim_reent+0xb4>
 80073e4:	69c3      	ldr	r3, [r0, #28]
 80073e6:	b31b      	cbz	r3, 8007430 <_reclaim_reent+0x58>
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	b163      	cbz	r3, 8007406 <_reclaim_reent+0x2e>
 80073ec:	2500      	movs	r5, #0
 80073ee:	69e3      	ldr	r3, [r4, #28]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	5959      	ldr	r1, [r3, r5]
 80073f4:	b9b1      	cbnz	r1, 8007424 <_reclaim_reent+0x4c>
 80073f6:	3504      	adds	r5, #4
 80073f8:	2d80      	cmp	r5, #128	@ 0x80
 80073fa:	d1f8      	bne.n	80073ee <_reclaim_reent+0x16>
 80073fc:	69e3      	ldr	r3, [r4, #28]
 80073fe:	4620      	mov	r0, r4
 8007400:	68d9      	ldr	r1, [r3, #12]
 8007402:	f000 f87b 	bl	80074fc <_free_r>
 8007406:	69e3      	ldr	r3, [r4, #28]
 8007408:	6819      	ldr	r1, [r3, #0]
 800740a:	b111      	cbz	r1, 8007412 <_reclaim_reent+0x3a>
 800740c:	4620      	mov	r0, r4
 800740e:	f000 f875 	bl	80074fc <_free_r>
 8007412:	69e3      	ldr	r3, [r4, #28]
 8007414:	689d      	ldr	r5, [r3, #8]
 8007416:	b15d      	cbz	r5, 8007430 <_reclaim_reent+0x58>
 8007418:	4629      	mov	r1, r5
 800741a:	4620      	mov	r0, r4
 800741c:	682d      	ldr	r5, [r5, #0]
 800741e:	f000 f86d 	bl	80074fc <_free_r>
 8007422:	e7f8      	b.n	8007416 <_reclaim_reent+0x3e>
 8007424:	680e      	ldr	r6, [r1, #0]
 8007426:	4620      	mov	r0, r4
 8007428:	f000 f868 	bl	80074fc <_free_r>
 800742c:	4631      	mov	r1, r6
 800742e:	e7e1      	b.n	80073f4 <_reclaim_reent+0x1c>
 8007430:	6961      	ldr	r1, [r4, #20]
 8007432:	b111      	cbz	r1, 800743a <_reclaim_reent+0x62>
 8007434:	4620      	mov	r0, r4
 8007436:	f000 f861 	bl	80074fc <_free_r>
 800743a:	69e1      	ldr	r1, [r4, #28]
 800743c:	b111      	cbz	r1, 8007444 <_reclaim_reent+0x6c>
 800743e:	4620      	mov	r0, r4
 8007440:	f000 f85c 	bl	80074fc <_free_r>
 8007444:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007446:	b111      	cbz	r1, 800744e <_reclaim_reent+0x76>
 8007448:	4620      	mov	r0, r4
 800744a:	f000 f857 	bl	80074fc <_free_r>
 800744e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007450:	b111      	cbz	r1, 8007458 <_reclaim_reent+0x80>
 8007452:	4620      	mov	r0, r4
 8007454:	f000 f852 	bl	80074fc <_free_r>
 8007458:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800745a:	b111      	cbz	r1, 8007462 <_reclaim_reent+0x8a>
 800745c:	4620      	mov	r0, r4
 800745e:	f000 f84d 	bl	80074fc <_free_r>
 8007462:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007464:	b111      	cbz	r1, 800746c <_reclaim_reent+0x94>
 8007466:	4620      	mov	r0, r4
 8007468:	f000 f848 	bl	80074fc <_free_r>
 800746c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800746e:	b111      	cbz	r1, 8007476 <_reclaim_reent+0x9e>
 8007470:	4620      	mov	r0, r4
 8007472:	f000 f843 	bl	80074fc <_free_r>
 8007476:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007478:	b111      	cbz	r1, 8007480 <_reclaim_reent+0xa8>
 800747a:	4620      	mov	r0, r4
 800747c:	f000 f83e 	bl	80074fc <_free_r>
 8007480:	6a23      	ldr	r3, [r4, #32]
 8007482:	b11b      	cbz	r3, 800748c <_reclaim_reent+0xb4>
 8007484:	4620      	mov	r0, r4
 8007486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800748a:	4718      	bx	r3
 800748c:	bd70      	pop	{r4, r5, r6, pc}
 800748e:	bf00      	nop
 8007490:	20000010 	.word	0x20000010

08007494 <__libc_init_array>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	2600      	movs	r6, #0
 8007498:	4d0c      	ldr	r5, [pc, #48]	@ (80074cc <__libc_init_array+0x38>)
 800749a:	4c0d      	ldr	r4, [pc, #52]	@ (80074d0 <__libc_init_array+0x3c>)
 800749c:	1b64      	subs	r4, r4, r5
 800749e:	10a4      	asrs	r4, r4, #2
 80074a0:	42a6      	cmp	r6, r4
 80074a2:	d109      	bne.n	80074b8 <__libc_init_array+0x24>
 80074a4:	f000 f87e 	bl	80075a4 <_init>
 80074a8:	2600      	movs	r6, #0
 80074aa:	4d0a      	ldr	r5, [pc, #40]	@ (80074d4 <__libc_init_array+0x40>)
 80074ac:	4c0a      	ldr	r4, [pc, #40]	@ (80074d8 <__libc_init_array+0x44>)
 80074ae:	1b64      	subs	r4, r4, r5
 80074b0:	10a4      	asrs	r4, r4, #2
 80074b2:	42a6      	cmp	r6, r4
 80074b4:	d105      	bne.n	80074c2 <__libc_init_array+0x2e>
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074bc:	4798      	blx	r3
 80074be:	3601      	adds	r6, #1
 80074c0:	e7ee      	b.n	80074a0 <__libc_init_array+0xc>
 80074c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c6:	4798      	blx	r3
 80074c8:	3601      	adds	r6, #1
 80074ca:	e7f2      	b.n	80074b2 <__libc_init_array+0x1e>
 80074cc:	080076d8 	.word	0x080076d8
 80074d0:	080076d8 	.word	0x080076d8
 80074d4:	080076d8 	.word	0x080076d8
 80074d8:	080076dc 	.word	0x080076dc

080074dc <__retarget_lock_acquire_recursive>:
 80074dc:	4770      	bx	lr

080074de <__retarget_lock_release_recursive>:
 80074de:	4770      	bx	lr

080074e0 <memcpy>:
 80074e0:	440a      	add	r2, r1
 80074e2:	4291      	cmp	r1, r2
 80074e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80074e8:	d100      	bne.n	80074ec <memcpy+0xc>
 80074ea:	4770      	bx	lr
 80074ec:	b510      	push	{r4, lr}
 80074ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f2:	4291      	cmp	r1, r2
 80074f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074f8:	d1f9      	bne.n	80074ee <memcpy+0xe>
 80074fa:	bd10      	pop	{r4, pc}

080074fc <_free_r>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	4605      	mov	r5, r0
 8007500:	2900      	cmp	r1, #0
 8007502:	d040      	beq.n	8007586 <_free_r+0x8a>
 8007504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007508:	1f0c      	subs	r4, r1, #4
 800750a:	2b00      	cmp	r3, #0
 800750c:	bfb8      	it	lt
 800750e:	18e4      	addlt	r4, r4, r3
 8007510:	f000 f83c 	bl	800758c <__malloc_lock>
 8007514:	4a1c      	ldr	r2, [pc, #112]	@ (8007588 <_free_r+0x8c>)
 8007516:	6813      	ldr	r3, [r2, #0]
 8007518:	b933      	cbnz	r3, 8007528 <_free_r+0x2c>
 800751a:	6063      	str	r3, [r4, #4]
 800751c:	6014      	str	r4, [r2, #0]
 800751e:	4628      	mov	r0, r5
 8007520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007524:	f000 b838 	b.w	8007598 <__malloc_unlock>
 8007528:	42a3      	cmp	r3, r4
 800752a:	d908      	bls.n	800753e <_free_r+0x42>
 800752c:	6820      	ldr	r0, [r4, #0]
 800752e:	1821      	adds	r1, r4, r0
 8007530:	428b      	cmp	r3, r1
 8007532:	bf01      	itttt	eq
 8007534:	6819      	ldreq	r1, [r3, #0]
 8007536:	685b      	ldreq	r3, [r3, #4]
 8007538:	1809      	addeq	r1, r1, r0
 800753a:	6021      	streq	r1, [r4, #0]
 800753c:	e7ed      	b.n	800751a <_free_r+0x1e>
 800753e:	461a      	mov	r2, r3
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	b10b      	cbz	r3, 8007548 <_free_r+0x4c>
 8007544:	42a3      	cmp	r3, r4
 8007546:	d9fa      	bls.n	800753e <_free_r+0x42>
 8007548:	6811      	ldr	r1, [r2, #0]
 800754a:	1850      	adds	r0, r2, r1
 800754c:	42a0      	cmp	r0, r4
 800754e:	d10b      	bne.n	8007568 <_free_r+0x6c>
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	4401      	add	r1, r0
 8007554:	1850      	adds	r0, r2, r1
 8007556:	4283      	cmp	r3, r0
 8007558:	6011      	str	r1, [r2, #0]
 800755a:	d1e0      	bne.n	800751e <_free_r+0x22>
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	4408      	add	r0, r1
 8007562:	6010      	str	r0, [r2, #0]
 8007564:	6053      	str	r3, [r2, #4]
 8007566:	e7da      	b.n	800751e <_free_r+0x22>
 8007568:	d902      	bls.n	8007570 <_free_r+0x74>
 800756a:	230c      	movs	r3, #12
 800756c:	602b      	str	r3, [r5, #0]
 800756e:	e7d6      	b.n	800751e <_free_r+0x22>
 8007570:	6820      	ldr	r0, [r4, #0]
 8007572:	1821      	adds	r1, r4, r0
 8007574:	428b      	cmp	r3, r1
 8007576:	bf01      	itttt	eq
 8007578:	6819      	ldreq	r1, [r3, #0]
 800757a:	685b      	ldreq	r3, [r3, #4]
 800757c:	1809      	addeq	r1, r1, r0
 800757e:	6021      	streq	r1, [r4, #0]
 8007580:	6063      	str	r3, [r4, #4]
 8007582:	6054      	str	r4, [r2, #4]
 8007584:	e7cb      	b.n	800751e <_free_r+0x22>
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	20001d3c 	.word	0x20001d3c

0800758c <__malloc_lock>:
 800758c:	4801      	ldr	r0, [pc, #4]	@ (8007594 <__malloc_lock+0x8>)
 800758e:	f7ff bfa5 	b.w	80074dc <__retarget_lock_acquire_recursive>
 8007592:	bf00      	nop
 8007594:	20001d38 	.word	0x20001d38

08007598 <__malloc_unlock>:
 8007598:	4801      	ldr	r0, [pc, #4]	@ (80075a0 <__malloc_unlock+0x8>)
 800759a:	f7ff bfa0 	b.w	80074de <__retarget_lock_release_recursive>
 800759e:	bf00      	nop
 80075a0:	20001d38 	.word	0x20001d38

080075a4 <_init>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr

080075b0 <_fini>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr
