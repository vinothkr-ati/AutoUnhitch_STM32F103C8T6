
AutoUnhitch_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000888c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800899c  0800899c  0000999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008abc  08008abc  0000a064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008abc  08008abc  0000a064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008abc  08008abc  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008abc  08008abc  00009abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ac0  08008ac0  00009ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08008ac4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  20000064  08008b28  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d68  08008b28  0000ad68  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017803  00000000  00000000  0000a08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000376c  00000000  00000000  00021890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00025000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe4  00000000  00000000  000264a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019306  00000000  00000000  0002748c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015535  00000000  00000000  00040792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099db4  00000000  00000000  00055cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efa7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca8  00000000  00000000  000efac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f5768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08008984 	.word	0x08008984

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08008984 	.word	0x08008984

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2f>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000834:	bf24      	itt	cs
 8000836:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800083a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800083e:	d90d      	bls.n	800085c <__aeabi_d2f+0x30>
 8000840:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000844:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000848:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800084c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000850:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000860:	d121      	bne.n	80008a6 <__aeabi_d2f+0x7a>
 8000862:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000866:	bfbc      	itt	lt
 8000868:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800086c:	4770      	bxlt	lr
 800086e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000872:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000876:	f1c2 0218 	rsb	r2, r2, #24
 800087a:	f1c2 0c20 	rsb	ip, r2, #32
 800087e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000882:	fa20 f002 	lsr.w	r0, r0, r2
 8000886:	bf18      	it	ne
 8000888:	f040 0001 	orrne.w	r0, r0, #1
 800088c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000890:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000894:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000898:	ea40 000c 	orr.w	r0, r0, ip
 800089c:	fa23 f302 	lsr.w	r3, r3, r2
 80008a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008a4:	e7cc      	b.n	8000840 <__aeabi_d2f+0x14>
 80008a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008aa:	d107      	bne.n	80008bc <__aeabi_d2f+0x90>
 80008ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008b0:	bf1e      	ittt	ne
 80008b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ba:	4770      	bxne	lr
 80008bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <__aeabi_frsub>:
 80008cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80008d0:	e002      	b.n	80008d8 <__addsf3>
 80008d2:	bf00      	nop

080008d4 <__aeabi_fsub>:
 80008d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080008d8 <__addsf3>:
 80008d8:	0042      	lsls	r2, r0, #1
 80008da:	bf1f      	itttt	ne
 80008dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008e0:	ea92 0f03 	teqne	r2, r3
 80008e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008ec:	d06a      	beq.n	80009c4 <__addsf3+0xec>
 80008ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008f6:	bfc1      	itttt	gt
 80008f8:	18d2      	addgt	r2, r2, r3
 80008fa:	4041      	eorgt	r1, r0
 80008fc:	4048      	eorgt	r0, r1
 80008fe:	4041      	eorgt	r1, r0
 8000900:	bfb8      	it	lt
 8000902:	425b      	neglt	r3, r3
 8000904:	2b19      	cmp	r3, #25
 8000906:	bf88      	it	hi
 8000908:	4770      	bxhi	lr
 800090a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800090e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000912:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800091e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000922:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000926:	bf18      	it	ne
 8000928:	4249      	negne	r1, r1
 800092a:	ea92 0f03 	teq	r2, r3
 800092e:	d03f      	beq.n	80009b0 <__addsf3+0xd8>
 8000930:	f1a2 0201 	sub.w	r2, r2, #1
 8000934:	fa41 fc03 	asr.w	ip, r1, r3
 8000938:	eb10 000c 	adds.w	r0, r0, ip
 800093c:	f1c3 0320 	rsb	r3, r3, #32
 8000940:	fa01 f103 	lsl.w	r1, r1, r3
 8000944:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000948:	d502      	bpl.n	8000950 <__addsf3+0x78>
 800094a:	4249      	negs	r1, r1
 800094c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000950:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000954:	d313      	bcc.n	800097e <__addsf3+0xa6>
 8000956:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800095a:	d306      	bcc.n	800096a <__addsf3+0x92>
 800095c:	0840      	lsrs	r0, r0, #1
 800095e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000962:	f102 0201 	add.w	r2, r2, #1
 8000966:	2afe      	cmp	r2, #254	@ 0xfe
 8000968:	d251      	bcs.n	8000a0e <__addsf3+0x136>
 800096a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800096e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000972:	bf08      	it	eq
 8000974:	f020 0001 	biceq.w	r0, r0, #1
 8000978:	ea40 0003 	orr.w	r0, r0, r3
 800097c:	4770      	bx	lr
 800097e:	0049      	lsls	r1, r1, #1
 8000980:	eb40 0000 	adc.w	r0, r0, r0
 8000984:	3a01      	subs	r2, #1
 8000986:	bf28      	it	cs
 8000988:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800098c:	d2ed      	bcs.n	800096a <__addsf3+0x92>
 800098e:	fab0 fc80 	clz	ip, r0
 8000992:	f1ac 0c08 	sub.w	ip, ip, #8
 8000996:	ebb2 020c 	subs.w	r2, r2, ip
 800099a:	fa00 f00c 	lsl.w	r0, r0, ip
 800099e:	bfaa      	itet	ge
 80009a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009a4:	4252      	neglt	r2, r2
 80009a6:	4318      	orrge	r0, r3
 80009a8:	bfbc      	itt	lt
 80009aa:	40d0      	lsrlt	r0, r2
 80009ac:	4318      	orrlt	r0, r3
 80009ae:	4770      	bx	lr
 80009b0:	f092 0f00 	teq	r2, #0
 80009b4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80009b8:	bf06      	itte	eq
 80009ba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80009be:	3201      	addeq	r2, #1
 80009c0:	3b01      	subne	r3, #1
 80009c2:	e7b5      	b.n	8000930 <__addsf3+0x58>
 80009c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009cc:	bf18      	it	ne
 80009ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d2:	d021      	beq.n	8000a18 <__addsf3+0x140>
 80009d4:	ea92 0f03 	teq	r2, r3
 80009d8:	d004      	beq.n	80009e4 <__addsf3+0x10c>
 80009da:	f092 0f00 	teq	r2, #0
 80009de:	bf08      	it	eq
 80009e0:	4608      	moveq	r0, r1
 80009e2:	4770      	bx	lr
 80009e4:	ea90 0f01 	teq	r0, r1
 80009e8:	bf1c      	itt	ne
 80009ea:	2000      	movne	r0, #0
 80009ec:	4770      	bxne	lr
 80009ee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80009f2:	d104      	bne.n	80009fe <__addsf3+0x126>
 80009f4:	0040      	lsls	r0, r0, #1
 80009f6:	bf28      	it	cs
 80009f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80009fc:	4770      	bx	lr
 80009fe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a02:	bf3c      	itt	cc
 8000a04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bxcc	lr
 8000a0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a16:	4770      	bx	lr
 8000a18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a1c:	bf16      	itet	ne
 8000a1e:	4608      	movne	r0, r1
 8000a20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a24:	4601      	movne	r1, r0
 8000a26:	0242      	lsls	r2, r0, #9
 8000a28:	bf06      	itte	eq
 8000a2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a2e:	ea90 0f01 	teqeq	r0, r1
 8000a32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_ui2f>:
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	e004      	b.n	8000a48 <__aeabi_i2f+0x8>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_i2f>:
 8000a40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000a44:	bf48      	it	mi
 8000a46:	4240      	negmi	r0, r0
 8000a48:	ea5f 0c00 	movs.w	ip, r0
 8000a4c:	bf08      	it	eq
 8000a4e:	4770      	bxeq	lr
 8000a50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000a54:	4601      	mov	r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	e01c      	b.n	8000a96 <__aeabi_l2f+0x2a>

08000a5c <__aeabi_ul2f>:
 8000a5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a60:	bf08      	it	eq
 8000a62:	4770      	bxeq	lr
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	e00a      	b.n	8000a80 <__aeabi_l2f+0x14>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_l2f>:
 8000a6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a70:	bf08      	it	eq
 8000a72:	4770      	bxeq	lr
 8000a74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000a78:	d502      	bpl.n	8000a80 <__aeabi_l2f+0x14>
 8000a7a:	4240      	negs	r0, r0
 8000a7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a80:	ea5f 0c01 	movs.w	ip, r1
 8000a84:	bf02      	ittt	eq
 8000a86:	4684      	moveq	ip, r0
 8000a88:	4601      	moveq	r1, r0
 8000a8a:	2000      	moveq	r0, #0
 8000a8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000a90:	bf08      	it	eq
 8000a92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000a9a:	fabc f28c 	clz	r2, ip
 8000a9e:	3a08      	subs	r2, #8
 8000aa0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000aa4:	db10      	blt.n	8000ac8 <__aeabi_l2f+0x5c>
 8000aa6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aaa:	4463      	add	r3, ip
 8000aac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ab0:	f1c2 0220 	rsb	r2, r2, #32
 8000ab4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ab8:	fa20 f202 	lsr.w	r2, r0, r2
 8000abc:	eb43 0002 	adc.w	r0, r3, r2
 8000ac0:	bf08      	it	eq
 8000ac2:	f020 0001 	biceq.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	f102 0220 	add.w	r2, r2, #32
 8000acc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ad0:	f1c2 0220 	rsb	r2, r2, #32
 8000ad4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ad8:	fa21 f202 	lsr.w	r2, r1, r2
 8000adc:	eb43 0002 	adc.w	r0, r3, r2
 8000ae0:	bf08      	it	eq
 8000ae2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_fmul>:
 8000ae8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000aec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af0:	bf1e      	ittt	ne
 8000af2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000af6:	ea92 0f0c 	teqne	r2, ip
 8000afa:	ea93 0f0c 	teqne	r3, ip
 8000afe:	d06f      	beq.n	8000be0 <__aeabi_fmul+0xf8>
 8000b00:	441a      	add	r2, r3
 8000b02:	ea80 0c01 	eor.w	ip, r0, r1
 8000b06:	0240      	lsls	r0, r0, #9
 8000b08:	bf18      	it	ne
 8000b0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b0e:	d01e      	beq.n	8000b4e <__aeabi_fmul+0x66>
 8000b10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b28:	bf3e      	ittt	cc
 8000b2a:	0049      	lslcc	r1, r1, #1
 8000b2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b30:	005b      	lslcc	r3, r3, #1
 8000b32:	ea40 0001 	orr.w	r0, r0, r1
 8000b36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000b3c:	d81d      	bhi.n	8000b7a <__aeabi_fmul+0x92>
 8000b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b46:	bf08      	it	eq
 8000b48:	f020 0001 	biceq.w	r0, r0, #1
 8000b4c:	4770      	bx	lr
 8000b4e:	f090 0f00 	teq	r0, #0
 8000b52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b56:	bf08      	it	eq
 8000b58:	0249      	lsleq	r1, r1, #9
 8000b5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b62:	3a7f      	subs	r2, #127	@ 0x7f
 8000b64:	bfc2      	ittt	gt
 8000b66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b6e:	4770      	bxgt	lr
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	3a01      	subs	r2, #1
 8000b7a:	dc5d      	bgt.n	8000c38 <__aeabi_fmul+0x150>
 8000b7c:	f112 0f19 	cmn.w	r2, #25
 8000b80:	bfdc      	itt	le
 8000b82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b86:	4770      	bxle	lr
 8000b88:	f1c2 0200 	rsb	r2, r2, #0
 8000b8c:	0041      	lsls	r1, r0, #1
 8000b8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b92:	f1c2 0220 	rsb	r2, r2, #32
 8000b96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b9e:	f140 0000 	adc.w	r0, r0, #0
 8000ba2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ba6:	bf08      	it	eq
 8000ba8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bac:	4770      	bx	lr
 8000bae:	f092 0f00 	teq	r2, #0
 8000bb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bb6:	bf02      	ittt	eq
 8000bb8:	0040      	lsleq	r0, r0, #1
 8000bba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bbe:	3a01      	subeq	r2, #1
 8000bc0:	d0f9      	beq.n	8000bb6 <__aeabi_fmul+0xce>
 8000bc2:	ea40 000c 	orr.w	r0, r0, ip
 8000bc6:	f093 0f00 	teq	r3, #0
 8000bca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bce:	bf02      	ittt	eq
 8000bd0:	0049      	lsleq	r1, r1, #1
 8000bd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bd6:	3b01      	subeq	r3, #1
 8000bd8:	d0f9      	beq.n	8000bce <__aeabi_fmul+0xe6>
 8000bda:	ea41 010c 	orr.w	r1, r1, ip
 8000bde:	e78f      	b.n	8000b00 <__aeabi_fmul+0x18>
 8000be0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be4:	ea92 0f0c 	teq	r2, ip
 8000be8:	bf18      	it	ne
 8000bea:	ea93 0f0c 	teqne	r3, ip
 8000bee:	d00a      	beq.n	8000c06 <__aeabi_fmul+0x11e>
 8000bf0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000bf4:	bf18      	it	ne
 8000bf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bfa:	d1d8      	bne.n	8000bae <__aeabi_fmul+0xc6>
 8000bfc:	ea80 0001 	eor.w	r0, r0, r1
 8000c00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c04:	4770      	bx	lr
 8000c06:	f090 0f00 	teq	r0, #0
 8000c0a:	bf17      	itett	ne
 8000c0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c10:	4608      	moveq	r0, r1
 8000c12:	f091 0f00 	teqne	r1, #0
 8000c16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c1a:	d014      	beq.n	8000c46 <__aeabi_fmul+0x15e>
 8000c1c:	ea92 0f0c 	teq	r2, ip
 8000c20:	d101      	bne.n	8000c26 <__aeabi_fmul+0x13e>
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	d10f      	bne.n	8000c46 <__aeabi_fmul+0x15e>
 8000c26:	ea93 0f0c 	teq	r3, ip
 8000c2a:	d103      	bne.n	8000c34 <__aeabi_fmul+0x14c>
 8000c2c:	024b      	lsls	r3, r1, #9
 8000c2e:	bf18      	it	ne
 8000c30:	4608      	movne	r0, r1
 8000c32:	d108      	bne.n	8000c46 <__aeabi_fmul+0x15e>
 8000c34:	ea80 0001 	eor.w	r0, r0, r1
 8000c38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_fdiv>:
 8000c50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c58:	bf1e      	ittt	ne
 8000c5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c5e:	ea92 0f0c 	teqne	r2, ip
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d069      	beq.n	8000d3c <__aeabi_fdiv+0xec>
 8000c68:	eba2 0203 	sub.w	r2, r2, r3
 8000c6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c70:	0249      	lsls	r1, r1, #9
 8000c72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c76:	d037      	beq.n	8000ce8 <__aeabi_fdiv+0x98>
 8000c78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	bf38      	it	cc
 8000c8c:	005b      	lslcc	r3, r3, #1
 8000c8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000c92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000c96:	428b      	cmp	r3, r1
 8000c98:	bf24      	itt	cs
 8000c9a:	1a5b      	subcs	r3, r3, r1
 8000c9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ca0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ca4:	bf24      	itt	cs
 8000ca6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000caa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cb2:	bf24      	itt	cs
 8000cb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cc0:	bf24      	itt	cs
 8000cc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	bf18      	it	ne
 8000cce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cd2:	d1e0      	bne.n	8000c96 <__aeabi_fdiv+0x46>
 8000cd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000cd6:	f63f af50 	bhi.w	8000b7a <__aeabi_fmul+0x92>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cf0:	327f      	adds	r2, #127	@ 0x7f
 8000cf2:	bfc2      	ittt	gt
 8000cf4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cf8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cfc:	4770      	bxgt	lr
 8000cfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d02:	f04f 0300 	mov.w	r3, #0
 8000d06:	3a01      	subs	r2, #1
 8000d08:	e737      	b.n	8000b7a <__aeabi_fmul+0x92>
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d12:	bf02      	ittt	eq
 8000d14:	0040      	lsleq	r0, r0, #1
 8000d16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d1a:	3a01      	subeq	r2, #1
 8000d1c:	d0f9      	beq.n	8000d12 <__aeabi_fdiv+0xc2>
 8000d1e:	ea40 000c 	orr.w	r0, r0, ip
 8000d22:	f093 0f00 	teq	r3, #0
 8000d26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0049      	lsleq	r1, r1, #1
 8000d2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d32:	3b01      	subeq	r3, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fdiv+0xda>
 8000d36:	ea41 010c 	orr.w	r1, r1, ip
 8000d3a:	e795      	b.n	8000c68 <__aeabi_fdiv+0x18>
 8000d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d40:	ea92 0f0c 	teq	r2, ip
 8000d44:	d108      	bne.n	8000d58 <__aeabi_fdiv+0x108>
 8000d46:	0242      	lsls	r2, r0, #9
 8000d48:	f47f af7d 	bne.w	8000c46 <__aeabi_fmul+0x15e>
 8000d4c:	ea93 0f0c 	teq	r3, ip
 8000d50:	f47f af70 	bne.w	8000c34 <__aeabi_fmul+0x14c>
 8000d54:	4608      	mov	r0, r1
 8000d56:	e776      	b.n	8000c46 <__aeabi_fmul+0x15e>
 8000d58:	ea93 0f0c 	teq	r3, ip
 8000d5c:	d104      	bne.n	8000d68 <__aeabi_fdiv+0x118>
 8000d5e:	024b      	lsls	r3, r1, #9
 8000d60:	f43f af4c 	beq.w	8000bfc <__aeabi_fmul+0x114>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e76e      	b.n	8000c46 <__aeabi_fmul+0x15e>
 8000d68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d6c:	bf18      	it	ne
 8000d6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d72:	d1ca      	bne.n	8000d0a <__aeabi_fdiv+0xba>
 8000d74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d78:	f47f af5c 	bne.w	8000c34 <__aeabi_fmul+0x14c>
 8000d7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d80:	f47f af3c 	bne.w	8000bfc <__aeabi_fmul+0x114>
 8000d84:	e75f      	b.n	8000c46 <__aeabi_fmul+0x15e>
 8000d86:	bf00      	nop

08000d88 <__gesf2>:
 8000d88:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000d8c:	e006      	b.n	8000d9c <__cmpsf2+0x4>
 8000d8e:	bf00      	nop

08000d90 <__lesf2>:
 8000d90:	f04f 0c01 	mov.w	ip, #1
 8000d94:	e002      	b.n	8000d9c <__cmpsf2+0x4>
 8000d96:	bf00      	nop

08000d98 <__cmpsf2>:
 8000d98:	f04f 0c01 	mov.w	ip, #1
 8000d9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000da0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dac:	bf18      	it	ne
 8000dae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000db2:	d011      	beq.n	8000dd8 <__cmpsf2+0x40>
 8000db4:	b001      	add	sp, #4
 8000db6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dba:	bf18      	it	ne
 8000dbc:	ea90 0f01 	teqne	r0, r1
 8000dc0:	bf58      	it	pl
 8000dc2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc6:	bf88      	it	hi
 8000dc8:	17c8      	asrhi	r0, r1, #31
 8000dca:	bf38      	it	cc
 8000dcc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dd0:	bf18      	it	ne
 8000dd2:	f040 0001 	orrne.w	r0, r0, #1
 8000dd6:	4770      	bx	lr
 8000dd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ddc:	d102      	bne.n	8000de4 <__cmpsf2+0x4c>
 8000dde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000de2:	d105      	bne.n	8000df0 <__cmpsf2+0x58>
 8000de4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de8:	d1e4      	bne.n	8000db4 <__cmpsf2+0x1c>
 8000dea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dee:	d0e1      	beq.n	8000db4 <__cmpsf2+0x1c>
 8000df0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <__aeabi_cfrcmple>:
 8000df8:	4684      	mov	ip, r0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	4661      	mov	r1, ip
 8000dfe:	e7ff      	b.n	8000e00 <__aeabi_cfcmpeq>

08000e00 <__aeabi_cfcmpeq>:
 8000e00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e02:	f7ff ffc9 	bl	8000d98 <__cmpsf2>
 8000e06:	2800      	cmp	r0, #0
 8000e08:	bf48      	it	mi
 8000e0a:	f110 0f00 	cmnmi.w	r0, #0
 8000e0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e10 <__aeabi_fcmpeq>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff fff4 	bl	8000e00 <__aeabi_cfcmpeq>
 8000e18:	bf0c      	ite	eq
 8000e1a:	2001      	moveq	r0, #1
 8000e1c:	2000      	movne	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_fcmplt>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff ffea 	bl	8000e00 <__aeabi_cfcmpeq>
 8000e2c:	bf34      	ite	cc
 8000e2e:	2001      	movcc	r0, #1
 8000e30:	2000      	movcs	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_fcmple>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffe0 	bl	8000e00 <__aeabi_cfcmpeq>
 8000e40:	bf94      	ite	ls
 8000e42:	2001      	movls	r0, #1
 8000e44:	2000      	movhi	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_fcmpge>:
 8000e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e50:	f7ff ffd2 	bl	8000df8 <__aeabi_cfrcmple>
 8000e54:	bf94      	ite	ls
 8000e56:	2001      	movls	r0, #1
 8000e58:	2000      	movhi	r0, #0
 8000e5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5e:	bf00      	nop

08000e60 <__aeabi_fcmpgt>:
 8000e60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e64:	f7ff ffc8 	bl	8000df8 <__aeabi_cfrcmple>
 8000e68:	bf34      	ite	cc
 8000e6a:	2001      	movcc	r0, #1
 8000e6c:	2000      	movcs	r0, #0
 8000e6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e72:	bf00      	nop

08000e74 <__aeabi_f2uiz>:
 8000e74:	0042      	lsls	r2, r0, #1
 8000e76:	d20e      	bcs.n	8000e96 <__aeabi_f2uiz+0x22>
 8000e78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e7c:	d30b      	bcc.n	8000e96 <__aeabi_f2uiz+0x22>
 8000e7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e86:	d409      	bmi.n	8000e9c <__aeabi_f2uiz+0x28>
 8000e88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e90:	fa23 f002 	lsr.w	r0, r3, r2
 8000e94:	4770      	bx	lr
 8000e96:	f04f 0000 	mov.w	r0, #0
 8000e9a:	4770      	bx	lr
 8000e9c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ea0:	d101      	bne.n	8000ea6 <__aeabi_f2uiz+0x32>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	d102      	bne.n	8000eac <__aeabi_f2uiz+0x38>
 8000ea6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eaa:	4770      	bx	lr
 8000eac:	f04f 0000 	mov.w	r0, #0
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ADC_Select_CH0>:
 */

#include "ADC_Readings.h"

void ADC_Select_CH0 (void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&ADC_Select, &sConfig) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	@ (8000eec <ADC_Select_CH0+0x38>)
 8000ed6:	f001 fccf 	bl	8002878 <HAL_ADC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <ADC_Select_CH0+0x30>
	  {
	    Error_Handler();
 8000ee0:	f000 ff86 	bl	8001df0 <Error_Handler>
	  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200000fc 	.word	0x200000fc

08000ef0 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&ADC_Select, &sConfig) != HAL_OK)
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <ADC_Select_CH1+0x38>)
 8000f12:	f001 fcb1 	bl	8002878 <HAL_ADC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8000f1c:	f000 ff68 	bl	8001df0 <Error_Handler>
	  }
}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000fc 	.word	0x200000fc

08000f2c <ADC_Select_CH2>:

void ADC_Select_CH2 (void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000f44:	2302      	movs	r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&ADC_Select, &sConfig) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <ADC_Select_CH2+0x38>)
 8000f4e:	f001 fc93 	bl	8002878 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8000f58:	f000 ff4a 	bl	8001df0 <Error_Handler>
	  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000fc 	.word	0x200000fc

08000f68 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000f80:	2302      	movs	r3, #2
 8000f82:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&ADC_Select, &sConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <ADC_Select_CH3+0x38>)
 8000f8a:	f001 fc75 	bl	8002878 <HAL_ADC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 8000f94:	f000 ff2c 	bl	8001df0 <Error_Handler>
	  }
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200000fc 	.word	0x200000fc

08000fa4 <ADC_Auto_Unhitch_Read>:





uint32_t ADC_Auto_Unhitch_Read(uint32_t  adc_read[] )  {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]


	ADC_Select_CH0();
 8000fac:	f7ff ff82 	bl	8000eb4 <ADC_Select_CH0>
	HAL_ADC_Start(&ADC_Select);
 8000fb0:	480a      	ldr	r0, [pc, #40]	@ (8000fdc <ADC_Auto_Unhitch_Read+0x38>)
 8000fb2:	f001 fa75 	bl	80024a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000fb6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fba:	4808      	ldr	r0, [pc, #32]	@ (8000fdc <ADC_Auto_Unhitch_Read+0x38>)
 8000fbc:	f001 fb4a 	bl	8002654 <HAL_ADC_PollForConversion>
	adc_read[0] = HAL_ADC_GetValue(&hadc1);
 8000fc0:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <ADC_Auto_Unhitch_Read+0x38>)
 8000fc2:	f001 fc4d 	bl	8002860 <HAL_ADC_GetValue>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&ADC_Select);
 8000fcc:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <ADC_Auto_Unhitch_Read+0x38>)
 8000fce:	f001 fb15 	bl	80025fc <HAL_ADC_Stop>

	return 0;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200000fc 	.word	0x200000fc

08000fe0 <ADC_Current_Sensor_1_Read>:

uint8_t ADC_Current_Sensor_1_Read(uint32_t  adc_read[])  {
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

	uint8_t Current_Sensor1 = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
	float A_SEN1 =0;
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
	ADC_Select_CH1();
 8000ff2:	f7ff ff7d 	bl	8000ef0 <ADC_Select_CH1>
	HAL_ADC_Start(&ADC_Select);
 8000ff6:	480b      	ldr	r0, [pc, #44]	@ (8001024 <ADC_Current_Sensor_1_Read+0x44>)
 8000ff8:	f001 fa52 	bl	80024a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000ffc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001000:	4808      	ldr	r0, [pc, #32]	@ (8001024 <ADC_Current_Sensor_1_Read+0x44>)
 8001002:	f001 fb27 	bl	8002654 <HAL_ADC_PollForConversion>
	adc_read[1] = HAL_ADC_GetValue(&hadc1);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	1d1c      	adds	r4, r3, #4
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <ADC_Current_Sensor_1_Read+0x44>)
 800100c:	f001 fc28 	bl	8002860 <HAL_ADC_GetValue>
 8001010:	4603      	mov	r3, r0
 8001012:	6023      	str	r3, [r4, #0]
	HAL_ADC_Stop(&ADC_Select);
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <ADC_Current_Sensor_1_Read+0x44>)
 8001016:	f001 faf1 	bl	80025fc <HAL_ADC_Stop>
//	A_SEN1 = ( (float)ADC_VAL[2] + 89.42 ) /266.3;
//	A_SEN1 = A_SEN1 * 10;
//	Current_Sensor1 = (uint8_t)A_SEN1;


	return 0;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	200000fc 	.word	0x200000fc

08001028 <ADC_Current_Sensor_2_Read>:

uint8_t ADC_Current_Sensor_2_Read(uint32_t  adc_read[])  {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	uint8_t Current_Sensor2 = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
	float A_SEN2 =0;
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
	ADC_Select_CH2();
 800103a:	f7ff ff77 	bl	8000f2c <ADC_Select_CH2>
	HAL_ADC_Start(&ADC_Select);
 800103e:	480c      	ldr	r0, [pc, #48]	@ (8001070 <ADC_Current_Sensor_2_Read+0x48>)
 8001040:	f001 fa2e 	bl	80024a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001044:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001048:	4809      	ldr	r0, [pc, #36]	@ (8001070 <ADC_Current_Sensor_2_Read+0x48>)
 800104a:	f001 fb03 	bl	8002654 <HAL_ADC_PollForConversion>
	adc_read[2] = HAL_ADC_GetValue(&ADC_Select);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f103 0408 	add.w	r4, r3, #8
 8001054:	4806      	ldr	r0, [pc, #24]	@ (8001070 <ADC_Current_Sensor_2_Read+0x48>)
 8001056:	f001 fc03 	bl	8002860 <HAL_ADC_GetValue>
 800105a:	4603      	mov	r3, r0
 800105c:	6023      	str	r3, [r4, #0]
	HAL_ADC_Stop(&ADC_Select);
 800105e:	4804      	ldr	r0, [pc, #16]	@ (8001070 <ADC_Current_Sensor_2_Read+0x48>)
 8001060:	f001 facc 	bl	80025fc <HAL_ADC_Stop>
//	A_SEN2 = ( (float)ADC_VAL[3] + 89.42 ) /266.3;
//	A_SEN2 = A_SEN2 * 10;
//	Current_Sensor2 = (uint8_t)A_SEN2;

	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bd90      	pop	{r4, r7, pc}
 800106e:	bf00      	nop
 8001070:	200000fc 	.word	0x200000fc

08001074 <ADC_24V_Read>:

uint32_t ADC_24V_Read(uint32_t  adc_read[])  {
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]



	ADC_Select_CH3();
 800107c:	f7ff ff74 	bl	8000f68 <ADC_Select_CH3>
	HAL_ADC_Start(&ADC_Select);
 8001080:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <ADC_24V_Read+0x3c>)
 8001082:	f001 fa0d 	bl	80024a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001086:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800108a:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <ADC_24V_Read+0x3c>)
 800108c:	f001 fae2 	bl	8002654 <HAL_ADC_PollForConversion>
	adc_read[3] = HAL_ADC_GetValue(&ADC_Select);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f103 040c 	add.w	r4, r3, #12
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <ADC_24V_Read+0x3c>)
 8001098:	f001 fbe2 	bl	8002860 <HAL_ADC_GetValue>
 800109c:	4603      	mov	r3, r0
 800109e:	6023      	str	r3, [r4, #0]
	HAL_ADC_Stop(&ADC_Select);
 80010a0:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <ADC_24V_Read+0x3c>)
 80010a2:	f001 faab 	bl	80025fc <HAL_ADC_Stop>

	return 0;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	200000fc 	.word	0x200000fc
 80010b4:	00000000 	.word	0x00000000

080010b8 <Read_ISEN_Current>:
//uint8_t Read_ISEN_Current(){
//
//
//}

float Read_ISEN_Current(uint32_t ADC_RAW_VAL[]){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

	float ISEN_Current_Result;
	float x ,cal ;
	x =   (float)ADC_RAW_VAL[0];
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fcb7 	bl	8000a38 <__aeabi_ui2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	617b      	str	r3, [r7, #20]
	// printf("%f\n",x);
	cal =  (x/4095)*3.3*6.094  ;
 80010ce:	4920      	ldr	r1, [pc, #128]	@ (8001150 <Read_ISEN_Current+0x98>)
 80010d0:	6978      	ldr	r0, [r7, #20]
 80010d2:	f7ff fdbd 	bl	8000c50 <__aeabi_fdiv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fac7 	bl	800066c <__aeabi_f2d>
 80010de:	a316      	add	r3, pc, #88	@ (adr r3, 8001138 <Read_ISEN_Current+0x80>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff f834 	bl	8000150 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	a313      	add	r3, pc, #76	@ (adr r3, 8001140 <Read_ISEN_Current+0x88>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff f82b 	bl	8000150 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fb93 	bl	800082c <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	613b      	str	r3, [r7, #16]
	//  printf("%f\n",cal);
	ISEN_Current_Result = cal + 0.3;
 800110a:	6938      	ldr	r0, [r7, #16]
 800110c:	f7ff faae 	bl	800066c <__aeabi_f2d>
 8001110:	a30d      	add	r3, pc, #52	@ (adr r3, 8001148 <Read_ISEN_Current+0x90>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	f7ff f94b 	bl	80003b0 <__adddf3>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fb83 	bl	800082c <__aeabi_d2f>
 8001126:	4603      	mov	r3, r0
 8001128:	60fb      	str	r3, [r7, #12]
	//  converted = offset *10;
	//  printf("%f\n",converted);
	//  result = (uint8_t)converted;
	//   printf("%d\n",result);

	return ISEN_Current_Result;
 800112a:	68fb      	ldr	r3, [r7, #12]

}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	f3af 8000 	nop.w
 8001138:	66666666 	.word	0x66666666
 800113c:	400a6666 	.word	0x400a6666
 8001140:	89374bc7 	.word	0x89374bc7
 8001144:	40186041 	.word	0x40186041
 8001148:	33333333 	.word	0x33333333
 800114c:	3fd33333 	.word	0x3fd33333
 8001150:	457ff000 	.word	0x457ff000
 8001154:	00000000 	.word	0x00000000

08001158 <Read_VSEN_24V>:



float Read_VSEN_24V(uint32_t ADC_RAW_VAL[]){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

	float VSEN_24V_Result;
	float y  ;
	y =   (float)ADC_RAW_VAL[3];
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	330c      	adds	r3, #12
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fc66 	bl	8000a38 <__aeabi_ui2f>
 800116c:	4603      	mov	r3, r0
 800116e:	60fb      	str	r3, [r7, #12]
	// printf("%f\n",x);
	VSEN_24V_Result =  (y/4095)*3.3*11  ;
 8001170:	4913      	ldr	r1, [pc, #76]	@ (80011c0 <Read_VSEN_24V+0x68>)
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f7ff fd6c 	bl	8000c50 <__aeabi_fdiv>
 8001178:	4603      	mov	r3, r0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fa76 	bl	800066c <__aeabi_f2d>
 8001180:	a30d      	add	r3, pc, #52	@ (adr r3, 80011b8 <Read_VSEN_24V+0x60>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7fe ffe3 	bl	8000150 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <Read_VSEN_24V+0x6c>)
 8001198:	f7fe ffda 	bl	8000150 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fb42 	bl	800082c <__aeabi_d2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	60bb      	str	r3, [r7, #8]
	//  converted = offset *10;
	//  printf("%f\n",converted);
	//  result = (uint8_t)converted;
	//   printf("%d\n",result);

	return VSEN_24V_Result;
 80011ac:	68bb      	ldr	r3, [r7, #8]

}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	66666666 	.word	0x66666666
 80011bc:	400a6666 	.word	0x400a6666
 80011c0:	457ff000 	.word	0x457ff000
 80011c4:	40260000 	.word	0x40260000

080011c8 <Delay_Micro_Seconds>:

void Delay_Micro_Seconds (uint16_t us)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <Delay_Micro_Seconds+0x2c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 80011da:	bf00      	nop
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <Delay_Micro_Seconds+0x2c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3f9      	bcc.n	80011dc <Delay_Micro_Seconds+0x14>
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	2000019c 	.word	0x2000019c

080011f8 <CAN_TransmitMessage_Ext_ID>:


/*
 * STD ID
 */
HAL_StatusTypeDef CAN_TransmitMessage_Ext_ID(CAN_HandleTypeDef *hcan, uint32_t Ext_ID, uint8_t *data, uint8_t len) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	@ 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
    HAL_StatusTypeDef status;

    // Configure TxHeader
            // Standard Identifier
    TxHeader.ExtId = Ext_ID;            // Extended Identifier (not used in this case)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	61bb      	str	r3, [r7, #24]

    TxHeader.IDE = CAN_ID_EXT;
 800120e:	2304      	movs	r3, #4
 8001210:	61fb      	str	r3, [r7, #28]
    TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = len;               // Data Length Code
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.TransmitGlobalTime = DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    // Request transmission
    status = HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	f107 0114 	add.w	r1, r7, #20
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f001 febf 	bl	8002fae <HAL_CAN_AddTxMessage>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (status != HAL_OK) {
 8001236:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <CAN_TransmitMessage_Ext_ID+0x4c>
        // Transmission request failed
        return status;
 800123e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001242:	e009      	b.n	8001258 <CAN_TransmitMessage_Ext_ID+0x60>
    }

    // Wait until the transmission is complete
    while (HAL_CAN_IsTxMessagePending(hcan, TxMailbox));
 8001244:	bf00      	nop
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4619      	mov	r1, r3
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f001 ff7e 	bl	800314c <HAL_CAN_IsTxMessagePending>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f7      	bne.n	8001246 <CAN_TransmitMessage_Ext_ID+0x4e>

    // Transmission successful, mailbox is freed automatically
    return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3730      	adds	r7, #48	@ 0x30
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]


    if (hcan->Instance == CAN1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a3d      	ldr	r2, [pc, #244]	@ (8001364 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d174      	bne.n	800135c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
       {
            HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN1RX_Header, CAN1RX_DATA);
 8001272:	4b3d      	ldr	r3, [pc, #244]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8001274:	4a3d      	ldr	r2, [pc, #244]	@ (800136c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001276:	2100      	movs	r1, #0
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f001 ff8a 	bl	8003192 <HAL_CAN_GetRxMessage>
            // Process CAN1 Data here
            CAN1_Queue_TX[0] = CAN1RX_DATA[0];
 800127e:	4b3a      	ldr	r3, [pc, #232]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001286:	701a      	strb	r2, [r3, #0]
			CAN1_Queue_TX[1] = CAN1RX_DATA[1];
 8001288:	4b37      	ldr	r3, [pc, #220]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b38      	ldr	r3, [pc, #224]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001290:	705a      	strb	r2, [r3, #1]
			CAN1_Queue_TX[2] = CAN1RX_DATA[2];
 8001292:	4b35      	ldr	r3, [pc, #212]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8001294:	789b      	ldrb	r3, [r3, #2]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800129a:	709a      	strb	r2, [r3, #2]
			CAN1_Queue_TX[3] = CAN1RX_DATA[3];
 800129c:	4b32      	ldr	r3, [pc, #200]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800129e:	78db      	ldrb	r3, [r3, #3]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b33      	ldr	r3, [pc, #204]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80012a4:	70da      	strb	r2, [r3, #3]

			CAN1_Queue_TX[4] = CAN1RX_DATA[4];
 80012a6:	4b30      	ldr	r3, [pc, #192]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80012a8:	791b      	ldrb	r3, [r3, #4]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b30      	ldr	r3, [pc, #192]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80012ae:	711a      	strb	r2, [r3, #4]
			CAN1_Queue_TX[5] = CAN1RX_DATA[5];
 80012b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80012b2:	795b      	ldrb	r3, [r3, #5]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80012b8:	715a      	strb	r2, [r3, #5]
			CAN1_Queue_TX[6] = CAN1RX_DATA[6];
 80012ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80012bc:	799b      	ldrb	r3, [r3, #6]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80012c2:	719a      	strb	r2, [r3, #6]
			CAN1_Queue_TX[7] = CAN1RX_DATA[7];
 80012c4:	4b28      	ldr	r3, [pc, #160]	@ (8001368 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80012c6:	79db      	ldrb	r3, [r3, #7]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b29      	ldr	r3, [pc, #164]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80012cc:	71da      	strb	r2, [r3, #7]

			//		CAN1_RX_DLC = RxHeader.DLC;

			CAN1RX_IDE_DATA = CAN1RX_Header.IDE;
 80012ce:	4b27      	ldr	r3, [pc, #156]	@ (800136c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	4a28      	ldr	r2, [pc, #160]	@ (8001374 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80012d4:	6013      	str	r3, [r2, #0]
			if(CAN1RX_IDE_DATA == 0) {
 80012d6:	4b27      	ldr	r3, [pc, #156]	@ (8001374 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d11b      	bne.n	8001316 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
				CAN1RX_Std_ID_DATA = CAN1RX_Header.StdId;
 80012de:	4b23      	ldr	r3, [pc, #140]	@ (800136c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a25      	ldr	r2, [pc, #148]	@ (8001378 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80012e4:	6013      	str	r3, [r2, #0]
				CAN1_Queue_TX[8]  =  (CAN1RX_Std_ID_DATA >> 0)  & 0xFF;
 80012e6:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80012ee:	721a      	strb	r2, [r3, #8]
				CAN1_Queue_TX[9]  =  (CAN1RX_Std_ID_DATA >> 8)  & 0xFF;
 80012f0:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80012fa:	725a      	strb	r2, [r3, #9]
				CAN1_Queue_TX[10] =  (CAN1RX_Std_ID_DATA >> 16) & 0xFF;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0c1b      	lsrs	r3, r3, #16
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001306:	729a      	strb	r2, [r3, #10]
				CAN1_Queue_TX[11] =  (CAN1RX_Std_ID_DATA >> 24) & 0xFF;
 8001308:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	0e1b      	lsrs	r3, r3, #24
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001312:	72da      	strb	r2, [r3, #11]
 8001314:	e01a      	b.n	800134c <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
			}else {
				CAN1RX_Ext_ID_DATA = CAN1RX_Header.ExtId;
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4a18      	ldr	r2, [pc, #96]	@ (800137c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800131c:	6013      	str	r3, [r2, #0]
				CAN1_Queue_TX[8] =  (CAN1RX_Ext_ID_DATA >> 0)  & 0xFF;
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001326:	721a      	strb	r2, [r3, #8]
				CAN1_Queue_TX[9] = (CAN1RX_Ext_ID_DATA >> 8)  & 0xFF;
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001332:	725a      	strb	r2, [r3, #9]
				CAN1_Queue_TX[10] = (CAN1RX_Ext_ID_DATA >> 16) & 0xFF;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800133e:	729a      	strb	r2, [r3, #10]
				CAN1_Queue_TX[11] = (CAN1RX_Ext_ID_DATA >> 24) & 0xFF;
 8001340:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0e1b      	lsrs	r3, r3, #24
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800134a:	72da      	strb	r2, [r3, #11]
			}
			 // Attempt to send data to the queue in a non-blocking way
			osStatus_t status = osMessageQueuePut(CAN1RX_Data_QueueHandle, CAN1_Queue_TX, 0, 0);  // No timeout, no blocking
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	2200      	movs	r2, #0
 8001354:	4906      	ldr	r1, [pc, #24]	@ (8001370 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001356:	f004 fc61 	bl	8005c1c <osMessageQueuePut>
 800135a:	60f8      	str	r0, [r7, #12]
			  // Queue full, data not sent; could handle this or log it
			}


       }
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40006400 	.word	0x40006400
 8001368:	200000bc 	.word	0x200000bc
 800136c:	20000094 	.word	0x20000094
 8001370:	200000b0 	.word	0x200000b0
 8001374:	200000d0 	.word	0x200000d0
 8001378:	200000d4 	.word	0x200000d4
 800137c:	200000d8 	.word	0x200000d8
 8001380:	200001f0 	.word	0x200001f0

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f000 ff5c 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 f882 	bl	8001494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f000 fa6c 	bl	800186c <MX_GPIO_Init>
  MX_CAN_Init();
 8001394:	f000 f962 	bl	800165c <MX_CAN_Init>
  MX_ADC1_Init();
 8001398:	f000 f8d8 	bl	800154c <MX_ADC1_Init>
  MX_TIM1_Init();
 800139c:	f000 f994 	bl	80016c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013a0:	f000 fa16 	bl	80017d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(100);// just normal
 80013a4:	2064      	movs	r0, #100	@ 0x64
 80013a6:	f000 ff7f 	bl	80022a8 <HAL_Delay>
	//Timer PWM Start for uS delay generation
	HAL_TIM_Base_Start(&htim3);
 80013aa:	482a      	ldr	r0, [pc, #168]	@ (8001454 <main+0xd0>)
 80013ac:	f003 faec 	bl	8004988 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013b6:	4828      	ldr	r0, [pc, #160]	@ (8001458 <main+0xd4>)
 80013b8:	f002 fccf 	bl	8003d5a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80013bc:	2005      	movs	r0, #5
 80013be:	f000 ff73 	bl	80022a8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013c8:	4823      	ldr	r0, [pc, #140]	@ (8001458 <main+0xd4>)
 80013ca:	f002 fcc6 	bl	8003d5a <HAL_GPIO_WritePin>

	// Must have Delay
	Delay_Micro_Seconds(15);
 80013ce:	200f      	movs	r0, #15
 80013d0:	f7ff fefa 	bl	80011c8 <Delay_Micro_Seconds>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013da:	481f      	ldr	r0, [pc, #124]	@ (8001458 <main+0xd4>)
 80013dc:	f002 fcbd 	bl	8003d5a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80013e0:	2005      	movs	r0, #5
 80013e2:	f000 ff61 	bl	80022a8 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013e6:	2100      	movs	r1, #0
 80013e8:	481c      	ldr	r0, [pc, #112]	@ (800145c <main+0xd8>)
 80013ea:	f003 fbb9 	bl	8004b60 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);// PWM Direction PIN
 80013ee:	2201      	movs	r2, #1
 80013f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f4:	481a      	ldr	r0, [pc, #104]	@ (8001460 <main+0xdc>)
 80013f6:	f002 fcb0 	bl	8003d5a <HAL_GPIO_WritePin>
	//CAN Start
	HAL_CAN_Start(&hcan);
 80013fa:	481a      	ldr	r0, [pc, #104]	@ (8001464 <main+0xe0>)
 80013fc:	f001 fd93 	bl	8002f26 <HAL_CAN_Start>

	// Activate the notification
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001400:	2102      	movs	r1, #2
 8001402:	4818      	ldr	r0, [pc, #96]	@ (8001464 <main+0xe0>)
 8001404:	f001 ffe6 	bl	80033d4 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001408:	f004 faa0 	bl	800594c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CAN1RX_Data_Queue */
  CAN1RX_Data_QueueHandle = osMessageQueueNew (20, sizeof(CAN1_Queue_TX), &CAN1RX_Data_Queue_attributes);
 800140c:	4a16      	ldr	r2, [pc, #88]	@ (8001468 <main+0xe4>)
 800140e:	210c      	movs	r1, #12
 8001410:	2014      	movs	r0, #20
 8001412:	f004 fb90 	bl	8005b36 <osMessageQueueNew>
 8001416:	4603      	mov	r3, r0
 8001418:	4a14      	ldr	r2, [pc, #80]	@ (800146c <main+0xe8>)
 800141a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Read_Sensors */
  Read_SensorsHandle = osThreadNew(Read_Sensors_Func, NULL, &Read_Sensors_attributes);
 800141c:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <main+0xec>)
 800141e:	2100      	movs	r1, #0
 8001420:	4814      	ldr	r0, [pc, #80]	@ (8001474 <main+0xf0>)
 8001422:	f004 fadb 	bl	80059dc <osThreadNew>
 8001426:	4603      	mov	r3, r0
 8001428:	4a13      	ldr	r2, [pc, #76]	@ (8001478 <main+0xf4>)
 800142a:	6013      	str	r3, [r2, #0]

  /* creation of CANRX_Data_Proc */
  CANRX_Data_ProcHandle = osThreadNew(CANRX_Data_Process_Func, NULL, &CANRX_Data_Proc_attributes);
 800142c:	4a13      	ldr	r2, [pc, #76]	@ (800147c <main+0xf8>)
 800142e:	2100      	movs	r1, #0
 8001430:	4813      	ldr	r0, [pc, #76]	@ (8001480 <main+0xfc>)
 8001432:	f004 fad3 	bl	80059dc <osThreadNew>
 8001436:	4603      	mov	r3, r0
 8001438:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <main+0x100>)
 800143a:	6013      	str	r3, [r2, #0]

  /* creation of Decision_Making */
  Decision_MakingHandle = osThreadNew(Decision_Making_Function, NULL, &Decision_Making_attributes);
 800143c:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <main+0x104>)
 800143e:	2100      	movs	r1, #0
 8001440:	4812      	ldr	r0, [pc, #72]	@ (800148c <main+0x108>)
 8001442:	f004 facb 	bl	80059dc <osThreadNew>
 8001446:	4603      	mov	r3, r0
 8001448:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <main+0x10c>)
 800144a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800144c:	f004 faa0 	bl	8005990 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <main+0xcc>
 8001454:	2000019c 	.word	0x2000019c
 8001458:	40010c00 	.word	0x40010c00
 800145c:	20000154 	.word	0x20000154
 8001460:	40010800 	.word	0x40010800
 8001464:	2000012c 	.word	0x2000012c
 8001468:	08008a64 	.word	0x08008a64
 800146c:	200001f0 	.word	0x200001f0
 8001470:	080089f8 	.word	0x080089f8
 8001474:	080019ad 	.word	0x080019ad
 8001478:	200001e4 	.word	0x200001e4
 800147c:	08008a1c 	.word	0x08008a1c
 8001480:	08001bdd 	.word	0x08001bdd
 8001484:	200001e8 	.word	0x200001e8
 8001488:	08008a40 	.word	0x08008a40
 800148c:	08001c99 	.word	0x08001c99
 8001490:	200001ec 	.word	0x200001ec

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b094      	sub	sp, #80	@ 0x50
 8001498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800149e:	2228      	movs	r2, #40	@ 0x28
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f007 f980 	bl	80087a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80014ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d8:	2302      	movs	r3, #2
 80014da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fc4d 	bl	8003d8c <HAL_RCC_OscConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80014f8:	f000 fc7a 	bl	8001df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fc:	230f      	movs	r3, #15
 80014fe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800150c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	2102      	movs	r1, #2
 8001518:	4618      	mov	r0, r3
 800151a:	f002 feb9 	bl	8004290 <HAL_RCC_ClockConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001524:	f000 fc64 	bl	8001df0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001528:	2302      	movs	r3, #2
 800152a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800152c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001530:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	4618      	mov	r0, r3
 8001536:	f003 f86b 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001540:	f000 fc56 	bl	8001df0 <Error_Handler>
  }
}
 8001544:	bf00      	nop
 8001546:	3750      	adds	r7, #80	@ 0x50
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08e      	sub	sp, #56	@ 0x38
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001552:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800155e:	4b3c      	ldr	r3, [pc, #240]	@ (8001650 <MX_ADC1_Init+0x104>)
 8001560:	4a3c      	ldr	r2, [pc, #240]	@ (8001654 <MX_ADC1_Init+0x108>)
 8001562:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001564:	4b3a      	ldr	r3, [pc, #232]	@ (8001650 <MX_ADC1_Init+0x104>)
 8001566:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800156a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800156c:	4b38      	ldr	r3, [pc, #224]	@ (8001650 <MX_ADC1_Init+0x104>)
 800156e:	2201      	movs	r2, #1
 8001570:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001572:	4b37      	ldr	r3, [pc, #220]	@ (8001650 <MX_ADC1_Init+0x104>)
 8001574:	2200      	movs	r2, #0
 8001576:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001578:	4b35      	ldr	r3, [pc, #212]	@ (8001650 <MX_ADC1_Init+0x104>)
 800157a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800157e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001580:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <MX_ADC1_Init+0x104>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001586:	4b32      	ldr	r3, [pc, #200]	@ (8001650 <MX_ADC1_Init+0x104>)
 8001588:	2201      	movs	r2, #1
 800158a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800158c:	4830      	ldr	r0, [pc, #192]	@ (8001650 <MX_ADC1_Init+0x104>)
 800158e:	f000 feaf 	bl	80022f0 <HAL_ADC_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0x50>
  {
    Error_Handler();
 8001598:	f000 fc2a 	bl	8001df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a0:	2301      	movs	r3, #1
 80015a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80015a4:	2302      	movs	r3, #2
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ac:	4619      	mov	r1, r3
 80015ae:	4828      	ldr	r0, [pc, #160]	@ (8001650 <MX_ADC1_Init+0x104>)
 80015b0:	f001 f962 	bl	8002878 <HAL_ADC_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80015ba:	f000 fc19 	bl	8001df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015be:	2301      	movs	r3, #1
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ca:	4619      	mov	r1, r3
 80015cc:	4820      	ldr	r0, [pc, #128]	@ (8001650 <MX_ADC1_Init+0x104>)
 80015ce:	f001 f953 	bl	8002878 <HAL_ADC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015d8:	f000 fc0a 	bl	8001df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015e0:	2303      	movs	r3, #3
 80015e2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015e8:	4619      	mov	r1, r3
 80015ea:	4819      	ldr	r0, [pc, #100]	@ (8001650 <MX_ADC1_Init+0x104>)
 80015ec:	f001 f944 	bl	8002878 <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80015f6:	f000 fbfb 	bl	8001df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015fa:	2304      	movs	r3, #4
 80015fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001602:	4619      	mov	r1, r3
 8001604:	4812      	ldr	r0, [pc, #72]	@ (8001650 <MX_ADC1_Init+0x104>)
 8001606:	f001 f937 	bl	8002878 <HAL_ADC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001610:	f000 fbee 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  CAN_FilterTypeDef can1FilterConfig;
  can1FilterConfig.FilterBank = 0;                           // Bank 0 for CAN1
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
  can1FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  can1FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800161c:	2301      	movs	r3, #1
 800161e:	623b      	str	r3, [r7, #32]
  can1FilterConfig.FilterIdHigh = 0x0000;
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
  can1FilterConfig.FilterIdLow = 0x0000;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  can1FilterConfig.FilterMaskIdHigh = 0x0000;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  can1FilterConfig.FilterMaskIdLow = 0x0000;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  can1FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;  // ⬅️ FIFO0 for CAN1
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  can1FilterConfig.FilterActivation = ENABLE;
 8001634:	2301      	movs	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  can1FilterConfig.SlaveStartFilterBank = 0;           // doesn't matter in single can controllers
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_CAN_ConfigFilter(&hcan, &can1FilterConfig);
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_ADC1_Init+0x10c>)
 8001642:	f001 fba7 	bl	8002d94 <HAL_CAN_ConfigFilter>



  /* USER CODE END ADC1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3738      	adds	r7, #56	@ 0x38
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200000fc 	.word	0x200000fc
 8001654:	40012400 	.word	0x40012400
 8001658:	2000012c 	.word	0x2000012c

0800165c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001660:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <MX_CAN_Init+0x64>)
 8001662:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <MX_CAN_Init+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <MX_CAN_Init+0x64>)
 8001668:	2204      	movs	r2, #4
 800166a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800166c:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_CAN_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <MX_CAN_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_CAN_Init+0x64>)
 800167a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800167e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_CAN_Init+0x64>)
 8001682:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001686:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <MX_CAN_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_CAN_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <MX_CAN_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_CAN_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <MX_CAN_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_CAN_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <MX_CAN_Init+0x64>)
 80016ae:	f001 fa76 	bl	8002b9e <HAL_CAN_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80016b8:	f000 fb9a 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000012c 	.word	0x2000012c
 80016c4:	40006400 	.word	0x40006400

080016c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b092      	sub	sp, #72	@ 0x48
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2220      	movs	r2, #32
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f007 f858 	bl	80087a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016f8:	4b33      	ldr	r3, [pc, #204]	@ (80017c8 <MX_TIM1_Init+0x100>)
 80016fa:	4a34      	ldr	r2, [pc, #208]	@ (80017cc <MX_TIM1_Init+0x104>)
 80016fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80016fe:	4b32      	ldr	r3, [pc, #200]	@ (80017c8 <MX_TIM1_Init+0x100>)
 8001700:	2247      	movs	r2, #71	@ 0x47
 8001702:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <MX_TIM1_Init+0x100>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 800170a:	4b2f      	ldr	r3, [pc, #188]	@ (80017c8 <MX_TIM1_Init+0x100>)
 800170c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001710:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b2d      	ldr	r3, [pc, #180]	@ (80017c8 <MX_TIM1_Init+0x100>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001718:	4b2b      	ldr	r3, [pc, #172]	@ (80017c8 <MX_TIM1_Init+0x100>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171e:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <MX_TIM1_Init+0x100>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001724:	4828      	ldr	r0, [pc, #160]	@ (80017c8 <MX_TIM1_Init+0x100>)
 8001726:	f003 f9cb 	bl	8004ac0 <HAL_TIM_PWM_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001730:	f000 fb5e 	bl	8001df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800173c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001740:	4619      	mov	r1, r3
 8001742:	4821      	ldr	r0, [pc, #132]	@ (80017c8 <MX_TIM1_Init+0x100>)
 8001744:	f003 fffc 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800174e:	f000 fb4f 	bl	8001df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001752:	2360      	movs	r3, #96	@ 0x60
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800175e:	2300      	movs	r3, #0
 8001760:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800176e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001772:	2200      	movs	r2, #0
 8001774:	4619      	mov	r1, r3
 8001776:	4814      	ldr	r0, [pc, #80]	@ (80017c8 <MX_TIM1_Init+0x100>)
 8001778:	f003 fb84 	bl	8004e84 <HAL_TIM_PWM_ConfigChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001782:	f000 fb35 	bl	8001df0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800179a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800179e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	@ (80017c8 <MX_TIM1_Init+0x100>)
 80017aa:	f004 f827 	bl	80057fc <HAL_TIMEx_ConfigBreakDeadTime>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80017b4:	f000 fb1c 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <MX_TIM1_Init+0x100>)
 80017ba:	f000 fc37 	bl	800202c <HAL_TIM_MspPostInit>

}
 80017be:	bf00      	nop
 80017c0:	3748      	adds	r7, #72	@ 0x48
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000154 	.word	0x20000154
 80017cc:	40012c00 	.word	0x40012c00

080017d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	463b      	mov	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <MX_TIM3_Init+0x94>)
 80017ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001868 <MX_TIM3_Init+0x98>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <MX_TIM3_Init+0x94>)
 80017f4:	2247      	movs	r2, #71	@ 0x47
 80017f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <MX_TIM3_Init+0x94>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017fe:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <MX_TIM3_Init+0x94>)
 8001800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001804:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <MX_TIM3_Init+0x94>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <MX_TIM3_Init+0x94>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001812:	4814      	ldr	r0, [pc, #80]	@ (8001864 <MX_TIM3_Init+0x94>)
 8001814:	f003 f868 	bl	80048e8 <HAL_TIM_Base_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800181e:	f000 fae7 	bl	8001df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001826:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	4619      	mov	r1, r3
 800182e:	480d      	ldr	r0, [pc, #52]	@ (8001864 <MX_TIM3_Init+0x94>)
 8001830:	f003 fbea 	bl	8005008 <HAL_TIM_ConfigClockSource>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800183a:	f000 fad9 	bl	8001df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001846:	463b      	mov	r3, r7
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	@ (8001864 <MX_TIM3_Init+0x94>)
 800184c:	f003 ff78 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001856:	f000 facb 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000019c 	.word	0x2000019c
 8001868:	40000400 	.word	0x40000400

0800186c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001880:	4b46      	ldr	r3, [pc, #280]	@ (800199c <MX_GPIO_Init+0x130>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a45      	ldr	r2, [pc, #276]	@ (800199c <MX_GPIO_Init+0x130>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b43      	ldr	r3, [pc, #268]	@ (800199c <MX_GPIO_Init+0x130>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001898:	4b40      	ldr	r3, [pc, #256]	@ (800199c <MX_GPIO_Init+0x130>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a3f      	ldr	r2, [pc, #252]	@ (800199c <MX_GPIO_Init+0x130>)
 800189e:	f043 0320 	orr.w	r3, r3, #32
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b3d      	ldr	r3, [pc, #244]	@ (800199c <MX_GPIO_Init+0x130>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	4b3a      	ldr	r3, [pc, #232]	@ (800199c <MX_GPIO_Init+0x130>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a39      	ldr	r2, [pc, #228]	@ (800199c <MX_GPIO_Init+0x130>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b37      	ldr	r3, [pc, #220]	@ (800199c <MX_GPIO_Init+0x130>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	4b34      	ldr	r3, [pc, #208]	@ (800199c <MX_GPIO_Init+0x130>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a33      	ldr	r2, [pc, #204]	@ (800199c <MX_GPIO_Init+0x130>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b31      	ldr	r3, [pc, #196]	@ (800199c <MX_GPIO_Init+0x130>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018e6:	482e      	ldr	r0, [pc, #184]	@ (80019a0 <MX_GPIO_Init+0x134>)
 80018e8:	f002 fa37 	bl	8003d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018f2:	482c      	ldr	r0, [pc, #176]	@ (80019a4 <MX_GPIO_Init+0x138>)
 80018f4:	f002 fa31 	bl	8003d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018fe:	482a      	ldr	r0, [pc, #168]	@ (80019a8 <MX_GPIO_Init+0x13c>)
 8001900:	f002 fa2b 	bl	8003d5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2302      	movs	r3, #2
 8001914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	4619      	mov	r1, r3
 800191c:	4820      	ldr	r0, [pc, #128]	@ (80019a0 <MX_GPIO_Init+0x134>)
 800191e:	f002 f881 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2302      	movs	r3, #2
 8001932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4619      	mov	r1, r3
 800193a:	481a      	ldr	r0, [pc, #104]	@ (80019a4 <MX_GPIO_Init+0x138>)
 800193c:	f002 f872 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001940:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4619      	mov	r1, r3
 8001954:	4813      	ldr	r0, [pc, #76]	@ (80019a4 <MX_GPIO_Init+0x138>)
 8001956:	f002 f865 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800195a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800195e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2302      	movs	r3, #2
 800196a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <MX_GPIO_Init+0x13c>)
 8001974:	f002 f856 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001978:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4619      	mov	r1, r3
 800198c:	4806      	ldr	r0, [pc, #24]	@ (80019a8 <MX_GPIO_Init+0x13c>)
 800198e:	f002 f849 	bl	8003a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001992:	bf00      	nop
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	40011000 	.word	0x40011000
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40010800 	.word	0x40010800

080019ac <Read_Sensors_Func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_Sensors_Func */
void Read_Sensors_Func(void *argument)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	//All ADC Read
	ADC_Auto_Unhitch_Read(ADC_VAL);
 80019b4:	4877      	ldr	r0, [pc, #476]	@ (8001b94 <Read_Sensors_Func+0x1e8>)
 80019b6:	f7ff faf5 	bl	8000fa4 <ADC_Auto_Unhitch_Read>
	ADC_Current_Sensor_1_Read(ADC_VAL);
 80019ba:	4876      	ldr	r0, [pc, #472]	@ (8001b94 <Read_Sensors_Func+0x1e8>)
 80019bc:	f7ff fb10 	bl	8000fe0 <ADC_Current_Sensor_1_Read>
	ADC_Current_Sensor_2_Read(ADC_VAL);
 80019c0:	4874      	ldr	r0, [pc, #464]	@ (8001b94 <Read_Sensors_Func+0x1e8>)
 80019c2:	f7ff fb31 	bl	8001028 <ADC_Current_Sensor_2_Read>
	ADC_24V_Read(ADC_VAL);
 80019c6:	4873      	ldr	r0, [pc, #460]	@ (8001b94 <Read_Sensors_Func+0x1e8>)
 80019c8:	f7ff fb54 	bl	8001074 <ADC_24V_Read>

	// Read ISEN Current
	ISEN_Current = Read_ISEN_Current(ADC_VAL);
 80019cc:	4871      	ldr	r0, [pc, #452]	@ (8001b94 <Read_Sensors_Func+0x1e8>)
 80019ce:	f7ff fb73 	bl	80010b8 <Read_ISEN_Current>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a70      	ldr	r2, [pc, #448]	@ (8001b98 <Read_Sensors_Func+0x1ec>)
 80019d6:	6013      	str	r3, [r2, #0]

	// Read 24V
	VSEN_24V = Read_VSEN_24V(ADC_VAL);
 80019d8:	486e      	ldr	r0, [pc, #440]	@ (8001b94 <Read_Sensors_Func+0x1e8>)
 80019da:	f7ff fbbd 	bl	8001158 <Read_VSEN_24V>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b9c <Read_Sensors_Func+0x1f0>)
 80019e2:	6013      	str	r3, [r2, #0]


	// Convert for CANTX fact *10
	CANTX_ISEN = ISEN_Current *10;
 80019e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001b98 <Read_Sensors_Func+0x1ec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	496d      	ldr	r1, [pc, #436]	@ (8001ba0 <Read_Sensors_Func+0x1f4>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f87c 	bl	8000ae8 <__aeabi_fmul>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b6b      	ldr	r3, [pc, #428]	@ (8001ba4 <Read_Sensors_Func+0x1f8>)
 80019f6:	601a      	str	r2, [r3, #0]

	// Convert for CANTX fact *10
	CANTX_VSEN_24V = VSEN_24V *10;
 80019f8:	4b68      	ldr	r3, [pc, #416]	@ (8001b9c <Read_Sensors_Func+0x1f0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4968      	ldr	r1, [pc, #416]	@ (8001ba0 <Read_Sensors_Func+0x1f4>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f872 	bl	8000ae8 <__aeabi_fmul>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b67      	ldr	r3, [pc, #412]	@ (8001ba8 <Read_Sensors_Func+0x1fc>)
 8001a0a:	601a      	str	r2, [r3, #0]
	//add scal factor 10

	CAN1TX_DATA[0] = (uint8_t)CANTX_ISEN ;
 8001a0c:	4b65      	ldr	r3, [pc, #404]	@ (8001ba4 <Read_Sensors_Func+0x1f8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fa2f 	bl	8000e74 <__aeabi_f2uiz>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b64      	ldr	r3, [pc, #400]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001a1c:	701a      	strb	r2, [r3, #0]
	CAN1TX_DATA[1] = ADC_VAL[1];
 8001a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b94 <Read_Sensors_Func+0x1e8>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b61      	ldr	r3, [pc, #388]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001a26:	705a      	strb	r2, [r3, #1]
	CAN1TX_DATA[2] = ADC_VAL[2];
 8001a28:	4b5a      	ldr	r3, [pc, #360]	@ (8001b94 <Read_Sensors_Func+0x1e8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001a30:	709a      	strb	r2, [r3, #2]
	CAN1TX_DATA[3] = (uint8_t)CANTX_VSEN_24V;
 8001a32:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba8 <Read_Sensors_Func+0x1fc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fa1c 	bl	8000e74 <__aeabi_f2uiz>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b5a      	ldr	r3, [pc, #360]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001a42:	70da      	strb	r2, [r3, #3]


	// ALL GPIO READ
	DIGITAL_SENSE1 = HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_15);
 8001a44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a48:	4859      	ldr	r0, [pc, #356]	@ (8001bb0 <Read_Sensors_Func+0x204>)
 8001a4a:	f002 f96f 	bl	8003d2c <HAL_GPIO_ReadPin>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b58      	ldr	r3, [pc, #352]	@ (8001bb4 <Read_Sensors_Func+0x208>)
 8001a54:	701a      	strb	r2, [r3, #0]
	DIGITAL_SENSE2 = HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_14);
 8001a56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a5a:	4855      	ldr	r0, [pc, #340]	@ (8001bb0 <Read_Sensors_Func+0x204>)
 8001a5c:	f002 f966 	bl	8003d2c <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b54      	ldr	r3, [pc, #336]	@ (8001bb8 <Read_Sensors_Func+0x20c>)
 8001a66:	701a      	strb	r2, [r3, #0]
	nFAULT         = HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_10);
 8001a68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a6c:	4853      	ldr	r0, [pc, #332]	@ (8001bbc <Read_Sensors_Func+0x210>)
 8001a6e:	f002 f95d 	bl	8003d2c <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b52      	ldr	r3, [pc, #328]	@ (8001bc0 <Read_Sensors_Func+0x214>)
 8001a78:	701a      	strb	r2, [r3, #0]


	if(DIGITAL_SENSE1 == 0)  {
 8001a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb4 <Read_Sensors_Func+0x208>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <Read_Sensors_Func+0xea>
		//set bit 0 = 0
		CAN1TX_DATA[4] &= ~(1 << 0);
 8001a84:	4b49      	ldr	r3, [pc, #292]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	4b46      	ldr	r3, [pc, #280]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001a92:	711a      	strb	r2, [r3, #4]
 8001a94:	e007      	b.n	8001aa6 <Read_Sensors_Func+0xfa>
	}else {
		//set bit 0 = 1
		CAN1TX_DATA[4] |=  (1 << 0);
 8001a96:	4b45      	ldr	r3, [pc, #276]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001a98:	791b      	ldrb	r3, [r3, #4]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b42      	ldr	r3, [pc, #264]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001aa4:	711a      	strb	r2, [r3, #4]
	}

	if(DIGITAL_SENSE2 == 0)  {
 8001aa6:	4b44      	ldr	r3, [pc, #272]	@ (8001bb8 <Read_Sensors_Func+0x20c>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d108      	bne.n	8001ac2 <Read_Sensors_Func+0x116>
		//set bit 1 = 0
		CAN1TX_DATA[4] &= ~(1 << 1);
 8001ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f023 0302 	bic.w	r3, r3, #2
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001abe:	711a      	strb	r2, [r3, #4]
 8001ac0:	e007      	b.n	8001ad2 <Read_Sensors_Func+0x126>
	}else {
		//set bit 1 = 1
		CAN1TX_DATA[4] |=  (1 << 1);
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001ac4:	791b      	ldrb	r3, [r3, #4]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b37      	ldr	r3, [pc, #220]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001ad0:	711a      	strb	r2, [r3, #4]
	}




	CAN1TX_DATA[5] = AutoUnhitch_PWM_DC_Percentage; //PWM feedback in 100%
 8001ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc4 <Read_Sensors_Func+0x218>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b34      	ldr	r3, [pc, #208]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001ada:	715a      	strb	r2, [r3, #5]

    //set bit 0 for ISEN ERROR *************************
	if(ISEN_Error == 0)  {
 8001adc:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc8 <Read_Sensors_Func+0x21c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f083 0301 	eor.w	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <Read_Sensors_Func+0x152>
		//set bit 0 = 0
		CAN1TX_DATA[6] &= ~(1 << 0);
 8001aec:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001aee:	799b      	ldrb	r3, [r3, #6]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b2c      	ldr	r3, [pc, #176]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001afa:	719a      	strb	r2, [r3, #6]
 8001afc:	e007      	b.n	8001b0e <Read_Sensors_Func+0x162>
	}else {
		//set bit 0 = 1
		CAN1TX_DATA[6] |=  (1 << 0);
 8001afe:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b00:	799b      	ldrb	r3, [r3, #6]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b0c:	719a      	strb	r2, [r3, #6]
	}

	// set bit 1 for nFault         ********************************
	if(nFAULT == 0)  {
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <Read_Sensors_Func+0x214>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <Read_Sensors_Func+0x17e>
		//set bit 1 = 0
		CAN1TX_DATA[6] &= ~(1 << 1);
 8001b18:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b1a:	799b      	ldrb	r3, [r3, #6]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f023 0302 	bic.w	r3, r3, #2
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b26:	719a      	strb	r2, [r3, #6]
 8001b28:	e007      	b.n	8001b3a <Read_Sensors_Func+0x18e>
	}else {
		//set bit 1 = 1
		CAN1TX_DATA[6] |=  (1 << 1);
 8001b2a:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b2c:	799b      	ldrb	r3, [r3, #6]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b38:	719a      	strb	r2, [r3, #6]
	}

	//set bit 2 for autounhitch direction  ***********************************
	if(DIR_AUTOUNHITCH == 0)  {
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <Read_Sensors_Func+0x220>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f083 0301 	eor.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <Read_Sensors_Func+0x1b0>
		//set bit 1 = 0
		CAN1TX_DATA[6] &= ~(1 << 2);
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b4c:	799b      	ldrb	r3, [r3, #6]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b58:	719a      	strb	r2, [r3, #6]
 8001b5a:	e007      	b.n	8001b6c <Read_Sensors_Func+0x1c0>
	}else {
		//set bit 1 = 1
		CAN1TX_DATA[6] |=  (1 << 2);
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b5e:	799b      	ldrb	r3, [r3, #6]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b6a:	719a      	strb	r2, [r3, #6]
	}

	CAN1TX_DATA[7] = 0;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	71da      	strb	r2, [r3, #7]

    // CAN Transmit
	CAN_TransmitMessage_Ext_ID(&hcan, 0x33333, CAN1TX_DATA, 8);
 8001b72:	2308      	movs	r3, #8
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <Read_Sensors_Func+0x200>)
 8001b76:	4916      	ldr	r1, [pc, #88]	@ (8001bd0 <Read_Sensors_Func+0x224>)
 8001b78:	4816      	ldr	r0, [pc, #88]	@ (8001bd4 <Read_Sensors_Func+0x228>)
 8001b7a:	f7ff fb3d 	bl	80011f8 <CAN_TransmitMessage_Ext_ID>

	aa++;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <Read_Sensors_Func+0x22c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <Read_Sensors_Func+0x22c>)
 8001b8a:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 8001b8c:	2064      	movs	r0, #100	@ 0x64
 8001b8e:	f003 ffb7 	bl	8005b00 <osDelay>
  {
 8001b92:	e70f      	b.n	80019b4 <Read_Sensors_Func+0x8>
 8001b94:	20000084 	.word	0x20000084
 8001b98:	200000e8 	.word	0x200000e8
 8001b9c:	200000f0 	.word	0x200000f0
 8001ba0:	41200000 	.word	0x41200000
 8001ba4:	200000ec 	.word	0x200000ec
 8001ba8:	200000f4 	.word	0x200000f4
 8001bac:	200000c4 	.word	0x200000c4
 8001bb0:	40010c00 	.word	0x40010c00
 8001bb4:	200000dc 	.word	0x200000dc
 8001bb8:	200000dd 	.word	0x200000dd
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	200000de 	.word	0x200000de
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	200000e4 	.word	0x200000e4
 8001bcc:	200000f8 	.word	0x200000f8
 8001bd0:	00033333 	.word	0x00033333
 8001bd4:	2000012c 	.word	0x2000012c
 8001bd8:	20000080 	.word	0x20000080

08001bdc <CANRX_Data_Process_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CANRX_Data_Process_Func */
void CANRX_Data_Process_Func(void *argument)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

		// Wait for and receive data from the queue
		Status_CAN1 = osMessageQueueGet(CAN1RX_Data_QueueHandle, Received_CAN1RX, NULL, osWaitForever);
 8001be4:	4b24      	ldr	r3, [pc, #144]	@ (8001c78 <CANRX_Data_Process_Func+0x9c>)
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	f107 0108 	add.w	r1, r7, #8
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f004 f873 	bl	8005cdc <osMessageQueueGet>
 8001bf6:	6178      	str	r0, [r7, #20]
		if (Status_CAN1 == osOK)  {
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d131      	bne.n	8001c62 <CANRX_Data_Process_Func+0x86>
			// Process Received_CAN1RX data
			// Indicate processing by toggling an LED, etc.

			// Reconstruct uint32_t from bb (Little-endian format)
			CAN1RX_ID_Queue = 	( Received_CAN1RX[8]  <<  0 ) |
 8001bfe:	7c3b      	ldrb	r3, [r7, #16]
 8001c00:	461a      	mov	r2, r3
			( Received_CAN1RX[9]  <<  8 ) |
 8001c02:	7c7b      	ldrb	r3, [r7, #17]
 8001c04:	021b      	lsls	r3, r3, #8
			CAN1RX_ID_Queue = 	( Received_CAN1RX[8]  <<  0 ) |
 8001c06:	431a      	orrs	r2, r3
			( Received_CAN1RX[10] << 16 ) |
 8001c08:	7cbb      	ldrb	r3, [r7, #18]
 8001c0a:	041b      	lsls	r3, r3, #16
			( Received_CAN1RX[9]  <<  8 ) |
 8001c0c:	431a      	orrs	r2, r3
			( Received_CAN1RX[11] << 24 );
 8001c0e:	7cfb      	ldrb	r3, [r7, #19]
 8001c10:	061b      	lsls	r3, r3, #24
			( Received_CAN1RX[10] << 16 ) |
 8001c12:	4313      	orrs	r3, r2
 8001c14:	461a      	mov	r2, r3
			CAN1RX_ID_Queue = 	( Received_CAN1RX[8]  <<  0 ) |
 8001c16:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <CANRX_Data_Process_Func+0xa0>)
 8001c18:	601a      	str	r2, [r3, #0]

			switch (CAN1RX_ID_Queue)
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <CANRX_Data_Process_Func+0xa0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a18      	ldr	r2, [pc, #96]	@ (8001c80 <CANRX_Data_Process_Func+0xa4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d11b      	bne.n	8001c5c <CANRX_Data_Process_Func+0x80>
			{
				case Auto_Unhitch_RX_CANID:
					AutoUnhitch_PWM_DC_Percentage = Received_CAN1RX[0];
 8001c24:	7a3a      	ldrb	r2, [r7, #8]
 8001c26:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <CANRX_Data_Process_Func+0xa8>)
 8001c28:	701a      	strb	r2, [r3, #0]

					if(Received_CAN1RX[1] == 1 )	{
 8001c2a:	7a7b      	ldrb	r3, [r7, #9]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d108      	bne.n	8001c42 <CANRX_Data_Process_Func+0x66>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);// PWM Direction PIN
 8001c30:	2201      	movs	r2, #1
 8001c32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c36:	4814      	ldr	r0, [pc, #80]	@ (8001c88 <CANRX_Data_Process_Func+0xac>)
 8001c38:	f002 f88f 	bl	8003d5a <HAL_GPIO_WritePin>
						DIR_AUTOUNHITCH = 1;
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <CANRX_Data_Process_Func+0xb0>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
					}
					if(Received_CAN1RX[1] == 0 )	{
 8001c42:	7a7b      	ldrb	r3, [r7, #9]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10b      	bne.n	8001c60 <CANRX_Data_Process_Func+0x84>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);// PWM Direction PIN
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c4e:	480e      	ldr	r0, [pc, #56]	@ (8001c88 <CANRX_Data_Process_Func+0xac>)
 8001c50:	f002 f883 	bl	8003d5a <HAL_GPIO_WritePin>
						DIR_AUTOUNHITCH =0;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <CANRX_Data_Process_Func+0xb0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
					}


					break;
 8001c5a:	e001      	b.n	8001c60 <CANRX_Data_Process_Func+0x84>


				default:
					//
					break;
 8001c5c:	bf00      	nop
 8001c5e:	e000      	b.n	8001c62 <CANRX_Data_Process_Func+0x86>
					break;
 8001c60:	bf00      	nop
			}
		}
		bb++;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <CANRX_Data_Process_Func+0xb4>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <CANRX_Data_Process_Func+0xb4>)
 8001c6e:	701a      	strb	r2, [r3, #0]
        osDelay(1);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f003 ff45 	bl	8005b00 <osDelay>
		Status_CAN1 = osMessageQueueGet(CAN1RX_Data_QueueHandle, Received_CAN1RX, NULL, osWaitForever);
 8001c76:	e7b5      	b.n	8001be4 <CANRX_Data_Process_Func+0x8>
 8001c78:	200001f0 	.word	0x200001f0
 8001c7c:	200000cc 	.word	0x200000cc
 8001c80:	00011155 	.word	0x00011155
 8001c84:	20000000 	.word	0x20000000
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	200000f8 	.word	0x200000f8
 8001c90:	20000081 	.word	0x20000081
 8001c94:	00000000 	.word	0x00000000

08001c98 <Decision_Making_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Decision_Making_Function */
void Decision_Making_Function(void *argument)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Decision_Making_Function */
  /* Infinite loop */
  for(;;)
  {
		if (AutoUnhitch_PWM_DC_Percentage <= 100)	{ // No need to check >= 0, since it's uint8_t
 8001ca0:	4b43      	ldr	r3, [pc, #268]	@ (8001db0 <Decision_Making_Function+0x118>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b64      	cmp	r3, #100	@ 0x64
 8001ca8:	d814      	bhi.n	8001cd4 <Decision_Making_Function+0x3c>
			if(ISEN_Error == false)	{
 8001caa:	4b42      	ldr	r3, [pc, #264]	@ (8001db4 <Decision_Making_Function+0x11c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <Decision_Making_Function+0x3c>
				Duty_Cycle1 = ((uint32_t) AutoUnhitch_PWM_DC_Percentage) * PWM_SCALE;
 8001cba:	4b3d      	ldr	r3, [pc, #244]	@ (8001db0 <Decision_Making_Function+0x118>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8001db8 <Decision_Making_Function+0x120>)
 8001cca:	6013      	str	r3, [r2, #0]
				TIM1->CCR1 = Duty_Cycle1;
 8001ccc:	4a3b      	ldr	r2, [pc, #236]	@ (8001dbc <Decision_Making_Function+0x124>)
 8001cce:	4b3a      	ldr	r3, [pc, #232]	@ (8001db8 <Decision_Making_Function+0x120>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6353      	str	r3, [r2, #52]	@ 0x34
			}

		}
		//		 // current above 0.3 A
		if(ISEN_Current > 0.4 )	{
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc0 <Decision_Making_Function+0x128>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fcc7 	bl	800066c <__aeabi_f2d>
 8001cde:	a330      	add	r3, pc, #192	@ (adr r3, 8001da0 <Decision_Making_Function+0x108>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	f7fe fd98 	bl	8000818 <__aeabi_dcmpgt>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d047      	beq.n	8001d7e <Decision_Making_Function+0xe6>

			if(ISEN_200ms_Timeout == false)  {
 8001cee:	4b35      	ldr	r3, [pc, #212]	@ (8001dc4 <Decision_Making_Function+0x12c>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f083 0301 	eor.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d025      	beq.n	8001d4a <Decision_Making_Function+0xb2>
				// check 200 ms in loop
				for(int i = 0 ; i<200;i++)	{
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e01c      	b.n	8001d3e <Decision_Making_Function+0xa6>
				// 5A above then cutoff
				if(ISEN_Current > 4.7)	{
 8001d04:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <Decision_Making_Function+0x128>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fcaf 	bl	800066c <__aeabi_f2d>
 8001d0e:	a326      	add	r3, pc, #152	@ (adr r3, 8001da8 <Decision_Making_Function+0x110>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fd80 	bl	8000818 <__aeabi_dcmpgt>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <Decision_Making_Function+0x94>
				TIM1->CCR1 = 0;
 8001d1e:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <Decision_Making_Function+0x124>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	635a      	str	r2, [r3, #52]	@ 0x34
				// error code
				ISEN_Error = true;
 8001d24:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <Decision_Making_Function+0x11c>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e002      	b.n	8001d32 <Decision_Making_Function+0x9a>
				}
				else{
				ISEN_Error = false;
 8001d2c:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <Decision_Making_Function+0x11c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
				}
				osDelay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f003 fee4 	bl	8005b00 <osDelay>
				for(int i = 0 ; i<200;i++)	{
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2bc7      	cmp	r3, #199	@ 0xc7
 8001d42:	dddf      	ble.n	8001d04 <Decision_Making_Function+0x6c>
				}
				ISEN_200ms_Timeout = true;
 8001d44:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <Decision_Making_Function+0x12c>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
			}

			//after 200 ms
			// 2A above then cutoff
			if(ISEN_Current > 2.0 && ISEN_200ms_Timeout == true)	{
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <Decision_Making_Function+0x128>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f884 	bl	8000e60 <__aeabi_fcmpgt>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <Decision_Making_Function+0xde>
 8001d5e:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <Decision_Making_Function+0x12c>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <Decision_Making_Function+0xde>
				TIM1->CCR1 = 0;
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <Decision_Making_Function+0x124>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	635a      	str	r2, [r3, #52]	@ 0x34
				// error code
				ISEN_Error = true;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <Decision_Making_Function+0x11c>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e006      	b.n	8001d84 <Decision_Making_Function+0xec>
			}
			else {
				ISEN_Error = false;
 8001d76:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <Decision_Making_Function+0x11c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e002      	b.n	8001d84 <Decision_Making_Function+0xec>
			}
		}
		else {
			// when no current flow then the flag false
			ISEN_200ms_Timeout = false;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <Decision_Making_Function+0x12c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
		}

		cc++;
 8001d84:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <Decision_Making_Function+0x130>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <Decision_Making_Function+0x130>)
 8001d90:	701a      	strb	r2, [r3, #0]
		osDelay(1);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f003 feb4 	bl	8005b00 <osDelay>
		if (AutoUnhitch_PWM_DC_Percentage <= 100)	{ // No need to check >= 0, since it's uint8_t
 8001d98:	e782      	b.n	8001ca0 <Decision_Making_Function+0x8>
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	9999999a 	.word	0x9999999a
 8001da4:	3fd99999 	.word	0x3fd99999
 8001da8:	cccccccd 	.word	0xcccccccd
 8001dac:	4012cccc 	.word	0x4012cccc
 8001db0:	20000000 	.word	0x20000000
 8001db4:	200000e4 	.word	0x200000e4
 8001db8:	200000e0 	.word	0x200000e0
 8001dbc:	40012c00 	.word	0x40012c00
 8001dc0:	200000e8 	.word	0x200000e8
 8001dc4:	200000e5 	.word	0x200000e5
 8001dc8:	20000082 	.word	0x20000082

08001dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001dde:	f000 fa47 	bl	8002270 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40000800 	.word	0x40000800

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <Error_Handler+0x8>

08001dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e02:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6193      	str	r3, [r2, #24]
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <HAL_MspInit+0x68>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	210f      	movs	r1, #15
 8001e36:	f06f 0001 	mvn.w	r0, #1
 8001e3a:	f001 fdc8 	bl	80039ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_MspInit+0x6c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <HAL_MspInit+0x6c>)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000

08001e6c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <HAL_ADC_MspInit+0x6c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d121      	bne.n	8001ed0 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e8c:	4b13      	ldr	r3, [pc, #76]	@ (8001edc <HAL_ADC_MspInit+0x70>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <HAL_ADC_MspInit+0x70>)
 8001e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <HAL_ADC_MspInit+0x70>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <HAL_ADC_MspInit+0x70>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	@ (8001edc <HAL_ADC_MspInit+0x70>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_ADC_MspInit+0x70>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4805      	ldr	r0, [pc, #20]	@ (8001ee0 <HAL_ADC_MspInit+0x74>)
 8001ecc:	f001 fdaa 	bl	8003a24 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40012400 	.word	0x40012400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010800 	.word	0x40010800

08001ee4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a29      	ldr	r2, [pc, #164]	@ (8001fa4 <HAL_CAN_MspInit+0xc0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d14b      	bne.n	8001f9c <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f04:	4b28      	ldr	r3, [pc, #160]	@ (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	4a27      	ldr	r2, [pc, #156]	@ (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f0e:	61d3      	str	r3, [r2, #28]
 8001f10:	4b25      	ldr	r3, [pc, #148]	@ (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1c:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a21      	ldr	r2, [pc, #132]	@ (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f22:	f043 0308 	orr.w	r3, r3, #8
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	4818      	ldr	r0, [pc, #96]	@ (8001fac <HAL_CAN_MspInit+0xc8>)
 8001f4a:	f001 fd6b 	bl	8003a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4812      	ldr	r0, [pc, #72]	@ (8001fac <HAL_CAN_MspInit+0xc8>)
 8001f64:	f001 fd5e 	bl	8003a24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_CAN_MspInit+0xcc>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <HAL_CAN_MspInit+0xcc>)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2105      	movs	r1, #5
 8001f90:	2014      	movs	r0, #20
 8001f92:	f001 fd1c 	bl	80039ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001f96:	2014      	movs	r0, #20
 8001f98:	f001 fd35 	bl	8003a06 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	@ 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40006400 	.word	0x40006400
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	40010000 	.word	0x40010000

08001fb4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a09      	ldr	r2, [pc, #36]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x34>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d10b      	bne.n	8001fde <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <HAL_TIM_PWM_MspInit+0x38>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	4a08      	ldr	r2, [pc, #32]	@ (8001fec <HAL_TIM_PWM_MspInit+0x38>)
 8001fcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fd0:	6193      	str	r3, [r2, #24]
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_TIM_PWM_MspInit+0x38>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40012c00 	.word	0x40012c00
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a09      	ldr	r2, [pc, #36]	@ (8002024 <HAL_TIM_Base_MspInit+0x34>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10b      	bne.n	800201a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_TIM_Base_MspInit+0x38>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	4a08      	ldr	r2, [pc, #32]	@ (8002028 <HAL_TIM_Base_MspInit+0x38>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	61d3      	str	r3, [r2, #28]
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_TIM_Base_MspInit+0x38>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40000400 	.word	0x40000400
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <HAL_TIM_MspPostInit+0x5c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d118      	bne.n	800207e <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	4b0f      	ldr	r3, [pc, #60]	@ (800208c <HAL_TIM_MspPostInit+0x60>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a0e      	ldr	r2, [pc, #56]	@ (800208c <HAL_TIM_MspPostInit+0x60>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <HAL_TIM_MspPostInit+0x60>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2302      	movs	r3, #2
 8002070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	@ (8002090 <HAL_TIM_MspPostInit+0x64>)
 800207a:	f001 fcd3 	bl	8003a24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800207e:	bf00      	nop
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40021000 	.word	0x40021000
 8002090:	40010800 	.word	0x40010800

08002094 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08e      	sub	sp, #56	@ 0x38
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80020aa:	4b34      	ldr	r3, [pc, #208]	@ (800217c <HAL_InitTick+0xe8>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a33      	ldr	r2, [pc, #204]	@ (800217c <HAL_InitTick+0xe8>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b31      	ldr	r3, [pc, #196]	@ (800217c <HAL_InitTick+0xe8>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c2:	f107 0210 	add.w	r2, r7, #16
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 fa51 	bl	8004574 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d103      	bne.n	80020e4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020dc:	f002 fa22 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 80020e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80020e2:	e004      	b.n	80020ee <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020e4:	f002 fa1e 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 80020e8:	4603      	mov	r3, r0
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f0:	4a23      	ldr	r2, [pc, #140]	@ (8002180 <HAL_InitTick+0xec>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0c9b      	lsrs	r3, r3, #18
 80020f8:	3b01      	subs	r3, #1
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80020fc:	4b21      	ldr	r3, [pc, #132]	@ (8002184 <HAL_InitTick+0xf0>)
 80020fe:	4a22      	ldr	r2, [pc, #136]	@ (8002188 <HAL_InitTick+0xf4>)
 8002100:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002102:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_InitTick+0xf0>)
 8002104:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002108:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800210a:	4a1e      	ldr	r2, [pc, #120]	@ (8002184 <HAL_InitTick+0xf0>)
 800210c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002110:	4b1c      	ldr	r3, [pc, #112]	@ (8002184 <HAL_InitTick+0xf0>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <HAL_InitTick+0xf0>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_InitTick+0xf0>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002122:	4818      	ldr	r0, [pc, #96]	@ (8002184 <HAL_InitTick+0xf0>)
 8002124:	f002 fbe0 	bl	80048e8 <HAL_TIM_Base_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800212e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002132:	2b00      	cmp	r3, #0
 8002134:	d11b      	bne.n	800216e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002136:	4813      	ldr	r0, [pc, #76]	@ (8002184 <HAL_InitTick+0xf0>)
 8002138:	f002 fc70 	bl	8004a1c <HAL_TIM_Base_Start_IT>
 800213c:	4603      	mov	r3, r0
 800213e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002142:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002146:	2b00      	cmp	r3, #0
 8002148:	d111      	bne.n	800216e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800214a:	201e      	movs	r0, #30
 800214c:	f001 fc5b 	bl	8003a06 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d808      	bhi.n	8002168 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002156:	2200      	movs	r2, #0
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	201e      	movs	r0, #30
 800215c:	f001 fc37 	bl	80039ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_InitTick+0xf8>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e002      	b.n	800216e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800216e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002172:	4618      	mov	r0, r3
 8002174:	3738      	adds	r7, #56	@ 0x38
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	431bde83 	.word	0x431bde83
 8002184:	200001f4 	.word	0x200001f4
 8002188:	40000800 	.word	0x40000800
 800218c:	20000008 	.word	0x20000008

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <NMI_Handler+0x4>

08002198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <MemManage_Handler+0x4>

080021a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80021c8:	4802      	ldr	r0, [pc, #8]	@ (80021d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80021ca:	f001 f928 	bl	800341e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000012c 	.word	0x2000012c

080021d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021dc:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <TIM4_IRQHandler+0x10>)
 80021de:	f002 fd61 	bl	8004ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200001f4 	.word	0x200001f4

080021ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f8:	f7ff fff8 	bl	80021ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021fc:	480b      	ldr	r0, [pc, #44]	@ (800222c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021fe:	490c      	ldr	r1, [pc, #48]	@ (8002230 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002200:	4a0c      	ldr	r2, [pc, #48]	@ (8002234 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002204:	e002      	b.n	800220c <LoopCopyDataInit>

08002206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220a:	3304      	adds	r3, #4

0800220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002210:	d3f9      	bcc.n	8002206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002212:	4a09      	ldr	r2, [pc, #36]	@ (8002238 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002214:	4c09      	ldr	r4, [pc, #36]	@ (800223c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002218:	e001      	b.n	800221e <LoopFillZerobss>

0800221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800221c:	3204      	adds	r2, #4

0800221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002220:	d3fb      	bcc.n	800221a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002222:	f006 fb27 	bl	8008874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002226:	f7ff f8ad 	bl	8001384 <main>
  bx lr
 800222a:	4770      	bx	lr
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002234:	08008ac4 	.word	0x08008ac4
  ldr r2, =_sbss
 8002238:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800223c:	20001d68 	.word	0x20001d68

08002240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC1_2_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002248:	4b08      	ldr	r3, [pc, #32]	@ (800226c <HAL_Init+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a07      	ldr	r2, [pc, #28]	@ (800226c <HAL_Init+0x28>)
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f001 fbaf 	bl	80039b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225a:	200f      	movs	r0, #15
 800225c:	f7ff ff1a 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002260:	f7ff fdcc 	bl	8001dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000

08002270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_IncTick+0x1c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_IncTick+0x20>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a03      	ldr	r2, [pc, #12]	@ (8002290 <HAL_IncTick+0x20>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	2000000c 	.word	0x2000000c
 8002290:	2000023c 	.word	0x2000023c

08002294 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b02      	ldr	r3, [pc, #8]	@ (80022a4 <HAL_GetTick+0x10>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	2000023c 	.word	0x2000023c

080022a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff fff0 	bl	8002294 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022c0:	d005      	beq.n	80022ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <HAL_Delay+0x44>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ce:	bf00      	nop
 80022d0:	f7ff ffe0 	bl	8002294 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f7      	bhi.n	80022d0 <HAL_Delay+0x28>
  {
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000000c 	.word	0x2000000c

080022f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0be      	b.n	8002490 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fd9c 	bl	8001e6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fbf1 	bl	8002b1c <ADC_ConversionStop_Disable>
 800233a:	4603      	mov	r3, r0
 800233c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 8099 	bne.w	800247e <HAL_ADC_Init+0x18e>
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 8095 	bne.w	800247e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002358:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800235c:	f023 0302 	bic.w	r3, r3, #2
 8002360:	f043 0202 	orr.w	r2, r3, #2
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002370:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7b1b      	ldrb	r3, [r3, #12]
 8002376:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002378:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4313      	orrs	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002388:	d003      	beq.n	8002392 <HAL_ADC_Init+0xa2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_ADC_Init+0xa8>
 8002392:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002396:	e000      	b.n	800239a <HAL_ADC_Init+0xaa>
 8002398:	2300      	movs	r3, #0
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7d1b      	ldrb	r3, [r3, #20]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d119      	bne.n	80023dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7b1b      	ldrb	r3, [r3, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	035a      	lsls	r2, r3, #13
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	e00b      	b.n	80023dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <HAL_ADC_Init+0x1a8>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	430b      	orrs	r3, r1
 8002402:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800240c:	d003      	beq.n	8002416 <HAL_ADC_Init+0x126>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d104      	bne.n	8002420 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	3b01      	subs	r3, #1
 800241c:	051b      	lsls	r3, r3, #20
 800241e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002426:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	430a      	orrs	r2, r1
 8002432:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	4b18      	ldr	r3, [pc, #96]	@ (800249c <HAL_ADC_Init+0x1ac>)
 800243c:	4013      	ands	r3, r2
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	429a      	cmp	r2, r3
 8002442:	d10b      	bne.n	800245c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800245a:	e018      	b.n	800248e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	f023 0312 	bic.w	r3, r3, #18
 8002464:	f043 0210 	orr.w	r2, r3, #16
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	f043 0201 	orr.w	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800247c:	e007      	b.n	800248e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	ffe1f7fd 	.word	0xffe1f7fd
 800249c:	ff1f0efe 	.word	0xff1f0efe

080024a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Start+0x1a>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e098      	b.n	80025ec <HAL_ADC_Start+0x14c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fad0 	bl	8002a68 <ADC_Enable>
 80024c8:	4603      	mov	r3, r0
 80024ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 8087 	bne.w	80025e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a41      	ldr	r2, [pc, #260]	@ (80025f4 <HAL_ADC_Start+0x154>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d105      	bne.n	80024fe <HAL_ADC_Start+0x5e>
 80024f2:	4b41      	ldr	r3, [pc, #260]	@ (80025f8 <HAL_ADC_Start+0x158>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002502:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d026      	beq.n	8002566 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002520:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002528:	e01d      	b.n	8002566 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2f      	ldr	r2, [pc, #188]	@ (80025f8 <HAL_ADC_Start+0x158>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <HAL_ADC_Start+0xaa>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a2b      	ldr	r2, [pc, #172]	@ (80025f4 <HAL_ADC_Start+0x154>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d10d      	bne.n	8002566 <HAL_ADC_Start+0xc6>
 800254a:	4b2b      	ldr	r3, [pc, #172]	@ (80025f8 <HAL_ADC_Start+0x158>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800255e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	f023 0206 	bic.w	r2, r3, #6
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800257e:	e002      	b.n	8002586 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f06f 0202 	mvn.w	r2, #2
 8002596:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025a6:	d113      	bne.n	80025d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025ac:	4a11      	ldr	r2, [pc, #68]	@ (80025f4 <HAL_ADC_Start+0x154>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d105      	bne.n	80025be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025b2:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <HAL_ADC_Start+0x158>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d108      	bne.n	80025d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	e00c      	b.n	80025ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	e003      	b.n	80025ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40012800 	.word	0x40012800
 80025f8:	40012400 	.word	0x40012400

080025fc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_ADC_Stop+0x1a>
 8002612:	2302      	movs	r3, #2
 8002614:	e01a      	b.n	800264c <HAL_ADC_Stop+0x50>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fa7c 	bl	8002b1c <ADC_ConversionStop_Disable>
 8002624:	4603      	mov	r3, r0
 8002626:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800266a:	f7ff fe13 	bl	8002294 <HAL_GetTick>
 800266e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0d3      	b.n	800283e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d131      	bne.n	8002708 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d12a      	bne.n	8002708 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026b2:	e021      	b.n	80026f8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026ba:	d01d      	beq.n	80026f8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_ADC_PollForConversion+0x7e>
 80026c2:	f7ff fde7 	bl	8002294 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d212      	bcs.n	80026f8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	f043 0204 	orr.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e0a2      	b.n	800283e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0d6      	beq.n	80026b4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002706:	e070      	b.n	80027ea <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002708:	4b4f      	ldr	r3, [pc, #316]	@ (8002848 <HAL_ADC_PollForConversion+0x1f4>)
 800270a:	681c      	ldr	r4, [r3, #0]
 800270c:	2002      	movs	r0, #2
 800270e:	f002 f835 	bl	800477c <HAL_RCCEx_GetPeriphCLKFreq>
 8002712:	4603      	mov	r3, r0
 8002714:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	4b4b      	ldr	r3, [pc, #300]	@ (800284c <HAL_ADC_PollForConversion+0x1f8>)
 8002720:	400b      	ands	r3, r1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d118      	bne.n	8002758 <HAL_ADC_PollForConversion+0x104>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68d9      	ldr	r1, [r3, #12]
 800272c:	4b48      	ldr	r3, [pc, #288]	@ (8002850 <HAL_ADC_PollForConversion+0x1fc>)
 800272e:	400b      	ands	r3, r1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d111      	bne.n	8002758 <HAL_ADC_PollForConversion+0x104>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6919      	ldr	r1, [r3, #16]
 800273a:	4b46      	ldr	r3, [pc, #280]	@ (8002854 <HAL_ADC_PollForConversion+0x200>)
 800273c:	400b      	ands	r3, r1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_ADC_PollForConversion+0x100>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68d9      	ldr	r1, [r3, #12]
 8002748:	4b43      	ldr	r3, [pc, #268]	@ (8002858 <HAL_ADC_PollForConversion+0x204>)
 800274a:	400b      	ands	r3, r1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_PollForConversion+0x100>
 8002750:	2314      	movs	r3, #20
 8002752:	e020      	b.n	8002796 <HAL_ADC_PollForConversion+0x142>
 8002754:	2329      	movs	r3, #41	@ 0x29
 8002756:	e01e      	b.n	8002796 <HAL_ADC_PollForConversion+0x142>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	4b3d      	ldr	r3, [pc, #244]	@ (8002854 <HAL_ADC_PollForConversion+0x200>)
 8002760:	400b      	ands	r3, r1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_ADC_PollForConversion+0x120>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68d9      	ldr	r1, [r3, #12]
 800276c:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <HAL_ADC_PollForConversion+0x204>)
 800276e:	400b      	ands	r3, r1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00d      	beq.n	8002790 <HAL_ADC_PollForConversion+0x13c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6919      	ldr	r1, [r3, #16]
 800277a:	4b38      	ldr	r3, [pc, #224]	@ (800285c <HAL_ADC_PollForConversion+0x208>)
 800277c:	400b      	ands	r3, r1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <HAL_ADC_PollForConversion+0x140>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68d9      	ldr	r1, [r3, #12]
 8002788:	4b34      	ldr	r3, [pc, #208]	@ (800285c <HAL_ADC_PollForConversion+0x208>)
 800278a:	400b      	ands	r3, r1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_ADC_PollForConversion+0x140>
 8002790:	2354      	movs	r3, #84	@ 0x54
 8002792:	e000      	b.n	8002796 <HAL_ADC_PollForConversion+0x142>
 8002794:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800279c:	e021      	b.n	80027e2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027a4:	d01a      	beq.n	80027dc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_ADC_PollForConversion+0x168>
 80027ac:	f7ff fd72 	bl	8002294 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d20f      	bcs.n	80027dc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d90b      	bls.n	80027dc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	f043 0204 	orr.w	r2, r3, #4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e030      	b.n	800283e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3301      	adds	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d8d9      	bhi.n	800279e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f06f 0212 	mvn.w	r2, #18
 80027f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800280a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800280e:	d115      	bne.n	800283c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd90      	pop	{r4, r7, pc}
 8002846:	bf00      	nop
 8002848:	20000004 	.word	0x20000004
 800284c:	24924924 	.word	0x24924924
 8002850:	00924924 	.word	0x00924924
 8002854:	12492492 	.word	0x12492492
 8002858:	00492492 	.word	0x00492492
 800285c:	00249249 	.word	0x00249249

08002860 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x20>
 8002894:	2302      	movs	r3, #2
 8002896:	e0dc      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1da>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d81c      	bhi.n	80028e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b05      	subs	r3, #5
 80028ba:	221f      	movs	r2, #31
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	4019      	ands	r1, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	3b05      	subs	r3, #5
 80028d4:	fa00 f203 	lsl.w	r2, r0, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	635a      	str	r2, [r3, #52]	@ 0x34
 80028e0:	e03c      	b.n	800295c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d81c      	bhi.n	8002924 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	3b23      	subs	r3, #35	@ 0x23
 80028fc:	221f      	movs	r2, #31
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	4019      	ands	r1, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3b23      	subs	r3, #35	@ 0x23
 8002916:	fa00 f203 	lsl.w	r2, r0, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	631a      	str	r2, [r3, #48]	@ 0x30
 8002922:	e01b      	b.n	800295c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b41      	subs	r3, #65	@ 0x41
 8002936:	221f      	movs	r2, #31
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	4019      	ands	r1, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	3b41      	subs	r3, #65	@ 0x41
 8002950:	fa00 f203 	lsl.w	r2, r0, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b09      	cmp	r3, #9
 8002962:	d91c      	bls.n	800299e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68d9      	ldr	r1, [r3, #12]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	3b1e      	subs	r3, #30
 8002976:	2207      	movs	r2, #7
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	4019      	ands	r1, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6898      	ldr	r0, [r3, #8]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	3b1e      	subs	r3, #30
 8002990:	fa00 f203 	lsl.w	r2, r0, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	e019      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6919      	ldr	r1, [r3, #16]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	2207      	movs	r2, #7
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4019      	ands	r1, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6898      	ldr	r0, [r3, #8]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d003      	beq.n	80029e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029de:	2b11      	cmp	r3, #17
 80029e0:	d132      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <HAL_ADC_ConfigChannel+0x1e4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d125      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d126      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002a08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d11a      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a12:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a13      	ldr	r2, [pc, #76]	@ (8002a64 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	0c9a      	lsrs	r2, r3, #18
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a28:	e002      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f9      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x1b2>
 8002a36:	e007      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3c:	f043 0220 	orr.w	r2, r3, #32
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40012400 	.word	0x40012400
 8002a60:	20000004 	.word	0x20000004
 8002a64:	431bde83 	.word	0x431bde83

08002a68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d040      	beq.n	8002b08 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a96:	4b1f      	ldr	r3, [pc, #124]	@ (8002b14 <ADC_Enable+0xac>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b18 <ADC_Enable+0xb0>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	0c9b      	lsrs	r3, r3, #18
 8002aa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aa4:	e002      	b.n	8002aac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ab2:	f7ff fbef 	bl	8002294 <HAL_GetTick>
 8002ab6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ab8:	e01f      	b.n	8002afa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aba:	f7ff fbeb 	bl	8002294 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d918      	bls.n	8002afa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d011      	beq.n	8002afa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	f043 0210 	orr.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e007      	b.n	8002b0a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d1d8      	bne.n	8002aba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000004 	.word	0x20000004
 8002b18:	431bde83 	.word	0x431bde83

08002b1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d12e      	bne.n	8002b94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b46:	f7ff fba5 	bl	8002294 <HAL_GetTick>
 8002b4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b4c:	e01b      	b.n	8002b86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b4e:	f7ff fba1 	bl	8002294 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d914      	bls.n	8002b86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10d      	bne.n	8002b86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	f043 0210 	orr.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e007      	b.n	8002b96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d0dc      	beq.n	8002b4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0ed      	b.n	8002d8c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff f991 	bl	8001ee4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd2:	f7ff fb5f 	bl	8002294 <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bd8:	e012      	b.n	8002c00 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bda:	f7ff fb5b 	bl	8002294 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b0a      	cmp	r3, #10
 8002be6:	d90b      	bls.n	8002c00 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2205      	movs	r2, #5
 8002bf8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0c5      	b.n	8002d8c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0e5      	beq.n	8002bda <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0202 	bic.w	r2, r2, #2
 8002c1c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c1e:	f7ff fb39 	bl	8002294 <HAL_GetTick>
 8002c22:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c24:	e012      	b.n	8002c4c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c26:	f7ff fb35 	bl	8002294 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b0a      	cmp	r3, #10
 8002c32:	d90b      	bls.n	8002c4c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2205      	movs	r2, #5
 8002c44:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e09f      	b.n	8002d8c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e5      	bne.n	8002c26 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7e1b      	ldrb	r3, [r3, #24]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e007      	b.n	8002c84 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7e5b      	ldrb	r3, [r3, #25]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d108      	bne.n	8002c9e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e007      	b.n	8002cae <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7e9b      	ldrb	r3, [r3, #26]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d108      	bne.n	8002cc8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0220 	orr.w	r2, r2, #32
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e007      	b.n	8002cd8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0220 	bic.w	r2, r2, #32
 8002cd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7edb      	ldrb	r3, [r3, #27]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d108      	bne.n	8002cf2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0210 	bic.w	r2, r2, #16
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e007      	b.n	8002d02 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0210 	orr.w	r2, r2, #16
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7f1b      	ldrb	r3, [r3, #28]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d108      	bne.n	8002d1c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0208 	orr.w	r2, r2, #8
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e007      	b.n	8002d2c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0208 	bic.w	r2, r2, #8
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7f5b      	ldrb	r3, [r3, #29]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d108      	bne.n	8002d46 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0204 	orr.w	r2, r2, #4
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e007      	b.n	8002d56 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0204 	bic.w	r2, r2, #4
 8002d54:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	ea42 0103 	orr.w	r1, r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	1e5a      	subs	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002daa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d003      	beq.n	8002dba <HAL_CAN_ConfigFilter+0x26>
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	f040 80aa 	bne.w	8002f0e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002dc0:	f043 0201 	orr.w	r2, r3, #1
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	401a      	ands	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d123      	bne.n	8002e3c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3248      	adds	r2, #72	@ 0x48
 8002e1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e32:	6979      	ldr	r1, [r7, #20]
 8002e34:	3348      	adds	r3, #72	@ 0x48
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d122      	bne.n	8002e8a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3248      	adds	r2, #72	@ 0x48
 8002e6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e80:	6979      	ldr	r1, [r7, #20]
 8002e82:	3348      	adds	r3, #72	@ 0x48
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002ea4:	e007      	b.n	8002eb6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	401a      	ands	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002ed0:	e007      	b.n	8002ee2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d107      	bne.n	8002efa <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002f00:	f023 0201 	bic.w	r2, r3, #1
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e006      	b.n	8002f1c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d12e      	bne.n	8002f98 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f52:	f7ff f99f 	bl	8002294 <HAL_GetTick>
 8002f56:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f58:	e012      	b.n	8002f80 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f5a:	f7ff f99b 	bl	8002294 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b0a      	cmp	r3, #10
 8002f66:	d90b      	bls.n	8002f80 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2205      	movs	r2, #5
 8002f78:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e012      	b.n	8002fa6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e5      	bne.n	8002f5a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e006      	b.n	8002fa6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b089      	sub	sp, #36	@ 0x24
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d003      	beq.n	8002fda <HAL_CAN_AddTxMessage+0x2c>
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	f040 80ad 	bne.w	8003134 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8095 	beq.w	8003124 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	0e1b      	lsrs	r3, r3, #24
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003004:	2201      	movs	r2, #1
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	409a      	lsls	r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10d      	bne.n	8003032 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003020:	68f9      	ldr	r1, [r7, #12]
 8003022:	6809      	ldr	r1, [r1, #0]
 8003024:	431a      	orrs	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3318      	adds	r3, #24
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	440b      	add	r3, r1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e00f      	b.n	8003052 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800303c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003046:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	3318      	adds	r3, #24
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	440b      	add	r3, r1
 8003050:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3318      	adds	r3, #24
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	440b      	add	r3, r1
 8003062:	3304      	adds	r3, #4
 8003064:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	7d1b      	ldrb	r3, [r3, #20]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d111      	bne.n	8003092 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3318      	adds	r3, #24
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	4413      	add	r3, r2
 800307a:	3304      	adds	r3, #4
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	6811      	ldr	r1, [r2, #0]
 8003082:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3318      	adds	r3, #24
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	440b      	add	r3, r1
 800308e:	3304      	adds	r3, #4
 8003090:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3307      	adds	r3, #7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	061a      	lsls	r2, r3, #24
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3306      	adds	r3, #6
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3305      	adds	r3, #5
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	4313      	orrs	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	3204      	adds	r2, #4
 80030b2:	7812      	ldrb	r2, [r2, #0]
 80030b4:	4610      	mov	r0, r2
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	6811      	ldr	r1, [r2, #0]
 80030ba:	ea43 0200 	orr.w	r2, r3, r0
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	440b      	add	r3, r1
 80030c4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80030c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3303      	adds	r3, #3
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	061a      	lsls	r2, r3, #24
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3302      	adds	r3, #2
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3301      	adds	r3, #1
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	4313      	orrs	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	7812      	ldrb	r2, [r2, #0]
 80030ea:	4610      	mov	r0, r2
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	6811      	ldr	r1, [r2, #0]
 80030f0:	ea43 0200 	orr.w	r2, r3, r0
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	440b      	add	r3, r1
 80030fa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80030fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3318      	adds	r3, #24
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	4413      	add	r3, r2
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	6811      	ldr	r1, [r2, #0]
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	3318      	adds	r3, #24
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	440b      	add	r3, r1
 800311e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e00e      	b.n	8003142 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e006      	b.n	8003142 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	@ 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003160:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003162:	7afb      	ldrb	r3, [r7, #11]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d002      	beq.n	800316e <HAL_CAN_IsTxMessagePending+0x22>
 8003168:	7afb      	ldrb	r3, [r7, #11]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d10b      	bne.n	8003186 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	069b      	lsls	r3, r3, #26
 8003178:	401a      	ands	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	069b      	lsls	r3, r3, #26
 800317e:	429a      	cmp	r2, r3
 8003180:	d001      	beq.n	8003186 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003182:	2301      	movs	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003186:	68fb      	ldr	r3, [r7, #12]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003192:	b480      	push	{r7}
 8003194:	b087      	sub	sp, #28
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d003      	beq.n	80031b6 <HAL_CAN_GetRxMessage+0x24>
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	f040 8103 	bne.w	80033bc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10e      	bne.n	80031da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0f7      	b.n	80033ca <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d107      	bne.n	80031f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0e8      	b.n	80033ca <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	331b      	adds	r3, #27
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	4413      	add	r3, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0204 	and.w	r2, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	331b      	adds	r3, #27
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	4413      	add	r3, r2
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	0d5b      	lsrs	r3, r3, #21
 8003226:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e00b      	b.n	8003248 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	331b      	adds	r3, #27
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	08db      	lsrs	r3, r3, #3
 8003240:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	331b      	adds	r3, #27
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	4413      	add	r3, r2
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0202 	and.w	r2, r3, #2
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	331b      	adds	r3, #27
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	4413      	add	r3, r2
 800326a:	3304      	adds	r3, #4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2208      	movs	r2, #8
 800327a:	611a      	str	r2, [r3, #16]
 800327c:	e00b      	b.n	8003296 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	331b      	adds	r3, #27
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	331b      	adds	r3, #27
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	331b      	adds	r3, #27
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	4413      	add	r3, r2
 80032ba:	3304      	adds	r3, #4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0a1a      	lsrs	r2, r3, #8
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	4413      	add	r3, r2
 8003300:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	0c1a      	lsrs	r2, r3, #16
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	3302      	adds	r3, #2
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	4413      	add	r3, r2
 800331a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0e1a      	lsrs	r2, r3, #24
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	3303      	adds	r3, #3
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	4413      	add	r3, r2
 8003334:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	3304      	adds	r3, #4
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	4413      	add	r3, r2
 800334c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	0a1a      	lsrs	r2, r3, #8
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	3305      	adds	r3, #5
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	4413      	add	r3, r2
 8003366:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0c1a      	lsrs	r2, r3, #16
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	3306      	adds	r3, #6
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	4413      	add	r3, r2
 8003380:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	0e1a      	lsrs	r2, r3, #24
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	3307      	adds	r3, #7
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d108      	bne.n	80033a8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0220 	orr.w	r2, r2, #32
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	e007      	b.n	80033b8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0220 	orr.w	r2, r2, #32
 80033b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e006      	b.n	80033ca <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d002      	beq.n	80033f2 <HAL_CAN_ActivateNotification+0x1e>
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d109      	bne.n	8003406 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6959      	ldr	r1, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	e006      	b.n	8003414 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
  }
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b08a      	sub	sp, #40	@ 0x28
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003426:	2300      	movs	r3, #0
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d07c      	beq.n	800355e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d023      	beq.n	80034b6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f983 	bl	800378c <HAL_CAN_TxMailbox0CompleteCallback>
 8003486:	e016      	b.n	80034b6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
 800349a:	e00c      	b.n	80034b6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ae:	e002      	b.n	80034b6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f986 	bl	80037c2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d024      	beq.n	800350a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f962 	bl	800379e <HAL_CAN_TxMailbox1CompleteCallback>
 80034da:	e016      	b.n	800350a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d004      	beq.n	80034f0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ee:	e00c      	b.n	800350a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
 8003502:	e002      	b.n	800350a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f965 	bl	80037d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d024      	beq.n	800355e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800351c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f941 	bl	80037b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800352e:	e016      	b.n	800355e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d004      	beq.n	8003544 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
 8003542:	e00c      	b.n	800355e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
 8003556:	e002      	b.n	800355e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f944 	bl	80037e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00c      	beq.n	8003582 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2210      	movs	r2, #16
 8003580:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00b      	beq.n	80035a4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2208      	movs	r2, #8
 800359c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f92a 	bl	80037f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fd fe4f 	bl	8001260 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2210      	movs	r2, #16
 80035e4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d006      	beq.n	8003608 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2208      	movs	r2, #8
 8003600:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f90a 	bl	800381c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f8f2 	bl	800380a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d006      	beq.n	8003648 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2210      	movs	r2, #16
 8003640:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8f3 	bl	800382e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2208      	movs	r2, #8
 8003662:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f8eb 	bl	8003840 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d07b      	beq.n	800376c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d072      	beq.n	8003764 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	f043 0302 	orr.w	r3, r3, #2
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d043      	beq.n	8003764 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d03e      	beq.n	8003764 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036ec:	2b60      	cmp	r3, #96	@ 0x60
 80036ee:	d02b      	beq.n	8003748 <HAL_CAN_IRQHandler+0x32a>
 80036f0:	2b60      	cmp	r3, #96	@ 0x60
 80036f2:	d82e      	bhi.n	8003752 <HAL_CAN_IRQHandler+0x334>
 80036f4:	2b50      	cmp	r3, #80	@ 0x50
 80036f6:	d022      	beq.n	800373e <HAL_CAN_IRQHandler+0x320>
 80036f8:	2b50      	cmp	r3, #80	@ 0x50
 80036fa:	d82a      	bhi.n	8003752 <HAL_CAN_IRQHandler+0x334>
 80036fc:	2b40      	cmp	r3, #64	@ 0x40
 80036fe:	d019      	beq.n	8003734 <HAL_CAN_IRQHandler+0x316>
 8003700:	2b40      	cmp	r3, #64	@ 0x40
 8003702:	d826      	bhi.n	8003752 <HAL_CAN_IRQHandler+0x334>
 8003704:	2b30      	cmp	r3, #48	@ 0x30
 8003706:	d010      	beq.n	800372a <HAL_CAN_IRQHandler+0x30c>
 8003708:	2b30      	cmp	r3, #48	@ 0x30
 800370a:	d822      	bhi.n	8003752 <HAL_CAN_IRQHandler+0x334>
 800370c:	2b10      	cmp	r3, #16
 800370e:	d002      	beq.n	8003716 <HAL_CAN_IRQHandler+0x2f8>
 8003710:	2b20      	cmp	r3, #32
 8003712:	d005      	beq.n	8003720 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003714:	e01d      	b.n	8003752 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800371e:	e019      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	f043 0310 	orr.w	r3, r3, #16
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003728:	e014      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	f043 0320 	orr.w	r3, r3, #32
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003732:	e00f      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800373c:	e00a      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003746:	e005      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003750:	e000      	b.n	8003754 <HAL_CAN_IRQHandler+0x336>
            break;
 8003752:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003762:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2204      	movs	r2, #4
 800376a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f867 	bl	8003852 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003784:	bf00      	nop
 8003786:	3728      	adds	r7, #40	@ 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003874:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003880:	4013      	ands	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800388c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003896:	4a04      	ldr	r2, [pc, #16]	@ (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	60d3      	str	r3, [r2, #12]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b0:	4b04      	ldr	r3, [pc, #16]	@ (80038c4 <__NVIC_GetPriorityGrouping+0x18>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	f003 0307 	and.w	r3, r3, #7
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	db0b      	blt.n	80038f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	4906      	ldr	r1, [pc, #24]	@ (80038fc <__NVIC_EnableIRQ+0x34>)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2001      	movs	r0, #1
 80038ea:	fa00 f202 	lsl.w	r2, r0, r2
 80038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	e000e100 	.word	0xe000e100

08003900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	6039      	str	r1, [r7, #0]
 800390a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003910:	2b00      	cmp	r3, #0
 8003912:	db0a      	blt.n	800392a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	490c      	ldr	r1, [pc, #48]	@ (800394c <__NVIC_SetPriority+0x4c>)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	0112      	lsls	r2, r2, #4
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	440b      	add	r3, r1
 8003924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003928:	e00a      	b.n	8003940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	b2da      	uxtb	r2, r3
 800392e:	4908      	ldr	r1, [pc, #32]	@ (8003950 <__NVIC_SetPriority+0x50>)
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	3b04      	subs	r3, #4
 8003938:	0112      	lsls	r2, r2, #4
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	440b      	add	r3, r1
 800393e:	761a      	strb	r2, [r3, #24]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	e000e100 	.word	0xe000e100
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003954:	b480      	push	{r7}
 8003956:	b089      	sub	sp, #36	@ 0x24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f1c3 0307 	rsb	r3, r3, #7
 800396e:	2b04      	cmp	r3, #4
 8003970:	bf28      	it	cs
 8003972:	2304      	movcs	r3, #4
 8003974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3304      	adds	r3, #4
 800397a:	2b06      	cmp	r3, #6
 800397c:	d902      	bls.n	8003984 <NVIC_EncodePriority+0x30>
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3b03      	subs	r3, #3
 8003982:	e000      	b.n	8003986 <NVIC_EncodePriority+0x32>
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003988:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43da      	mvns	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	401a      	ands	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800399c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	43d9      	mvns	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	4313      	orrs	r3, r2
         );
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3724      	adds	r7, #36	@ 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff4f 	bl	8003864 <__NVIC_SetPriorityGrouping>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039e0:	f7ff ff64 	bl	80038ac <__NVIC_GetPriorityGrouping>
 80039e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	6978      	ldr	r0, [r7, #20]
 80039ec:	f7ff ffb2 	bl	8003954 <NVIC_EncodePriority>
 80039f0:	4602      	mov	r2, r0
 80039f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff81 	bl	8003900 <__NVIC_SetPriority>
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff57 	bl	80038c8 <__NVIC_EnableIRQ>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b08b      	sub	sp, #44	@ 0x2c
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a32:	2300      	movs	r3, #0
 8003a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a36:	e169      	b.n	8003d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a38:	2201      	movs	r2, #1
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	f040 8158 	bne.w	8003d06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4a9a      	ldr	r2, [pc, #616]	@ (8003cc4 <HAL_GPIO_Init+0x2a0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d05e      	beq.n	8003b1e <HAL_GPIO_Init+0xfa>
 8003a60:	4a98      	ldr	r2, [pc, #608]	@ (8003cc4 <HAL_GPIO_Init+0x2a0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d875      	bhi.n	8003b52 <HAL_GPIO_Init+0x12e>
 8003a66:	4a98      	ldr	r2, [pc, #608]	@ (8003cc8 <HAL_GPIO_Init+0x2a4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d058      	beq.n	8003b1e <HAL_GPIO_Init+0xfa>
 8003a6c:	4a96      	ldr	r2, [pc, #600]	@ (8003cc8 <HAL_GPIO_Init+0x2a4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d86f      	bhi.n	8003b52 <HAL_GPIO_Init+0x12e>
 8003a72:	4a96      	ldr	r2, [pc, #600]	@ (8003ccc <HAL_GPIO_Init+0x2a8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d052      	beq.n	8003b1e <HAL_GPIO_Init+0xfa>
 8003a78:	4a94      	ldr	r2, [pc, #592]	@ (8003ccc <HAL_GPIO_Init+0x2a8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d869      	bhi.n	8003b52 <HAL_GPIO_Init+0x12e>
 8003a7e:	4a94      	ldr	r2, [pc, #592]	@ (8003cd0 <HAL_GPIO_Init+0x2ac>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d04c      	beq.n	8003b1e <HAL_GPIO_Init+0xfa>
 8003a84:	4a92      	ldr	r2, [pc, #584]	@ (8003cd0 <HAL_GPIO_Init+0x2ac>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d863      	bhi.n	8003b52 <HAL_GPIO_Init+0x12e>
 8003a8a:	4a92      	ldr	r2, [pc, #584]	@ (8003cd4 <HAL_GPIO_Init+0x2b0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d046      	beq.n	8003b1e <HAL_GPIO_Init+0xfa>
 8003a90:	4a90      	ldr	r2, [pc, #576]	@ (8003cd4 <HAL_GPIO_Init+0x2b0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d85d      	bhi.n	8003b52 <HAL_GPIO_Init+0x12e>
 8003a96:	2b12      	cmp	r3, #18
 8003a98:	d82a      	bhi.n	8003af0 <HAL_GPIO_Init+0xcc>
 8003a9a:	2b12      	cmp	r3, #18
 8003a9c:	d859      	bhi.n	8003b52 <HAL_GPIO_Init+0x12e>
 8003a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa4 <HAL_GPIO_Init+0x80>)
 8003aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa4:	08003b1f 	.word	0x08003b1f
 8003aa8:	08003af9 	.word	0x08003af9
 8003aac:	08003b0b 	.word	0x08003b0b
 8003ab0:	08003b4d 	.word	0x08003b4d
 8003ab4:	08003b53 	.word	0x08003b53
 8003ab8:	08003b53 	.word	0x08003b53
 8003abc:	08003b53 	.word	0x08003b53
 8003ac0:	08003b53 	.word	0x08003b53
 8003ac4:	08003b53 	.word	0x08003b53
 8003ac8:	08003b53 	.word	0x08003b53
 8003acc:	08003b53 	.word	0x08003b53
 8003ad0:	08003b53 	.word	0x08003b53
 8003ad4:	08003b53 	.word	0x08003b53
 8003ad8:	08003b53 	.word	0x08003b53
 8003adc:	08003b53 	.word	0x08003b53
 8003ae0:	08003b53 	.word	0x08003b53
 8003ae4:	08003b53 	.word	0x08003b53
 8003ae8:	08003b01 	.word	0x08003b01
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	4a79      	ldr	r2, [pc, #484]	@ (8003cd8 <HAL_GPIO_Init+0x2b4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003af6:	e02c      	b.n	8003b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	623b      	str	r3, [r7, #32]
          break;
 8003afe:	e029      	b.n	8003b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	3304      	adds	r3, #4
 8003b06:	623b      	str	r3, [r7, #32]
          break;
 8003b08:	e024      	b.n	8003b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	623b      	str	r3, [r7, #32]
          break;
 8003b12:	e01f      	b.n	8003b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	623b      	str	r3, [r7, #32]
          break;
 8003b1c:	e01a      	b.n	8003b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b26:	2304      	movs	r3, #4
 8003b28:	623b      	str	r3, [r7, #32]
          break;
 8003b2a:	e013      	b.n	8003b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b34:	2308      	movs	r3, #8
 8003b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	611a      	str	r2, [r3, #16]
          break;
 8003b3e:	e009      	b.n	8003b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b40:	2308      	movs	r3, #8
 8003b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	615a      	str	r2, [r3, #20]
          break;
 8003b4a:	e003      	b.n	8003b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	623b      	str	r3, [r7, #32]
          break;
 8003b50:	e000      	b.n	8003b54 <HAL_GPIO_Init+0x130>
          break;
 8003b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2bff      	cmp	r3, #255	@ 0xff
 8003b58:	d801      	bhi.n	8003b5e <HAL_GPIO_Init+0x13a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	e001      	b.n	8003b62 <HAL_GPIO_Init+0x13e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3304      	adds	r3, #4
 8003b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2bff      	cmp	r3, #255	@ 0xff
 8003b68:	d802      	bhi.n	8003b70 <HAL_GPIO_Init+0x14c>
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	e002      	b.n	8003b76 <HAL_GPIO_Init+0x152>
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	3b08      	subs	r3, #8
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	210f      	movs	r1, #15
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	401a      	ands	r2, r3
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	431a      	orrs	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80b1 	beq.w	8003d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6193      	str	r3, [r2, #24]
 8003bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bbc:	4a48      	ldr	r2, [pc, #288]	@ (8003ce0 <HAL_GPIO_Init+0x2bc>)
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	089b      	lsrs	r3, r3, #2
 8003bc2:	3302      	adds	r3, #2
 8003bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	220f      	movs	r2, #15
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a40      	ldr	r2, [pc, #256]	@ (8003ce4 <HAL_GPIO_Init+0x2c0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <HAL_GPIO_Init+0x1ec>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a3f      	ldr	r2, [pc, #252]	@ (8003ce8 <HAL_GPIO_Init+0x2c4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00d      	beq.n	8003c0c <HAL_GPIO_Init+0x1e8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8003cec <HAL_GPIO_Init+0x2c8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <HAL_GPIO_Init+0x1e4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8003cf0 <HAL_GPIO_Init+0x2cc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_GPIO_Init+0x1e0>
 8003c00:	2303      	movs	r3, #3
 8003c02:	e006      	b.n	8003c12 <HAL_GPIO_Init+0x1ee>
 8003c04:	2304      	movs	r3, #4
 8003c06:	e004      	b.n	8003c12 <HAL_GPIO_Init+0x1ee>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e002      	b.n	8003c12 <HAL_GPIO_Init+0x1ee>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_GPIO_Init+0x1ee>
 8003c10:	2300      	movs	r3, #0
 8003c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c14:	f002 0203 	and.w	r2, r2, #3
 8003c18:	0092      	lsls	r2, r2, #2
 8003c1a:	4093      	lsls	r3, r2
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c22:	492f      	ldr	r1, [pc, #188]	@ (8003ce0 <HAL_GPIO_Init+0x2bc>)
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d006      	beq.n	8003c4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	492c      	ldr	r1, [pc, #176]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]
 8003c48:	e006      	b.n	8003c58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	4928      	ldr	r1, [pc, #160]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d006      	beq.n	8003c72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c64:	4b23      	ldr	r3, [pc, #140]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	4922      	ldr	r1, [pc, #136]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60cb      	str	r3, [r1, #12]
 8003c70:	e006      	b.n	8003c80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c72:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	491e      	ldr	r1, [pc, #120]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d006      	beq.n	8003c9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c8c:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	4918      	ldr	r1, [pc, #96]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
 8003c98:	e006      	b.n	8003ca8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c9a:	4b16      	ldr	r3, [pc, #88]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	4914      	ldr	r1, [pc, #80]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d021      	beq.n	8003cf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	490e      	ldr	r1, [pc, #56]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
 8003cc0:	e021      	b.n	8003d06 <HAL_GPIO_Init+0x2e2>
 8003cc2:	bf00      	nop
 8003cc4:	10320000 	.word	0x10320000
 8003cc8:	10310000 	.word	0x10310000
 8003ccc:	10220000 	.word	0x10220000
 8003cd0:	10210000 	.word	0x10210000
 8003cd4:	10120000 	.word	0x10120000
 8003cd8:	10110000 	.word	0x10110000
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40010800 	.word	0x40010800
 8003ce8:	40010c00 	.word	0x40010c00
 8003cec:	40011000 	.word	0x40011000
 8003cf0:	40011400 	.word	0x40011400
 8003cf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_GPIO_Init+0x304>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	4909      	ldr	r1, [pc, #36]	@ (8003d28 <HAL_GPIO_Init+0x304>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	3301      	adds	r3, #1
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	fa22 f303 	lsr.w	r3, r2, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f47f ae8e 	bne.w	8003a38 <HAL_GPIO_Init+0x14>
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	372c      	adds	r7, #44	@ 0x2c
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr
 8003d28:	40010400 	.word	0x40010400

08003d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	887b      	ldrh	r3, [r7, #2]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
 8003d48:	e001      	b.n	8003d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	807b      	strh	r3, [r7, #2]
 8003d66:	4613      	mov	r3, r2
 8003d68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d6a:	787b      	ldrb	r3, [r7, #1]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d70:	887a      	ldrh	r2, [r7, #2]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d76:	e003      	b.n	8003d80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d78:	887b      	ldrh	r3, [r7, #2]
 8003d7a:	041a      	lsls	r2, r3, #16
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	611a      	str	r2, [r3, #16]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
	...

08003d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e272      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8087 	beq.w	8003eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dac:	4b92      	ldr	r3, [pc, #584]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 030c 	and.w	r3, r3, #12
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d00c      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003db8:	4b8f      	ldr	r3, [pc, #572]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d112      	bne.n	8003dea <HAL_RCC_OscConfig+0x5e>
 8003dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd0:	d10b      	bne.n	8003dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd2:	4b89      	ldr	r3, [pc, #548]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d06c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x12c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d168      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e24c      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_OscConfig+0x76>
 8003df4:	4b80      	ldr	r3, [pc, #512]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a7f      	ldr	r2, [pc, #508]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e02e      	b.n	8003e60 <HAL_RCC_OscConfig+0xd4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x98>
 8003e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7a      	ldr	r2, [pc, #488]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b78      	ldr	r3, [pc, #480]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a77      	ldr	r2, [pc, #476]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e01d      	b.n	8003e60 <HAL_RCC_OscConfig+0xd4>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0xbc>
 8003e2e:	4b72      	ldr	r3, [pc, #456]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a71      	ldr	r2, [pc, #452]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6e      	ldr	r2, [pc, #440]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0xd4>
 8003e48:	4b6b      	ldr	r3, [pc, #428]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b68      	ldr	r3, [pc, #416]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a67      	ldr	r2, [pc, #412]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe fa14 	bl	8002294 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fe fa10 	bl	8002294 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	@ 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e200      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xe4>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fe fa00 	bl	8002294 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fe f9fc 	bl	8002294 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1ec      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	4b53      	ldr	r3, [pc, #332]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x10c>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ed2:	4b49      	ldr	r3, [pc, #292]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x18c>
 8003ede:	4b46      	ldr	r3, [pc, #280]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b43      	ldr	r3, [pc, #268]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x176>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1c0      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4939      	ldr	r1, [pc, #228]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e03a      	b.n	8003f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b36      	ldr	r3, [pc, #216]	@ (8003ffc <HAL_RCC_OscConfig+0x270>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f26:	f7fe f9b5 	bl	8002294 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fe f9b1 	bl	8002294 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e1a1      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4927      	ldr	r1, [pc, #156]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
 8003f60:	e015      	b.n	8003f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f62:	4b26      	ldr	r3, [pc, #152]	@ (8003ffc <HAL_RCC_OscConfig+0x270>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe f994 	bl	8002294 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fe f990 	bl	8002294 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e180      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d03a      	beq.n	8004010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d019      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa2:	4b17      	ldr	r3, [pc, #92]	@ (8004000 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa8:	f7fe f974 	bl	8002294 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fe f970 	bl	8002294 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e160      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fce:	2001      	movs	r0, #1
 8003fd0:	f000 fb00 	bl	80045d4 <RCC_Delay>
 8003fd4:	e01c      	b.n	8004010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004000 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fdc:	f7fe f95a 	bl	8002294 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe2:	e00f      	b.n	8004004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fe f956 	bl	8002294 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d908      	bls.n	8004004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e146      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	42420000 	.word	0x42420000
 8004000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	4b92      	ldr	r3, [pc, #584]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e9      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a6 	beq.w	800416a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004022:	4b8b      	ldr	r3, [pc, #556]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	4b88      	ldr	r3, [pc, #544]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	4a87      	ldr	r2, [pc, #540]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004038:	61d3      	str	r3, [r2, #28]
 800403a:	4b85      	ldr	r3, [pc, #532]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b82      	ldr	r3, [pc, #520]	@ (8004254 <HAL_RCC_OscConfig+0x4c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b7f      	ldr	r3, [pc, #508]	@ (8004254 <HAL_RCC_OscConfig+0x4c8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a7e      	ldr	r2, [pc, #504]	@ (8004254 <HAL_RCC_OscConfig+0x4c8>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fe f917 	bl	8002294 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406a:	f7fe f913 	bl	8002294 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b64      	cmp	r3, #100	@ 0x64
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e103      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	4b75      	ldr	r3, [pc, #468]	@ (8004254 <HAL_RCC_OscConfig+0x4c8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x312>
 8004090:	4b6f      	ldr	r3, [pc, #444]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4a6e      	ldr	r2, [pc, #440]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6213      	str	r3, [r2, #32]
 800409c:	e02d      	b.n	80040fa <HAL_RCC_OscConfig+0x36e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x334>
 80040a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4a69      	ldr	r2, [pc, #420]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	6213      	str	r3, [r2, #32]
 80040b2:	4b67      	ldr	r3, [pc, #412]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	4a66      	ldr	r2, [pc, #408]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040b8:	f023 0304 	bic.w	r3, r3, #4
 80040bc:	6213      	str	r3, [r2, #32]
 80040be:	e01c      	b.n	80040fa <HAL_RCC_OscConfig+0x36e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x356>
 80040c8:	4b61      	ldr	r3, [pc, #388]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	4a60      	ldr	r2, [pc, #384]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	6213      	str	r3, [r2, #32]
 80040d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6213      	str	r3, [r2, #32]
 80040e0:	e00b      	b.n	80040fa <HAL_RCC_OscConfig+0x36e>
 80040e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4a5a      	ldr	r2, [pc, #360]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6213      	str	r3, [r2, #32]
 80040ee:	4b58      	ldr	r3, [pc, #352]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	4a57      	ldr	r2, [pc, #348]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d015      	beq.n	800412e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004102:	f7fe f8c7 	bl	8002294 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fe f8c3 	bl	8002294 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0b1      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b4b      	ldr	r3, [pc, #300]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCC_OscConfig+0x37e>
 800412c:	e014      	b.n	8004158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fe f8b1 	bl	8002294 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fe f8ad 	bl	8002294 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e09b      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	4b40      	ldr	r3, [pc, #256]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4b3c      	ldr	r3, [pc, #240]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	4a3b      	ldr	r2, [pc, #236]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8087 	beq.w	8004282 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004174:	4b36      	ldr	r3, [pc, #216]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d061      	beq.n	8004244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d146      	bne.n	8004216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004188:	4b33      	ldr	r3, [pc, #204]	@ (8004258 <HAL_RCC_OscConfig+0x4cc>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fe f881 	bl	8002294 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004196:	f7fe f87d 	bl	8002294 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e06d      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a8:	4b29      	ldr	r3, [pc, #164]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041bc:	d108      	bne.n	80041d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041be:	4b24      	ldr	r3, [pc, #144]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	4921      	ldr	r1, [pc, #132]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a19      	ldr	r1, [r3, #32]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	430b      	orrs	r3, r1
 80041e2:	491b      	ldr	r1, [pc, #108]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004258 <HAL_RCC_OscConfig+0x4cc>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ee:	f7fe f851 	bl	8002294 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f6:	f7fe f84d 	bl	8002294 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e03d      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004208:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x46a>
 8004214:	e035      	b.n	8004282 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <HAL_RCC_OscConfig+0x4cc>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fe f83a 	bl	8002294 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004224:	f7fe f836 	bl	8002294 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e026      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x498>
 8004242:	e01e      	b.n	8004282 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e019      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
 8004250:	40021000 	.word	0x40021000
 8004254:	40007000 	.word	0x40007000
 8004258:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <HAL_RCC_OscConfig+0x500>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	429a      	cmp	r2, r3
 800426e:	d106      	bne.n	800427e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d001      	beq.n	8004282 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000

08004290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0d0      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d910      	bls.n	80042d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b67      	ldr	r3, [pc, #412]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 0207 	bic.w	r2, r3, #7
 80042ba:	4965      	ldr	r1, [pc, #404]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b63      	ldr	r3, [pc, #396]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0b8      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d020      	beq.n	8004322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042ec:	4b59      	ldr	r3, [pc, #356]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a58      	ldr	r2, [pc, #352]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004304:	4b53      	ldr	r3, [pc, #332]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a52      	ldr	r2, [pc, #328]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800430e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b50      	ldr	r3, [pc, #320]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	494d      	ldr	r1, [pc, #308]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d040      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b47      	ldr	r3, [pc, #284]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d115      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e07f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	4b41      	ldr	r3, [pc, #260]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e073      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435e:	4b3d      	ldr	r3, [pc, #244]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e06b      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436e:	4b39      	ldr	r3, [pc, #228]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f023 0203 	bic.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4936      	ldr	r1, [pc, #216]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004380:	f7fd ff88 	bl	8002294 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	e00a      	b.n	800439e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004388:	f7fd ff84 	bl	8002294 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e053      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	4b2d      	ldr	r3, [pc, #180]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 020c 	and.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1eb      	bne.n	8004388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043b0:	4b27      	ldr	r3, [pc, #156]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d210      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b24      	ldr	r3, [pc, #144]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 0207 	bic.w	r2, r3, #7
 80043c6:	4922      	ldr	r1, [pc, #136]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ce:	4b20      	ldr	r3, [pc, #128]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e032      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ec:	4b19      	ldr	r3, [pc, #100]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4916      	ldr	r1, [pc, #88]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800440a:	4b12      	ldr	r3, [pc, #72]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	490e      	ldr	r1, [pc, #56]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800441e:	f000 f821 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004422:	4602      	mov	r2, r0
 8004424:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	490a      	ldr	r1, [pc, #40]	@ (8004458 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	5ccb      	ldrb	r3, [r1, r3]
 8004432:	fa22 f303 	lsr.w	r3, r2, r3
 8004436:	4a09      	ldr	r2, [pc, #36]	@ (800445c <HAL_RCC_ClockConfig+0x1cc>)
 8004438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800443a:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <HAL_RCC_ClockConfig+0x1d0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd fe28 	bl	8002094 <HAL_InitTick>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40022000 	.word	0x40022000
 8004454:	40021000 	.word	0x40021000
 8004458:	08008a7c 	.word	0x08008a7c
 800445c:	20000004 	.word	0x20000004
 8004460:	20000008 	.word	0x20000008

08004464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800447e:	4b1e      	ldr	r3, [pc, #120]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	2b04      	cmp	r3, #4
 800448c:	d002      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0x30>
 800448e:	2b08      	cmp	r3, #8
 8004490:	d003      	beq.n	800449a <HAL_RCC_GetSysClockFreq+0x36>
 8004492:	e027      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004494:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <HAL_RCC_GetSysClockFreq+0x98>)
 8004496:	613b      	str	r3, [r7, #16]
      break;
 8004498:	e027      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	0c9b      	lsrs	r3, r3, #18
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	4a17      	ldr	r2, [pc, #92]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044a4:	5cd3      	ldrb	r3, [r2, r3]
 80044a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d010      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044b2:	4b11      	ldr	r3, [pc, #68]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	0c5b      	lsrs	r3, r3, #17
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	4a11      	ldr	r2, [pc, #68]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044be:	5cd3      	ldrb	r3, [r2, r3]
 80044c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a0d      	ldr	r2, [pc, #52]	@ (80044fc <HAL_RCC_GetSysClockFreq+0x98>)
 80044c6:	fb03 f202 	mul.w	r2, r3, r2
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e004      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004508 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	613b      	str	r3, [r7, #16]
      break;
 80044e2:	e002      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044e4:	4b09      	ldr	r3, [pc, #36]	@ (800450c <HAL_RCC_GetSysClockFreq+0xa8>)
 80044e6:	613b      	str	r3, [r7, #16]
      break;
 80044e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ea:	693b      	ldr	r3, [r7, #16]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	00f42400 	.word	0x00f42400
 8004500:	08008a94 	.word	0x08008a94
 8004504:	08008aa4 	.word	0x08008aa4
 8004508:	003d0900 	.word	0x003d0900
 800450c:	007a1200 	.word	0x007a1200

08004510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004514:	4b02      	ldr	r3, [pc, #8]	@ (8004520 <HAL_RCC_GetHCLKFreq+0x10>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	20000004 	.word	0x20000004

08004524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004528:	f7ff fff2 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	0a1b      	lsrs	r3, r3, #8
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4903      	ldr	r1, [pc, #12]	@ (8004548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	08008a8c 	.word	0x08008a8c

0800454c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004550:	f7ff ffde 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b05      	ldr	r3, [pc, #20]	@ (800456c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	0adb      	lsrs	r3, r3, #11
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4903      	ldr	r1, [pc, #12]	@ (8004570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40021000 	.word	0x40021000
 8004570:	08008a8c 	.word	0x08008a8c

08004574 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	220f      	movs	r2, #15
 8004582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004584:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <HAL_RCC_GetClockConfig+0x58>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0203 	and.w	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004590:	4b0e      	ldr	r3, [pc, #56]	@ (80045cc <HAL_RCC_GetClockConfig+0x58>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800459c:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <HAL_RCC_GetClockConfig+0x58>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80045a8:	4b08      	ldr	r3, [pc, #32]	@ (80045cc <HAL_RCC_GetClockConfig+0x58>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	08db      	lsrs	r3, r3, #3
 80045ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045b6:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <HAL_RCC_GetClockConfig+0x5c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0207 	and.w	r2, r3, #7
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40022000 	.word	0x40022000

080045d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004608 <RCC_Delay+0x34>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <RCC_Delay+0x38>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	0a5b      	lsrs	r3, r3, #9
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045f0:	bf00      	nop
  }
  while (Delay --);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e5a      	subs	r2, r3, #1
 80045f6:	60fa      	str	r2, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f9      	bne.n	80045f0 <RCC_Delay+0x1c>
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	20000004 	.word	0x20000004
 800460c:	10624dd3 	.word	0x10624dd3

08004610 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d07d      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800462c:	2300      	movs	r3, #0
 800462e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004630:	4b4f      	ldr	r3, [pc, #316]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10d      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463c:	4b4c      	ldr	r3, [pc, #304]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	4a4b      	ldr	r2, [pc, #300]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004646:	61d3      	str	r3, [r2, #28]
 8004648:	4b49      	ldr	r3, [pc, #292]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	4b46      	ldr	r3, [pc, #280]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d118      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004664:	4b43      	ldr	r3, [pc, #268]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a42      	ldr	r2, [pc, #264]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800466a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800466e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004670:	f7fd fe10 	bl	8002294 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	e008      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004678:	f7fd fe0c 	bl	8002294 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	@ 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e06d      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468a:	4b3a      	ldr	r3, [pc, #232]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004696:	4b36      	ldr	r3, [pc, #216]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800469e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d02e      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d027      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046be:	4b2e      	ldr	r3, [pc, #184]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046ca:	4a29      	ldr	r2, [pc, #164]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d014      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fd fddb 	bl	8002294 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd fdd7 	bl	8002294 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e036      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ee      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004704:	4b1a      	ldr	r3, [pc, #104]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4917      	ldr	r1, [pc, #92]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	4313      	orrs	r3, r2
 8004714:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471c:	4b14      	ldr	r3, [pc, #80]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	4a13      	ldr	r2, [pc, #76]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004726:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004734:	4b0e      	ldr	r3, [pc, #56]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	490b      	ldr	r1, [pc, #44]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004742:	4313      	orrs	r3, r2
 8004744:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004752:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	4904      	ldr	r1, [pc, #16]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	40007000 	.word	0x40007000
 8004778:	42420440 	.word	0x42420440

0800477c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	2300      	movs	r3, #0
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	2300      	movs	r3, #0
 8004796:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b10      	cmp	r3, #16
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	f200 8089 	bhi.w	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d045      	beq.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d074      	beq.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80047b2:	e081      	b.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 80047b4:	4b45      	ldr	r3, [pc, #276]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80047ba:	4b44      	ldr	r3, [pc, #272]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d07a      	beq.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	0c9b      	lsrs	r3, r3, #18
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	4a40      	ldr	r2, [pc, #256]	@ (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047d0:	5cd3      	ldrb	r3, [r2, r3]
 80047d2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047de:	4b3b      	ldr	r3, [pc, #236]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	0c5b      	lsrs	r3, r3, #17
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	4a3a      	ldr	r2, [pc, #232]	@ (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80047ea:	5cd3      	ldrb	r3, [r2, r3]
 80047ec:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00d      	beq.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80047f8:	4a37      	ldr	r2, [pc, #220]	@ (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	e004      	b.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4a33      	ldr	r2, [pc, #204]	@ (80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004814:	4b2d      	ldr	r3, [pc, #180]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800481c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004820:	d102      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	61bb      	str	r3, [r7, #24]
      break;
 8004826:	e049      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4a2c      	ldr	r2, [pc, #176]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
      break;
 8004836:	e041      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8004838:	4b24      	ldr	r3, [pc, #144]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004848:	d108      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004854:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	e01e      	b.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004866:	d109      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004868:	4b18      	ldr	r3, [pc, #96]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004874:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	e00e      	b.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004886:	d11b      	bne.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8004888:	4b10      	ldr	r3, [pc, #64]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d015      	beq.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8004894:	4b13      	ldr	r3, [pc, #76]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004896:	61bb      	str	r3, [r7, #24]
      break;
 8004898:	e012      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800489a:	e011      	b.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800489c:	f7ff fe56 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b0a      	ldr	r3, [pc, #40]	@ (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	0b9b      	lsrs	r3, r3, #14
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	3301      	adds	r3, #1
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	61bb      	str	r3, [r7, #24]
      break;
 80048b6:	e004      	b.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80048b8:	bf00      	nop
 80048ba:	e002      	b.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80048bc:	bf00      	nop
 80048be:	e000      	b.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80048c0:	bf00      	nop
    }
  }
  return (frequency);
 80048c2:	69bb      	ldr	r3, [r7, #24]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000
 80048d0:	08008aa8 	.word	0x08008aa8
 80048d4:	08008ab8 	.word	0x08008ab8
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	003d0900 	.word	0x003d0900
 80048e0:	aaaaaaab 	.word	0xaaaaaaab
 80048e4:	0001e848 	.word	0x0001e848

080048e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e041      	b.n	800497e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd fb6e 	bl	8001ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 fc5a 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d001      	beq.n	80049a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e032      	b.n	8004a06 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <HAL_TIM_Base_Start+0x88>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_TIM_Base_Start+0x48>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ba:	d009      	beq.n	80049d0 <HAL_TIM_Base_Start+0x48>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a14      	ldr	r2, [pc, #80]	@ (8004a14 <HAL_TIM_Base_Start+0x8c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_TIM_Base_Start+0x48>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a13      	ldr	r2, [pc, #76]	@ (8004a18 <HAL_TIM_Base_Start+0x90>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d111      	bne.n	80049f4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d010      	beq.n	8004a04 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	e007      	b.n	8004a04 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800

08004a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d001      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e03a      	b.n	8004aaa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a18      	ldr	r2, [pc, #96]	@ (8004ab4 <HAL_TIM_Base_Start_IT+0x98>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x58>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5e:	d009      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x58>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a14      	ldr	r2, [pc, #80]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x58>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a13      	ldr	r2, [pc, #76]	@ (8004abc <HAL_TIM_Base_Start_IT+0xa0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d111      	bne.n	8004a98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d010      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	e007      	b.n	8004aa8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800

08004ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e041      	b.n	8004b56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fd fa64 	bl	8001fb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f000 fb6e 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <HAL_TIM_PWM_Start+0x24>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e022      	b.n	8004bca <HAL_TIM_PWM_Start+0x6a>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d109      	bne.n	8004b9e <HAL_TIM_PWM_Start+0x3e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	bf14      	ite	ne
 8004b96:	2301      	movne	r3, #1
 8004b98:	2300      	moveq	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	e015      	b.n	8004bca <HAL_TIM_PWM_Start+0x6a>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d109      	bne.n	8004bb8 <HAL_TIM_PWM_Start+0x58>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	bf14      	ite	ne
 8004bb0:	2301      	movne	r3, #1
 8004bb2:	2300      	moveq	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	e008      	b.n	8004bca <HAL_TIM_PWM_Start+0x6a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e05e      	b.n	8004c90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_PWM_Start+0x82>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004be0:	e013      	b.n	8004c0a <HAL_TIM_PWM_Start+0xaa>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d104      	bne.n	8004bf2 <HAL_TIM_PWM_Start+0x92>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bf0:	e00b      	b.n	8004c0a <HAL_TIM_PWM_Start+0xaa>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d104      	bne.n	8004c02 <HAL_TIM_PWM_Start+0xa2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c00:	e003      	b.n	8004c0a <HAL_TIM_PWM_Start+0xaa>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2202      	movs	r2, #2
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fd70 	bl	80056f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8004c98 <HAL_TIM_PWM_Start+0x138>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d107      	bne.n	8004c32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a18      	ldr	r2, [pc, #96]	@ (8004c98 <HAL_TIM_PWM_Start+0x138>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00e      	beq.n	8004c5a <HAL_TIM_PWM_Start+0xfa>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c44:	d009      	beq.n	8004c5a <HAL_TIM_PWM_Start+0xfa>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a14      	ldr	r2, [pc, #80]	@ (8004c9c <HAL_TIM_PWM_Start+0x13c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_TIM_PWM_Start+0xfa>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a12      	ldr	r2, [pc, #72]	@ (8004ca0 <HAL_TIM_PWM_Start+0x140>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d111      	bne.n	8004c7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b06      	cmp	r3, #6
 8004c6a:	d010      	beq.n	8004c8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7c:	e007      	b.n	8004c8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800

08004ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d020      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0202 	mvn.w	r2, #2
 8004cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa5a 	bl	80051a8 <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e005      	b.n	8004d02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa4d 	bl	8005196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fa5c 	bl	80051ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d020      	beq.n	8004d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01b      	beq.n	8004d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0204 	mvn.w	r2, #4
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa34 	bl	80051a8 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fa27 	bl	8005196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fa36 	bl	80051ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d020      	beq.n	8004da0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01b      	beq.n	8004da0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0208 	mvn.w	r2, #8
 8004d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2204      	movs	r2, #4
 8004d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fa0e 	bl	80051a8 <HAL_TIM_IC_CaptureCallback>
 8004d8c:	e005      	b.n	8004d9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa01 	bl	8005196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fa10 	bl	80051ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d020      	beq.n	8004dec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01b      	beq.n	8004dec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0210 	mvn.w	r2, #16
 8004dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f9e8 	bl	80051a8 <HAL_TIM_IC_CaptureCallback>
 8004dd8:	e005      	b.n	8004de6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f9db 	bl	8005196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f9ea 	bl	80051ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00c      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0201 	mvn.w	r2, #1
 8004e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fc ffde 	bl	8001dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fd3e 	bl	80058b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00c      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d007      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f9ba 	bl	80051cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0220 	mvn.w	r2, #32
 8004e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fd11 	bl	800589e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e0ae      	b.n	8005000 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	f200 809f 	bhi.w	8004ff0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004eed 	.word	0x08004eed
 8004ebc:	08004ff1 	.word	0x08004ff1
 8004ec0:	08004ff1 	.word	0x08004ff1
 8004ec4:	08004ff1 	.word	0x08004ff1
 8004ec8:	08004f2d 	.word	0x08004f2d
 8004ecc:	08004ff1 	.word	0x08004ff1
 8004ed0:	08004ff1 	.word	0x08004ff1
 8004ed4:	08004ff1 	.word	0x08004ff1
 8004ed8:	08004f6f 	.word	0x08004f6f
 8004edc:	08004ff1 	.word	0x08004ff1
 8004ee0:	08004ff1 	.word	0x08004ff1
 8004ee4:	08004ff1 	.word	0x08004ff1
 8004ee8:	08004faf 	.word	0x08004faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 f9e2 	bl	80052bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0208 	orr.w	r2, r2, #8
 8004f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0204 	bic.w	r2, r2, #4
 8004f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6999      	ldr	r1, [r3, #24]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	619a      	str	r2, [r3, #24]
      break;
 8004f2a:	e064      	b.n	8004ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fa28 	bl	8005388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6999      	ldr	r1, [r3, #24]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	021a      	lsls	r2, r3, #8
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	619a      	str	r2, [r3, #24]
      break;
 8004f6c:	e043      	b.n	8004ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fa71 	bl	800545c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0208 	orr.w	r2, r2, #8
 8004f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0204 	bic.w	r2, r2, #4
 8004f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69d9      	ldr	r1, [r3, #28]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	61da      	str	r2, [r3, #28]
      break;
 8004fac:	e023      	b.n	8004ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fabb 	bl	8005530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69d9      	ldr	r1, [r3, #28]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	021a      	lsls	r2, r3, #8
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	61da      	str	r2, [r3, #28]
      break;
 8004fee:	e002      	b.n	8004ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_TIM_ConfigClockSource+0x1c>
 8005020:	2302      	movs	r3, #2
 8005022:	e0b4      	b.n	800518e <HAL_TIM_ConfigClockSource+0x186>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800504a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800505c:	d03e      	beq.n	80050dc <HAL_TIM_ConfigClockSource+0xd4>
 800505e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005062:	f200 8087 	bhi.w	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506a:	f000 8086 	beq.w	800517a <HAL_TIM_ConfigClockSource+0x172>
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005072:	d87f      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b70      	cmp	r3, #112	@ 0x70
 8005076:	d01a      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0xa6>
 8005078:	2b70      	cmp	r3, #112	@ 0x70
 800507a:	d87b      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b60      	cmp	r3, #96	@ 0x60
 800507e:	d050      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x11a>
 8005080:	2b60      	cmp	r3, #96	@ 0x60
 8005082:	d877      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b50      	cmp	r3, #80	@ 0x50
 8005086:	d03c      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0xfa>
 8005088:	2b50      	cmp	r3, #80	@ 0x50
 800508a:	d873      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b40      	cmp	r3, #64	@ 0x40
 800508e:	d058      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x13a>
 8005090:	2b40      	cmp	r3, #64	@ 0x40
 8005092:	d86f      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b30      	cmp	r3, #48	@ 0x30
 8005096:	d064      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15a>
 8005098:	2b30      	cmp	r3, #48	@ 0x30
 800509a:	d86b      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b20      	cmp	r3, #32
 800509e:	d060      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15a>
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d867      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d05c      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15a>
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d05a      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15a>
 80050ac:	e062      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050be:	f000 fafc 	bl	80056ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	609a      	str	r2, [r3, #8]
      break;
 80050da:	e04f      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ec:	f000 fae5 	bl	80056ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050fe:	609a      	str	r2, [r3, #8]
      break;
 8005100:	e03c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	461a      	mov	r2, r3
 8005110:	f000 fa5c 	bl	80055cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2150      	movs	r1, #80	@ 0x50
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fab3 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 8005120:	e02c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800512e:	461a      	mov	r2, r3
 8005130:	f000 fa7a 	bl	8005628 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2160      	movs	r1, #96	@ 0x60
 800513a:	4618      	mov	r0, r3
 800513c:	f000 faa3 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 8005140:	e01c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800514e:	461a      	mov	r2, r3
 8005150:	f000 fa3c 	bl	80055cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2140      	movs	r1, #64	@ 0x40
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fa93 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 8005160:	e00c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f000 fa8a 	bl	8005686 <TIM_ITRx_SetConfig>
      break;
 8005172:	e003      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      break;
 8005178:	e000      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800517a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
	...

080051e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a2f      	ldr	r2, [pc, #188]	@ (80052b0 <TIM_Base_SetConfig+0xd0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_Base_SetConfig+0x30>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fe:	d007      	beq.n	8005210 <TIM_Base_SetConfig+0x30>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a2c      	ldr	r2, [pc, #176]	@ (80052b4 <TIM_Base_SetConfig+0xd4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0x30>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a2b      	ldr	r2, [pc, #172]	@ (80052b8 <TIM_Base_SetConfig+0xd8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d108      	bne.n	8005222 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a22      	ldr	r2, [pc, #136]	@ (80052b0 <TIM_Base_SetConfig+0xd0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_Base_SetConfig+0x62>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005230:	d007      	beq.n	8005242 <TIM_Base_SetConfig+0x62>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1f      	ldr	r2, [pc, #124]	@ (80052b4 <TIM_Base_SetConfig+0xd4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_Base_SetConfig+0x62>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a1e      	ldr	r2, [pc, #120]	@ (80052b8 <TIM_Base_SetConfig+0xd8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d108      	bne.n	8005254 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a0d      	ldr	r2, [pc, #52]	@ (80052b0 <TIM_Base_SetConfig+0xd0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d103      	bne.n	8005288 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f023 0201 	bic.w	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	611a      	str	r2, [r3, #16]
  }
}
 80052a6:	bf00      	nop
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40000800 	.word	0x40000800

080052bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f023 0201 	bic.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0303 	bic.w	r3, r3, #3
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f023 0302 	bic.w	r3, r3, #2
 8005304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a1c      	ldr	r2, [pc, #112]	@ (8005384 <TIM_OC1_SetConfig+0xc8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d10c      	bne.n	8005332 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0308 	bic.w	r3, r3, #8
 800531e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f023 0304 	bic.w	r3, r3, #4
 8005330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a13      	ldr	r2, [pc, #76]	@ (8005384 <TIM_OC1_SetConfig+0xc8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d111      	bne.n	800535e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40012c00 	.word	0x40012c00

08005388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f023 0210 	bic.w	r2, r3, #16
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0320 	bic.w	r3, r3, #32
 80053d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005458 <TIM_OC2_SetConfig+0xd0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10d      	bne.n	8005404 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005402:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a14      	ldr	r2, [pc, #80]	@ (8005458 <TIM_OC2_SetConfig+0xd0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d113      	bne.n	8005434 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800541a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr
 8005458:	40012c00 	.word	0x40012c00

0800545c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1d      	ldr	r2, [pc, #116]	@ (800552c <TIM_OC3_SetConfig+0xd0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10d      	bne.n	80054d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a14      	ldr	r2, [pc, #80]	@ (800552c <TIM_OC3_SetConfig+0xd0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d113      	bne.n	8005506 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	621a      	str	r2, [r3, #32]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40012c00 	.word	0x40012c00

08005530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800555e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800557a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	031b      	lsls	r3, r3, #12
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a0f      	ldr	r2, [pc, #60]	@ (80055c8 <TIM_OC4_SetConfig+0x98>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d109      	bne.n	80055a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	019b      	lsls	r3, r3, #6
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr
 80055c8:	40012c00 	.word	0x40012c00

080055cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f023 0201 	bic.w	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 030a 	bic.w	r3, r3, #10
 8005608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	f023 0210 	bic.w	r2, r3, #16
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	031b      	lsls	r3, r3, #12
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005664:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	621a      	str	r2, [r3, #32]
}
 800567c:	bf00      	nop
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr

08005686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f043 0307 	orr.w	r3, r3, #7
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	021a      	lsls	r2, r3, #8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	431a      	orrs	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	609a      	str	r2, [r3, #8]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 031f 	and.w	r3, r3, #31
 800570a:	2201      	movs	r2, #1
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1a      	ldr	r2, [r3, #32]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	43db      	mvns	r3, r3
 800571a:	401a      	ands	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1a      	ldr	r2, [r3, #32]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	fa01 f303 	lsl.w	r3, r1, r3
 8005730:	431a      	orrs	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005754:	2302      	movs	r3, #2
 8005756:	e046      	b.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a16      	ldr	r2, [pc, #88]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00e      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a4:	d009      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a12      	ldr	r2, [pc, #72]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a10      	ldr	r2, [pc, #64]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d10c      	bne.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800

080057fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005814:	2302      	movs	r3, #2
 8005816:	e03d      	b.n	8005894 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr

080058b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
	...

080058c4 <__NVIC_SetPriority>:
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	6039      	str	r1, [r7, #0]
 80058ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	db0a      	blt.n	80058ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	490c      	ldr	r1, [pc, #48]	@ (8005910 <__NVIC_SetPriority+0x4c>)
 80058de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e2:	0112      	lsls	r2, r2, #4
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	440b      	add	r3, r1
 80058e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80058ec:	e00a      	b.n	8005904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	4908      	ldr	r1, [pc, #32]	@ (8005914 <__NVIC_SetPriority+0x50>)
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	3b04      	subs	r3, #4
 80058fc:	0112      	lsls	r2, r2, #4
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	440b      	add	r3, r1
 8005902:	761a      	strb	r2, [r3, #24]
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	e000e100 	.word	0xe000e100
 8005914:	e000ed00 	.word	0xe000ed00

08005918 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800591c:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <SysTick_Handler+0x1c>)
 800591e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005920:	f001 ff26 	bl	8007770 <xTaskGetSchedulerState>
 8005924:	4603      	mov	r3, r0
 8005926:	2b01      	cmp	r3, #1
 8005928:	d001      	beq.n	800592e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800592a:	f002 fccd 	bl	80082c8 <xPortSysTickHandler>
  }
}
 800592e:	bf00      	nop
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	e000e010 	.word	0xe000e010

08005938 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800593c:	2100      	movs	r1, #0
 800593e:	f06f 0004 	mvn.w	r0, #4
 8005942:	f7ff ffbf 	bl	80058c4 <__NVIC_SetPriority>
#endif
}
 8005946:	bf00      	nop
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005952:	f3ef 8305 	mrs	r3, IPSR
 8005956:	603b      	str	r3, [r7, #0]
  return(result);
 8005958:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800595e:	f06f 0305 	mvn.w	r3, #5
 8005962:	607b      	str	r3, [r7, #4]
 8005964:	e00c      	b.n	8005980 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005966:	4b09      	ldr	r3, [pc, #36]	@ (800598c <osKernelInitialize+0x40>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d105      	bne.n	800597a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800596e:	4b07      	ldr	r3, [pc, #28]	@ (800598c <osKernelInitialize+0x40>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005974:	2300      	movs	r3, #0
 8005976:	607b      	str	r3, [r7, #4]
 8005978:	e002      	b.n	8005980 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800597e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005980:	687b      	ldr	r3, [r7, #4]
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr
 800598c:	20000240 	.word	0x20000240

08005990 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005996:	f3ef 8305 	mrs	r3, IPSR
 800599a:	603b      	str	r3, [r7, #0]
  return(result);
 800599c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80059a2:	f06f 0305 	mvn.w	r3, #5
 80059a6:	607b      	str	r3, [r7, #4]
 80059a8:	e010      	b.n	80059cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059aa:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <osKernelStart+0x48>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d109      	bne.n	80059c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059b2:	f7ff ffc1 	bl	8005938 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059b6:	4b08      	ldr	r3, [pc, #32]	@ (80059d8 <osKernelStart+0x48>)
 80059b8:	2202      	movs	r2, #2
 80059ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059bc:	f001 fa78 	bl	8006eb0 <vTaskStartScheduler>
      stat = osOK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	e002      	b.n	80059cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059cc:	687b      	ldr	r3, [r7, #4]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000240 	.word	0x20000240

080059dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08e      	sub	sp, #56	@ 0x38
 80059e0:	af04      	add	r7, sp, #16
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ec:	f3ef 8305 	mrs	r3, IPSR
 80059f0:	617b      	str	r3, [r7, #20]
  return(result);
 80059f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d17e      	bne.n	8005af6 <osThreadNew+0x11a>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d07b      	beq.n	8005af6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80059fe:	2380      	movs	r3, #128	@ 0x80
 8005a00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a02:	2318      	movs	r3, #24
 8005a04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005a0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d045      	beq.n	8005aa2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <osThreadNew+0x48>
        name = attr->name;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <osThreadNew+0x6e>
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b38      	cmp	r3, #56	@ 0x38
 8005a3c:	d805      	bhi.n	8005a4a <osThreadNew+0x6e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <osThreadNew+0x72>
        return (NULL);
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e054      	b.n	8005af8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00e      	beq.n	8005a84 <osThreadNew+0xa8>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	2ba7      	cmp	r3, #167	@ 0xa7
 8005a6c:	d90a      	bls.n	8005a84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d006      	beq.n	8005a84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <osThreadNew+0xa8>
        mem = 1;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	e010      	b.n	8005aa6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10c      	bne.n	8005aa6 <osThreadNew+0xca>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d108      	bne.n	8005aa6 <osThreadNew+0xca>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <osThreadNew+0xca>
          mem = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61bb      	str	r3, [r7, #24]
 8005aa0:	e001      	b.n	8005aa6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d110      	bne.n	8005ace <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ab4:	9202      	str	r2, [sp, #8]
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6a3a      	ldr	r2, [r7, #32]
 8005ac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f001 f800 	bl	8006ac8 <xTaskCreateStatic>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	e013      	b.n	8005af6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d110      	bne.n	8005af6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	f107 0310 	add.w	r3, r7, #16
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f001 f84e 	bl	8006b88 <xTaskCreate>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d001      	beq.n	8005af6 <osThreadNew+0x11a>
            hTask = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005af6:	693b      	ldr	r3, [r7, #16]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3728      	adds	r7, #40	@ 0x28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b08:	f3ef 8305 	mrs	r3, IPSR
 8005b0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <osDelay+0x1c>
    stat = osErrorISR;
 8005b14:	f06f 0305 	mvn.w	r3, #5
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e007      	b.n	8005b2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 f98c 	bl	8006e44 <vTaskDelay>
    }
  }

  return (stat);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b08a      	sub	sp, #40	@ 0x28
 8005b3a:	af02      	add	r7, sp, #8
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b46:	f3ef 8305 	mrs	r3, IPSR
 8005b4a:	613b      	str	r3, [r7, #16]
  return(result);
 8005b4c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d15f      	bne.n	8005c12 <osMessageQueueNew+0xdc>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d05c      	beq.n	8005c12 <osMessageQueueNew+0xdc>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d059      	beq.n	8005c12 <osMessageQueueNew+0xdc>
    mem = -1;
 8005b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d029      	beq.n	8005bbe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d012      	beq.n	8005b98 <osMessageQueueNew+0x62>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b4f      	cmp	r3, #79	@ 0x4f
 8005b78:	d90e      	bls.n	8005b98 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d302      	bcc.n	8005b98 <osMessageQueueNew+0x62>
        mem = 1;
 8005b92:	2301      	movs	r3, #1
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	e014      	b.n	8005bc2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d110      	bne.n	8005bc2 <osMessageQueueNew+0x8c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10c      	bne.n	8005bc2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d108      	bne.n	8005bc2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d104      	bne.n	8005bc2 <osMessageQueueNew+0x8c>
          mem = 0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e001      	b.n	8005bc2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d10b      	bne.n	8005be0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	9100      	str	r1, [sp, #0]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 fa2a 	bl	8006030 <xQueueGenericCreateStatic>
 8005bdc:	61f8      	str	r0, [r7, #28]
 8005bde:	e008      	b.n	8005bf2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d105      	bne.n	8005bf2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005be6:	2200      	movs	r2, #0
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fa9d 	bl	800612a <xQueueGenericCreate>
 8005bf0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00c      	beq.n	8005c12 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e001      	b.n	8005c0a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005c0a:	6979      	ldr	r1, [r7, #20]
 8005c0c:	69f8      	ldr	r0, [r7, #28]
 8005c0e:	f000 feff 	bl	8006a10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c12:	69fb      	ldr	r3, [r7, #28]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c34:	f3ef 8305 	mrs	r3, IPSR
 8005c38:	617b      	str	r3, [r7, #20]
  return(result);
 8005c3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d028      	beq.n	8005c92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <osMessageQueuePut+0x36>
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <osMessageQueuePut+0x36>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005c52:	f06f 0303 	mvn.w	r3, #3
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	e038      	b.n	8005ccc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005c5e:	f107 0210 	add.w	r2, r7, #16
 8005c62:	2300      	movs	r3, #0
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	69b8      	ldr	r0, [r7, #24]
 8005c68:	f000 fbc0 	bl	80063ec <xQueueGenericSendFromISR>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d003      	beq.n	8005c7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005c72:	f06f 0302 	mvn.w	r3, #2
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	e028      	b.n	8005ccc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d025      	beq.n	8005ccc <osMessageQueuePut+0xb0>
 8005c80:	4b15      	ldr	r3, [pc, #84]	@ (8005cd8 <osMessageQueuePut+0xbc>)
 8005c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	e01c      	b.n	8005ccc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <osMessageQueuePut+0x82>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005c9e:	f06f 0303 	mvn.w	r3, #3
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	e012      	b.n	8005ccc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	69b8      	ldr	r0, [r7, #24]
 8005cae:	f000 fa9b 	bl	80061e8 <xQueueGenericSend>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d009      	beq.n	8005ccc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005cbe:	f06f 0301 	mvn.w	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	e002      	b.n	8005ccc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005cc6:	f06f 0302 	mvn.w	r3, #2
 8005cca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005ccc:	69fb      	ldr	r3, [r7, #28]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3720      	adds	r7, #32
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf2:	f3ef 8305 	mrs	r3, IPSR
 8005cf6:	617b      	str	r3, [r7, #20]
  return(result);
 8005cf8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d028      	beq.n	8005d50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <osMessageQueueGet+0x34>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <osMessageQueueGet+0x34>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005d10:	f06f 0303 	mvn.w	r3, #3
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	e037      	b.n	8005d88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005d1c:	f107 0310 	add.w	r3, r7, #16
 8005d20:	461a      	mov	r2, r3
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	69b8      	ldr	r0, [r7, #24]
 8005d26:	f000 fce1 	bl	80066ec <xQueueReceiveFromISR>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d003      	beq.n	8005d38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005d30:	f06f 0302 	mvn.w	r3, #2
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e027      	b.n	8005d88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d024      	beq.n	8005d88 <osMessageQueueGet+0xac>
 8005d3e:	4b15      	ldr	r3, [pc, #84]	@ (8005d94 <osMessageQueueGet+0xb8>)
 8005d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	e01b      	b.n	8005d88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <osMessageQueueGet+0x80>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005d5c:	f06f 0303 	mvn.w	r3, #3
 8005d60:	61fb      	str	r3, [r7, #28]
 8005d62:	e011      	b.n	8005d88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	69b8      	ldr	r0, [r7, #24]
 8005d6a:	f000 fbdd 	bl	8006528 <xQueueReceive>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d009      	beq.n	8005d88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005d7a:	f06f 0301 	mvn.w	r3, #1
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	e002      	b.n	8005d88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005d82:	f06f 0302 	mvn.w	r3, #2
 8005d86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d88:	69fb      	ldr	r3, [r7, #28]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	e000ed04 	.word	0xe000ed04

08005d98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a06      	ldr	r2, [pc, #24]	@ (8005dc0 <vApplicationGetIdleTaskMemory+0x28>)
 8005da8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4a05      	ldr	r2, [pc, #20]	@ (8005dc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2280      	movs	r2, #128	@ 0x80
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr
 8005dc0:	20000244 	.word	0x20000244
 8005dc4:	200002ec 	.word	0x200002ec

08005dc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4a07      	ldr	r2, [pc, #28]	@ (8005df4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005dd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4a06      	ldr	r2, [pc, #24]	@ (8005df8 <vApplicationGetTimerTaskMemory+0x30>)
 8005dde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005de6:	601a      	str	r2, [r3, #0]
}
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	200004ec 	.word	0x200004ec
 8005df8:	20000594 	.word	0x20000594

08005dfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f103 0208 	add.w	r2, r3, #8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f103 0208 	add.w	r2, r3, #8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f103 0208 	add.w	r2, r3, #8
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	4770      	bx	lr

08005e52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eae:	d103      	bne.n	8005eb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	e00c      	b.n	8005ed2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3308      	adds	r3, #8
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e002      	b.n	8005ec6 <vListInsert+0x2e>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d2f6      	bcs.n	8005ec0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
}
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6892      	ldr	r2, [r2, #8]
 8005f1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6852      	ldr	r2, [r2, #4]
 8005f28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d103      	bne.n	8005f3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	1e5a      	subs	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr
	...

08005f5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f88:	f002 f920 	bl	80081cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f94:	68f9      	ldr	r1, [r7, #12]
 8005f96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	441a      	add	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	441a      	add	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	22ff      	movs	r2, #255	@ 0xff
 8005fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	22ff      	movs	r2, #255	@ 0xff
 8005fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d114      	bne.n	8006008 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01a      	beq.n	800601c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3310      	adds	r3, #16
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 f9fa 	bl	80073e4 <xTaskRemoveFromEventList>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d012      	beq.n	800601c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800602c <xQueueGenericReset+0xd0>)
 8005ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	e009      	b.n	800601c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3310      	adds	r3, #16
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff fef5 	bl	8005dfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3324      	adds	r3, #36	@ 0x24
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fef0 	bl	8005dfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800601c:	f002 f906 	bl	800822c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006020:	2301      	movs	r3, #1
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08e      	sub	sp, #56	@ 0x38
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10b      	bne.n	800605c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	e7fd      	b.n	8006058 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10b      	bne.n	800607a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	e7fd      	b.n	8006076 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <xQueueGenericCreateStatic+0x56>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <xQueueGenericCreateStatic+0x5a>
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <xQueueGenericCreateStatic+0x5c>
 800608a:	2300      	movs	r3, #0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10b      	bne.n	80060a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	623b      	str	r3, [r7, #32]
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <xQueueGenericCreateStatic+0x84>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <xQueueGenericCreateStatic+0x88>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <xQueueGenericCreateStatic+0x8a>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	61fb      	str	r3, [r7, #28]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060d6:	2350      	movs	r3, #80	@ 0x50
 80060d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b50      	cmp	r3, #80	@ 0x50
 80060de:	d00b      	beq.n	80060f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	61bb      	str	r3, [r7, #24]
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80060fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00d      	beq.n	8006120 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800610c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f840 	bl	80061a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006122:	4618      	mov	r0, r3
 8006124:	3730      	adds	r7, #48	@ 0x30
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800612a:	b580      	push	{r7, lr}
 800612c:	b08a      	sub	sp, #40	@ 0x28
 800612e:	af02      	add	r7, sp, #8
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	4613      	mov	r3, r2
 8006136:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <xQueueGenericCreate+0x2c>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	613b      	str	r3, [r7, #16]
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	e7fd      	b.n	8006152 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	fb02 f303 	mul.w	r3, r2, r3
 800615e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	3350      	adds	r3, #80	@ 0x50
 8006164:	4618      	mov	r0, r3
 8006166:	f002 f933 	bl	80083d0 <pvPortMalloc>
 800616a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d011      	beq.n	8006196 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	3350      	adds	r3, #80	@ 0x50
 800617a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006184:	79fa      	ldrb	r2, [r7, #7]
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4613      	mov	r3, r2
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f805 	bl	80061a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006196:	69bb      	ldr	r3, [r7, #24]
	}
 8006198:	4618      	mov	r0, r3
 800619a:	3720      	adds	r7, #32
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	e002      	b.n	80061c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061ce:	2101      	movs	r1, #1
 80061d0:	69b8      	ldr	r0, [r7, #24]
 80061d2:	f7ff fec3 	bl	8005f5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	78fa      	ldrb	r2, [r7, #3]
 80061da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08e      	sub	sp, #56	@ 0x38
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061f6:	2300      	movs	r3, #0
 80061f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10b      	bne.n	800621c <xQueueGenericSend+0x34>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d103      	bne.n	800622a <xQueueGenericSend+0x42>
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <xQueueGenericSend+0x46>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <xQueueGenericSend+0x48>
 800622e:	2300      	movs	r3, #0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10b      	bne.n	800624c <xQueueGenericSend+0x64>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d103      	bne.n	800625a <xQueueGenericSend+0x72>
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <xQueueGenericSend+0x76>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <xQueueGenericSend+0x78>
 800625e:	2300      	movs	r3, #0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10b      	bne.n	800627c <xQueueGenericSend+0x94>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	623b      	str	r3, [r7, #32]
}
 8006276:	bf00      	nop
 8006278:	bf00      	nop
 800627a:	e7fd      	b.n	8006278 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800627c:	f001 fa78 	bl	8007770 <xTaskGetSchedulerState>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <xQueueGenericSend+0xa4>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <xQueueGenericSend+0xa8>
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <xQueueGenericSend+0xaa>
 8006290:	2300      	movs	r3, #0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <xQueueGenericSend+0xc6>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	61fb      	str	r3, [r7, #28]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062ae:	f001 ff8d 	bl	80081cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d302      	bcc.n	80062c4 <xQueueGenericSend+0xdc>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d129      	bne.n	8006318 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062ca:	f000 fa91 	bl	80067f0 <prvCopyDataToQueue>
 80062ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d010      	beq.n	80062fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062da:	3324      	adds	r3, #36	@ 0x24
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 f881 	bl	80073e4 <xTaskRemoveFromEventList>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d013      	beq.n	8006310 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062e8:	4b3f      	ldr	r3, [pc, #252]	@ (80063e8 <xQueueGenericSend+0x200>)
 80062ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	e00a      	b.n	8006310 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006300:	4b39      	ldr	r3, [pc, #228]	@ (80063e8 <xQueueGenericSend+0x200>)
 8006302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006310:	f001 ff8c 	bl	800822c <vPortExitCritical>
				return pdPASS;
 8006314:	2301      	movs	r3, #1
 8006316:	e063      	b.n	80063e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d103      	bne.n	8006326 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800631e:	f001 ff85 	bl	800822c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006322:	2300      	movs	r3, #0
 8006324:	e05c      	b.n	80063e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006328:	2b00      	cmp	r3, #0
 800632a:	d106      	bne.n	800633a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800632c:	f107 0314 	add.w	r3, r7, #20
 8006330:	4618      	mov	r0, r3
 8006332:	f001 f8bb 	bl	80074ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006336:	2301      	movs	r3, #1
 8006338:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800633a:	f001 ff77 	bl	800822c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800633e:	f000 fe27 	bl	8006f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006342:	f001 ff43 	bl	80081cc <vPortEnterCritical>
 8006346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006348:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800634c:	b25b      	sxtb	r3, r3
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006352:	d103      	bne.n	800635c <xQueueGenericSend+0x174>
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800635c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006362:	b25b      	sxtb	r3, r3
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006368:	d103      	bne.n	8006372 <xQueueGenericSend+0x18a>
 800636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006372:	f001 ff5b 	bl	800822c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006376:	1d3a      	adds	r2, r7, #4
 8006378:	f107 0314 	add.w	r3, r7, #20
 800637c:	4611      	mov	r1, r2
 800637e:	4618      	mov	r0, r3
 8006380:	f001 f8aa 	bl	80074d8 <xTaskCheckForTimeOut>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d124      	bne.n	80063d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800638a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800638c:	f000 fb28 	bl	80069e0 <prvIsQueueFull>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d018      	beq.n	80063c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	3310      	adds	r3, #16
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 ffce 	bl	8007340 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063a6:	f000 fab3 	bl	8006910 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063aa:	f000 fdff 	bl	8006fac <xTaskResumeAll>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f47f af7c 	bne.w	80062ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80063b6:	4b0c      	ldr	r3, [pc, #48]	@ (80063e8 <xQueueGenericSend+0x200>)
 80063b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	e772      	b.n	80062ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063ca:	f000 faa1 	bl	8006910 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063ce:	f000 fded 	bl	8006fac <xTaskResumeAll>
 80063d2:	e76c      	b.n	80062ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063d6:	f000 fa9b 	bl	8006910 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063da:	f000 fde7 	bl	8006fac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3738      	adds	r7, #56	@ 0x38
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	e000ed04 	.word	0xe000ed04

080063ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b090      	sub	sp, #64	@ 0x40
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d103      	bne.n	800642a <xQueueGenericSendFromISR+0x3e>
 8006422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <xQueueGenericSendFromISR+0x42>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <xQueueGenericSendFromISR+0x44>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10b      	bne.n	800644c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006446:	bf00      	nop
 8006448:	bf00      	nop
 800644a:	e7fd      	b.n	8006448 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d103      	bne.n	800645a <xQueueGenericSendFromISR+0x6e>
 8006452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <xQueueGenericSendFromISR+0x72>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <xQueueGenericSendFromISR+0x74>
 800645e:	2300      	movs	r3, #0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10b      	bne.n	800647c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	623b      	str	r3, [r7, #32]
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	e7fd      	b.n	8006478 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800647c:	f001 ff68 	bl	8008350 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006480:	f3ef 8211 	mrs	r2, BASEPRI
 8006484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	61fa      	str	r2, [r7, #28]
 8006496:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006498:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800649a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800649c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d302      	bcc.n	80064ae <xQueueGenericSendFromISR+0xc2>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d12f      	bne.n	800650e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80064c4:	f000 f994 	bl	80067f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064d0:	d112      	bne.n	80064f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d016      	beq.n	8006508 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064dc:	3324      	adds	r3, #36	@ 0x24
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 ff80 	bl	80073e4 <xTaskRemoveFromEventList>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00e      	beq.n	8006508 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e007      	b.n	8006508 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80064fc:	3301      	adds	r3, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	b25a      	sxtb	r2, r3
 8006502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006508:	2301      	movs	r3, #1
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800650c:	e001      	b.n	8006512 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800650e:	2300      	movs	r3, #0
 8006510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006514:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800651c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800651e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006520:	4618      	mov	r0, r3
 8006522:	3740      	adds	r7, #64	@ 0x40
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08c      	sub	sp, #48	@ 0x30
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006534:	2300      	movs	r3, #0
 8006536:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10b      	bne.n	800655a <xQueueReceive+0x32>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	623b      	str	r3, [r7, #32]
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	e7fd      	b.n	8006556 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <xQueueReceive+0x40>
 8006560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <xQueueReceive+0x44>
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <xQueueReceive+0x46>
 800656c:	2300      	movs	r3, #0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10b      	bne.n	800658a <xQueueReceive+0x62>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	61fb      	str	r3, [r7, #28]
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop
 8006588:	e7fd      	b.n	8006586 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800658a:	f001 f8f1 	bl	8007770 <xTaskGetSchedulerState>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <xQueueReceive+0x72>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <xQueueReceive+0x76>
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <xQueueReceive+0x78>
 800659e:	2300      	movs	r3, #0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10b      	bne.n	80065bc <xQueueReceive+0x94>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	61bb      	str	r3, [r7, #24]
}
 80065b6:	bf00      	nop
 80065b8:	bf00      	nop
 80065ba:	e7fd      	b.n	80065b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065bc:	f001 fe06 	bl	80081cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01f      	beq.n	800660c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065d0:	f000 f978 	bl	80068c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	1e5a      	subs	r2, r3, #1
 80065d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00f      	beq.n	8006604 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e6:	3310      	adds	r3, #16
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fefb 	bl	80073e4 <xTaskRemoveFromEventList>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065f4:	4b3c      	ldr	r3, [pc, #240]	@ (80066e8 <xQueueReceive+0x1c0>)
 80065f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006604:	f001 fe12 	bl	800822c <vPortExitCritical>
				return pdPASS;
 8006608:	2301      	movs	r3, #1
 800660a:	e069      	b.n	80066e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006612:	f001 fe0b 	bl	800822c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006616:	2300      	movs	r3, #0
 8006618:	e062      	b.n	80066e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006620:	f107 0310 	add.w	r3, r7, #16
 8006624:	4618      	mov	r0, r3
 8006626:	f000 ff41 	bl	80074ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800662a:	2301      	movs	r3, #1
 800662c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800662e:	f001 fdfd 	bl	800822c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006632:	f000 fcad 	bl	8006f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006636:	f001 fdc9 	bl	80081cc <vPortEnterCritical>
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006640:	b25b      	sxtb	r3, r3
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006646:	d103      	bne.n	8006650 <xQueueReceive+0x128>
 8006648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006656:	b25b      	sxtb	r3, r3
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800665c:	d103      	bne.n	8006666 <xQueueReceive+0x13e>
 800665e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006666:	f001 fde1 	bl	800822c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800666a:	1d3a      	adds	r2, r7, #4
 800666c:	f107 0310 	add.w	r3, r7, #16
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f000 ff30 	bl	80074d8 <xTaskCheckForTimeOut>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d123      	bne.n	80066c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800667e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006680:	f000 f998 	bl	80069b4 <prvIsQueueEmpty>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d017      	beq.n	80066ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800668a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668c:	3324      	adds	r3, #36	@ 0x24
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4611      	mov	r1, r2
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fe54 	bl	8007340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800669a:	f000 f939 	bl	8006910 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800669e:	f000 fc85 	bl	8006fac <xTaskResumeAll>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d189      	bne.n	80065bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80066a8:	4b0f      	ldr	r3, [pc, #60]	@ (80066e8 <xQueueReceive+0x1c0>)
 80066aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	e780      	b.n	80065bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066bc:	f000 f928 	bl	8006910 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066c0:	f000 fc74 	bl	8006fac <xTaskResumeAll>
 80066c4:	e77a      	b.n	80065bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066c8:	f000 f922 	bl	8006910 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066cc:	f000 fc6e 	bl	8006fac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d2:	f000 f96f 	bl	80069b4 <prvIsQueueEmpty>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f43f af6f 	beq.w	80065bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3730      	adds	r7, #48	@ 0x30
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08e      	sub	sp, #56	@ 0x38
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10b      	bne.n	800671a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	623b      	str	r3, [r7, #32]
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop
 8006718:	e7fd      	b.n	8006716 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <xQueueReceiveFromISR+0x3c>
 8006720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <xQueueReceiveFromISR+0x40>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <xQueueReceiveFromISR+0x42>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	61fb      	str	r3, [r7, #28]
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	e7fd      	b.n	8006746 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800674a:	f001 fe01 	bl	8008350 <vPortValidateInterruptPriority>
	__asm volatile
 800674e:	f3ef 8211 	mrs	r2, BASEPRI
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	61ba      	str	r2, [r7, #24]
 8006764:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006766:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006768:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d02f      	beq.n	80067d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800677c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006784:	f000 f89e 	bl	80068c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	1e5a      	subs	r2, r3, #1
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006790:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006798:	d112      	bne.n	80067c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d016      	beq.n	80067d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a4:	3310      	adds	r3, #16
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fe1c 	bl	80073e4 <xTaskRemoveFromEventList>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00e      	beq.n	80067d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00b      	beq.n	80067d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e007      	b.n	80067d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80067c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067c4:	3301      	adds	r3, #1
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	b25a      	sxtb	r2, r3
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80067d0:	2301      	movs	r3, #1
 80067d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d4:	e001      	b.n	80067da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f383 8811 	msr	BASEPRI, r3
}
 80067e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3738      	adds	r7, #56	@ 0x38
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006804:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10d      	bne.n	800682a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d14d      	bne.n	80068b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	4618      	mov	r0, r3
 800681c:	f000 ffc6 	bl	80077ac <xTaskPriorityDisinherit>
 8006820:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	609a      	str	r2, [r3, #8]
 8006828:	e043      	b.n	80068b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d119      	bne.n	8006864 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6858      	ldr	r0, [r3, #4]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006838:	461a      	mov	r2, r3
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	f002 f840 	bl	80088c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006848:	441a      	add	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	429a      	cmp	r2, r3
 8006858:	d32b      	bcc.n	80068b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	e026      	b.n	80068b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	68d8      	ldr	r0, [r3, #12]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686c:	461a      	mov	r2, r3
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	f002 f826 	bl	80088c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68da      	ldr	r2, [r3, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687c:	425b      	negs	r3, r3
 800687e:	441a      	add	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d207      	bcs.n	80068a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006898:	425b      	negs	r3, r3
 800689a:	441a      	add	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d105      	bne.n	80068b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80068ba:	697b      	ldr	r3, [r7, #20]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d018      	beq.n	8006908 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	441a      	add	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d303      	bcc.n	80068f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68d9      	ldr	r1, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006900:	461a      	mov	r2, r3
 8006902:	6838      	ldr	r0, [r7, #0]
 8006904:	f001 ffdc 	bl	80088c0 <memcpy>
	}
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006918:	f001 fc58 	bl	80081cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006922:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006924:	e011      	b.n	800694a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692a:	2b00      	cmp	r3, #0
 800692c:	d012      	beq.n	8006954 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	3324      	adds	r3, #36	@ 0x24
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fd56 	bl	80073e4 <xTaskRemoveFromEventList>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800693e:	f000 fe2f 	bl	80075a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	3b01      	subs	r3, #1
 8006946:	b2db      	uxtb	r3, r3
 8006948:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800694a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	dce9      	bgt.n	8006926 <prvUnlockQueue+0x16>
 8006952:	e000      	b.n	8006956 <prvUnlockQueue+0x46>
					break;
 8006954:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	22ff      	movs	r2, #255	@ 0xff
 800695a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800695e:	f001 fc65 	bl	800822c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006962:	f001 fc33 	bl	80081cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800696c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800696e:	e011      	b.n	8006994 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d012      	beq.n	800699e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3310      	adds	r3, #16
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fd31 	bl	80073e4 <xTaskRemoveFromEventList>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006988:	f000 fe0a 	bl	80075a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	3b01      	subs	r3, #1
 8006990:	b2db      	uxtb	r3, r3
 8006992:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006998:	2b00      	cmp	r3, #0
 800699a:	dce9      	bgt.n	8006970 <prvUnlockQueue+0x60>
 800699c:	e000      	b.n	80069a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800699e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	22ff      	movs	r2, #255	@ 0xff
 80069a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80069a8:	f001 fc40 	bl	800822c <vPortExitCritical>
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069bc:	f001 fc06 	bl	80081cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069c8:	2301      	movs	r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	e001      	b.n	80069d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069d2:	f001 fc2b 	bl	800822c <vPortExitCritical>

	return xReturn;
 80069d6:	68fb      	ldr	r3, [r7, #12]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069e8:	f001 fbf0 	bl	80081cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d102      	bne.n	80069fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069f8:	2301      	movs	r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e001      	b.n	8006a02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a02:	f001 fc13 	bl	800822c <vPortExitCritical>

	return xReturn;
 8006a06:	68fb      	ldr	r3, [r7, #12]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e014      	b.n	8006a4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a20:	4a0e      	ldr	r2, [pc, #56]	@ (8006a5c <vQueueAddToRegistry+0x4c>)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a2c:	490b      	ldr	r1, [pc, #44]	@ (8006a5c <vQueueAddToRegistry+0x4c>)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a36:	4a09      	ldr	r2, [pc, #36]	@ (8006a5c <vQueueAddToRegistry+0x4c>)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a42:	e006      	b.n	8006a52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b07      	cmp	r3, #7
 8006a4e:	d9e7      	bls.n	8006a20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr
 8006a5c:	20000994 	.word	0x20000994

08006a60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a70:	f001 fbac 	bl	80081cc <vPortEnterCritical>
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a7a:	b25b      	sxtb	r3, r3
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a80:	d103      	bne.n	8006a8a <vQueueWaitForMessageRestricted+0x2a>
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a90:	b25b      	sxtb	r3, r3
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a96:	d103      	bne.n	8006aa0 <vQueueWaitForMessageRestricted+0x40>
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006aa0:	f001 fbc4 	bl	800822c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d106      	bne.n	8006aba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	3324      	adds	r3, #36	@ 0x24
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fc69 	bl	800738c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006aba:	6978      	ldr	r0, [r7, #20]
 8006abc:	f7ff ff28 	bl	8006910 <prvUnlockQueue>
	}
 8006ac0:	bf00      	nop
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08e      	sub	sp, #56	@ 0x38
 8006acc:	af04      	add	r7, sp, #16
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	623b      	str	r3, [r7, #32]
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	61fb      	str	r3, [r7, #28]
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	e7fd      	b.n	8006b0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b12:	23a8      	movs	r3, #168	@ 0xa8
 8006b14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2ba8      	cmp	r3, #168	@ 0xa8
 8006b1a:	d00b      	beq.n	8006b34 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	61bb      	str	r3, [r7, #24]
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01e      	beq.n	8006b7a <xTaskCreateStatic+0xb2>
 8006b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01b      	beq.n	8006b7a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b54:	2300      	movs	r3, #0
 8006b56:	9303      	str	r3, [sp, #12]
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	9302      	str	r3, [sp, #8]
 8006b5c:	f107 0314 	add.w	r3, r7, #20
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f851 	bl	8006c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b74:	f000 f8f6 	bl	8006d64 <prvAddNewTaskToReadyList>
 8006b78:	e001      	b.n	8006b7e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b7e:	697b      	ldr	r3, [r7, #20]
	}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3728      	adds	r7, #40	@ 0x28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08c      	sub	sp, #48	@ 0x30
 8006b8c:	af04      	add	r7, sp, #16
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b98:	88fb      	ldrh	r3, [r7, #6]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f001 fc17 	bl	80083d0 <pvPortMalloc>
 8006ba2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00e      	beq.n	8006bc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006baa:	20a8      	movs	r0, #168	@ 0xa8
 8006bac:	f001 fc10 	bl	80083d0 <pvPortMalloc>
 8006bb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bbe:	e005      	b.n	8006bcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bc0:	6978      	ldr	r0, [r7, #20]
 8006bc2:	f001 fcd3 	bl	800856c <vPortFree>
 8006bc6:	e001      	b.n	8006bcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d017      	beq.n	8006c02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bda:	88fa      	ldrh	r2, [r7, #6]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9303      	str	r3, [sp, #12]
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	9302      	str	r3, [sp, #8]
 8006be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	68b9      	ldr	r1, [r7, #8]
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 f80f 	bl	8006c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bf6:	69f8      	ldr	r0, [r7, #28]
 8006bf8:	f000 f8b4 	bl	8006d64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	61bb      	str	r3, [r7, #24]
 8006c00:	e002      	b.n	8006c08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c08:	69bb      	ldr	r3, [r7, #24]
	}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c24:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	21a5      	movs	r1, #165	@ 0xa5
 8006c2e:	f001 fdbb 	bl	80087a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f023 0307 	bic.w	r3, r3, #7
 8006c4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00b      	beq.n	8006c6e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	617b      	str	r3, [r7, #20]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01f      	beq.n	8006cb4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c74:	2300      	movs	r3, #0
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	e012      	b.n	8006ca0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	4413      	add	r3, r2
 8006c80:	7819      	ldrb	r1, [r3, #0]
 8006c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	3334      	adds	r3, #52	@ 0x34
 8006c8a:	460a      	mov	r2, r1
 8006c8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d006      	beq.n	8006ca8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b0f      	cmp	r3, #15
 8006ca4:	d9e9      	bls.n	8006c7a <prvInitialiseNewTask+0x66>
 8006ca6:	e000      	b.n	8006caa <prvInitialiseNewTask+0x96>
			{
				break;
 8006ca8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cb2:	e003      	b.n	8006cbc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	2b37      	cmp	r3, #55	@ 0x37
 8006cc0:	d901      	bls.n	8006cc6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cc2:	2337      	movs	r3, #55	@ 0x37
 8006cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff f8ac 	bl	8005e3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	3318      	adds	r3, #24
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff f8a7 	bl	8005e3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cf0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	3354      	adds	r3, #84	@ 0x54
 8006d16:	224c      	movs	r2, #76	@ 0x4c
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 fd44 	bl	80087a8 <memset>
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	4a0d      	ldr	r2, [pc, #52]	@ (8006d58 <prvInitialiseNewTask+0x144>)
 8006d24:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	4a0c      	ldr	r2, [pc, #48]	@ (8006d5c <prvInitialiseNewTask+0x148>)
 8006d2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d60 <prvInitialiseNewTask+0x14c>)
 8006d30:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	68f9      	ldr	r1, [r7, #12]
 8006d36:	69b8      	ldr	r0, [r7, #24]
 8006d38:	f001 f954 	bl	8007fe4 <pxPortInitialiseStack>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d4e:	bf00      	nop
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20001c28 	.word	0x20001c28
 8006d5c:	20001c90 	.word	0x20001c90
 8006d60:	20001cf8 	.word	0x20001cf8

08006d64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d6c:	f001 fa2e 	bl	80081cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d70:	4b2d      	ldr	r3, [pc, #180]	@ (8006e28 <prvAddNewTaskToReadyList+0xc4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	4a2c      	ldr	r2, [pc, #176]	@ (8006e28 <prvAddNewTaskToReadyList+0xc4>)
 8006d78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e2c <prvAddNewTaskToReadyList+0xc8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d82:	4a2a      	ldr	r2, [pc, #168]	@ (8006e2c <prvAddNewTaskToReadyList+0xc8>)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d88:	4b27      	ldr	r3, [pc, #156]	@ (8006e28 <prvAddNewTaskToReadyList+0xc4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d110      	bne.n	8006db2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d90:	f000 fc2a 	bl	80075e8 <prvInitialiseTaskLists>
 8006d94:	e00d      	b.n	8006db2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d96:	4b26      	ldr	r3, [pc, #152]	@ (8006e30 <prvAddNewTaskToReadyList+0xcc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d9e:	4b23      	ldr	r3, [pc, #140]	@ (8006e2c <prvAddNewTaskToReadyList+0xc8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d802      	bhi.n	8006db2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dac:	4a1f      	ldr	r2, [pc, #124]	@ (8006e2c <prvAddNewTaskToReadyList+0xc8>)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006db2:	4b20      	ldr	r3, [pc, #128]	@ (8006e34 <prvAddNewTaskToReadyList+0xd0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3301      	adds	r3, #1
 8006db8:	4a1e      	ldr	r2, [pc, #120]	@ (8006e34 <prvAddNewTaskToReadyList+0xd0>)
 8006dba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8006e34 <prvAddNewTaskToReadyList+0xd0>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e38 <prvAddNewTaskToReadyList+0xd4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d903      	bls.n	8006dd8 <prvAddNewTaskToReadyList+0x74>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd4:	4a18      	ldr	r2, [pc, #96]	@ (8006e38 <prvAddNewTaskToReadyList+0xd4>)
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4a15      	ldr	r2, [pc, #84]	@ (8006e3c <prvAddNewTaskToReadyList+0xd8>)
 8006de6:	441a      	add	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4619      	mov	r1, r3
 8006dee:	4610      	mov	r0, r2
 8006df0:	f7ff f82f 	bl	8005e52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006df4:	f001 fa1a 	bl	800822c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006df8:	4b0d      	ldr	r3, [pc, #52]	@ (8006e30 <prvAddNewTaskToReadyList+0xcc>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00e      	beq.n	8006e1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e00:	4b0a      	ldr	r3, [pc, #40]	@ (8006e2c <prvAddNewTaskToReadyList+0xc8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d207      	bcs.n	8006e1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e40 <prvAddNewTaskToReadyList+0xdc>)
 8006e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000ea8 	.word	0x20000ea8
 8006e2c:	200009d4 	.word	0x200009d4
 8006e30:	20000eb4 	.word	0x20000eb4
 8006e34:	20000ec4 	.word	0x20000ec4
 8006e38:	20000eb0 	.word	0x20000eb0
 8006e3c:	200009d8 	.word	0x200009d8
 8006e40:	e000ed04 	.word	0xe000ed04

08006e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d018      	beq.n	8006e88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e56:	4b14      	ldr	r3, [pc, #80]	@ (8006ea8 <vTaskDelay+0x64>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <vTaskDelay+0x32>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60bb      	str	r3, [r7, #8]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e76:	f000 f88b 	bl	8006f90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fd05 	bl	800788c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e82:	f000 f893 	bl	8006fac <xTaskResumeAll>
 8006e86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d107      	bne.n	8006e9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006e8e:	4b07      	ldr	r3, [pc, #28]	@ (8006eac <vTaskDelay+0x68>)
 8006e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000ed0 	.word	0x20000ed0
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	@ 0x28
 8006eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ebe:	463a      	mov	r2, r7
 8006ec0:	1d39      	adds	r1, r7, #4
 8006ec2:	f107 0308 	add.w	r3, r7, #8
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe ff66 	bl	8005d98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	9202      	str	r2, [sp, #8]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	2300      	movs	r3, #0
 8006edc:	460a      	mov	r2, r1
 8006ede:	4924      	ldr	r1, [pc, #144]	@ (8006f70 <vTaskStartScheduler+0xc0>)
 8006ee0:	4824      	ldr	r0, [pc, #144]	@ (8006f74 <vTaskStartScheduler+0xc4>)
 8006ee2:	f7ff fdf1 	bl	8006ac8 <xTaskCreateStatic>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4a23      	ldr	r2, [pc, #140]	@ (8006f78 <vTaskStartScheduler+0xc8>)
 8006eea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006eec:	4b22      	ldr	r3, [pc, #136]	@ (8006f78 <vTaskStartScheduler+0xc8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	e001      	b.n	8006efe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d102      	bne.n	8006f0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f04:	f000 fd16 	bl	8007934 <xTimerCreateTimerTask>
 8006f08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d11b      	bne.n	8006f48 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	613b      	str	r3, [r7, #16]
}
 8006f22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f24:	4b15      	ldr	r3, [pc, #84]	@ (8006f7c <vTaskStartScheduler+0xcc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3354      	adds	r3, #84	@ 0x54
 8006f2a:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <vTaskStartScheduler+0xd0>)
 8006f2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f2e:	4b15      	ldr	r3, [pc, #84]	@ (8006f84 <vTaskStartScheduler+0xd4>)
 8006f30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f36:	4b14      	ldr	r3, [pc, #80]	@ (8006f88 <vTaskStartScheduler+0xd8>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f3c:	4b13      	ldr	r3, [pc, #76]	@ (8006f8c <vTaskStartScheduler+0xdc>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f42:	f001 f8d1 	bl	80080e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f46:	e00f      	b.n	8006f68 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f4e:	d10b      	bne.n	8006f68 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	60fb      	str	r3, [r7, #12]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <vTaskStartScheduler+0xb4>
}
 8006f68:	bf00      	nop
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	080089e0 	.word	0x080089e0
 8006f74:	080075b9 	.word	0x080075b9
 8006f78:	20000ecc 	.word	0x20000ecc
 8006f7c:	200009d4 	.word	0x200009d4
 8006f80:	20000014 	.word	0x20000014
 8006f84:	20000ec8 	.word	0x20000ec8
 8006f88:	20000eb4 	.word	0x20000eb4
 8006f8c:	20000eac 	.word	0x20000eac

08006f90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f94:	4b04      	ldr	r3, [pc, #16]	@ (8006fa8 <vTaskSuspendAll+0x18>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	4a03      	ldr	r2, [pc, #12]	@ (8006fa8 <vTaskSuspendAll+0x18>)
 8006f9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f9e:	bf00      	nop
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc80      	pop	{r7}
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	20000ed0 	.word	0x20000ed0

08006fac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fba:	4b42      	ldr	r3, [pc, #264]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <xTaskResumeAll+0x2e>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	603b      	str	r3, [r7, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	e7fd      	b.n	8006fd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fda:	f001 f8f7 	bl	80081cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fde:	4b39      	ldr	r3, [pc, #228]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	4a37      	ldr	r2, [pc, #220]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fe6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe8:	4b36      	ldr	r3, [pc, #216]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d162      	bne.n	80070b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ff0:	4b35      	ldr	r3, [pc, #212]	@ (80070c8 <xTaskResumeAll+0x11c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d05e      	beq.n	80070b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ff8:	e02f      	b.n	800705a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffa:	4b34      	ldr	r3, [pc, #208]	@ (80070cc <xTaskResumeAll+0x120>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3318      	adds	r3, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe ff7e 	bl	8005f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe ff79 	bl	8005f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701a:	4b2d      	ldr	r3, [pc, #180]	@ (80070d0 <xTaskResumeAll+0x124>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <xTaskResumeAll+0x7e>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	4a2a      	ldr	r2, [pc, #168]	@ (80070d0 <xTaskResumeAll+0x124>)
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a27      	ldr	r2, [pc, #156]	@ (80070d4 <xTaskResumeAll+0x128>)
 8007038:	441a      	add	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe ff06 	bl	8005e52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	4b23      	ldr	r3, [pc, #140]	@ (80070d8 <xTaskResumeAll+0x12c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	429a      	cmp	r2, r3
 8007052:	d302      	bcc.n	800705a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007054:	4b21      	ldr	r3, [pc, #132]	@ (80070dc <xTaskResumeAll+0x130>)
 8007056:	2201      	movs	r2, #1
 8007058:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800705a:	4b1c      	ldr	r3, [pc, #112]	@ (80070cc <xTaskResumeAll+0x120>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1cb      	bne.n	8006ffa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007068:	f000 fb62 	bl	8007730 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800706c:	4b1c      	ldr	r3, [pc, #112]	@ (80070e0 <xTaskResumeAll+0x134>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d010      	beq.n	800709a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007078:	f000 f844 	bl	8007104 <xTaskIncrementTick>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007082:	4b16      	ldr	r3, [pc, #88]	@ (80070dc <xTaskResumeAll+0x130>)
 8007084:	2201      	movs	r2, #1
 8007086:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3b01      	subs	r3, #1
 800708c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f1      	bne.n	8007078 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007094:	4b12      	ldr	r3, [pc, #72]	@ (80070e0 <xTaskResumeAll+0x134>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800709a:	4b10      	ldr	r3, [pc, #64]	@ (80070dc <xTaskResumeAll+0x130>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070a2:	2301      	movs	r3, #1
 80070a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070a6:	4b0f      	ldr	r3, [pc, #60]	@ (80070e4 <xTaskResumeAll+0x138>)
 80070a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070b6:	f001 f8b9 	bl	800822c <vPortExitCritical>

	return xAlreadyYielded;
 80070ba:	68bb      	ldr	r3, [r7, #8]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000ed0 	.word	0x20000ed0
 80070c8:	20000ea8 	.word	0x20000ea8
 80070cc:	20000e68 	.word	0x20000e68
 80070d0:	20000eb0 	.word	0x20000eb0
 80070d4:	200009d8 	.word	0x200009d8
 80070d8:	200009d4 	.word	0x200009d4
 80070dc:	20000ebc 	.word	0x20000ebc
 80070e0:	20000eb8 	.word	0x20000eb8
 80070e4:	e000ed04 	.word	0xe000ed04

080070e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070ee:	4b04      	ldr	r3, [pc, #16]	@ (8007100 <xTaskGetTickCount+0x18>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070f4:	687b      	ldr	r3, [r7, #4]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr
 8007100:	20000eac 	.word	0x20000eac

08007104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800710e:	4b4f      	ldr	r3, [pc, #316]	@ (800724c <xTaskIncrementTick+0x148>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f040 8090 	bne.w	8007238 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007118:	4b4d      	ldr	r3, [pc, #308]	@ (8007250 <xTaskIncrementTick+0x14c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3301      	adds	r3, #1
 800711e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007120:	4a4b      	ldr	r2, [pc, #300]	@ (8007250 <xTaskIncrementTick+0x14c>)
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d121      	bne.n	8007170 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800712c:	4b49      	ldr	r3, [pc, #292]	@ (8007254 <xTaskIncrementTick+0x150>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	603b      	str	r3, [r7, #0]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <xTaskIncrementTick+0x46>
 800714e:	4b41      	ldr	r3, [pc, #260]	@ (8007254 <xTaskIncrementTick+0x150>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	4b40      	ldr	r3, [pc, #256]	@ (8007258 <xTaskIncrementTick+0x154>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a3e      	ldr	r2, [pc, #248]	@ (8007254 <xTaskIncrementTick+0x150>)
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	4a3e      	ldr	r2, [pc, #248]	@ (8007258 <xTaskIncrementTick+0x154>)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	4b3e      	ldr	r3, [pc, #248]	@ (800725c <xTaskIncrementTick+0x158>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	4a3c      	ldr	r2, [pc, #240]	@ (800725c <xTaskIncrementTick+0x158>)
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	f000 fae0 	bl	8007730 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007170:	4b3b      	ldr	r3, [pc, #236]	@ (8007260 <xTaskIncrementTick+0x15c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	429a      	cmp	r2, r3
 8007178:	d349      	bcc.n	800720e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800717a:	4b36      	ldr	r3, [pc, #216]	@ (8007254 <xTaskIncrementTick+0x150>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007184:	4b36      	ldr	r3, [pc, #216]	@ (8007260 <xTaskIncrementTick+0x15c>)
 8007186:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800718a:	601a      	str	r2, [r3, #0]
					break;
 800718c:	e03f      	b.n	800720e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800718e:	4b31      	ldr	r3, [pc, #196]	@ (8007254 <xTaskIncrementTick+0x150>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d203      	bcs.n	80071ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071a6:	4a2e      	ldr	r2, [pc, #184]	@ (8007260 <xTaskIncrementTick+0x15c>)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071ac:	e02f      	b.n	800720e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	3304      	adds	r3, #4
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe fea8 	bl	8005f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3318      	adds	r3, #24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe fe9f 	bl	8005f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ce:	4b25      	ldr	r3, [pc, #148]	@ (8007264 <xTaskIncrementTick+0x160>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d903      	bls.n	80071de <xTaskIncrementTick+0xda>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071da:	4a22      	ldr	r2, [pc, #136]	@ (8007264 <xTaskIncrementTick+0x160>)
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e2:	4613      	mov	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007268 <xTaskIncrementTick+0x164>)
 80071ec:	441a      	add	r2, r3
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f7fe fe2c 	bl	8005e52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fe:	4b1b      	ldr	r3, [pc, #108]	@ (800726c <xTaskIncrementTick+0x168>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007204:	429a      	cmp	r2, r3
 8007206:	d3b8      	bcc.n	800717a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007208:	2301      	movs	r3, #1
 800720a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800720c:	e7b5      	b.n	800717a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800720e:	4b17      	ldr	r3, [pc, #92]	@ (800726c <xTaskIncrementTick+0x168>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007214:	4914      	ldr	r1, [pc, #80]	@ (8007268 <xTaskIncrementTick+0x164>)
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	440b      	add	r3, r1
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d901      	bls.n	800722a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007226:	2301      	movs	r3, #1
 8007228:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800722a:	4b11      	ldr	r3, [pc, #68]	@ (8007270 <xTaskIncrementTick+0x16c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007232:	2301      	movs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	e004      	b.n	8007242 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007238:	4b0e      	ldr	r3, [pc, #56]	@ (8007274 <xTaskIncrementTick+0x170>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3301      	adds	r3, #1
 800723e:	4a0d      	ldr	r2, [pc, #52]	@ (8007274 <xTaskIncrementTick+0x170>)
 8007240:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007242:	697b      	ldr	r3, [r7, #20]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	20000ed0 	.word	0x20000ed0
 8007250:	20000eac 	.word	0x20000eac
 8007254:	20000e60 	.word	0x20000e60
 8007258:	20000e64 	.word	0x20000e64
 800725c:	20000ec0 	.word	0x20000ec0
 8007260:	20000ec8 	.word	0x20000ec8
 8007264:	20000eb0 	.word	0x20000eb0
 8007268:	200009d8 	.word	0x200009d8
 800726c:	200009d4 	.word	0x200009d4
 8007270:	20000ebc 	.word	0x20000ebc
 8007274:	20000eb8 	.word	0x20000eb8

08007278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800727e:	4b2a      	ldr	r3, [pc, #168]	@ (8007328 <vTaskSwitchContext+0xb0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007286:	4b29      	ldr	r3, [pc, #164]	@ (800732c <vTaskSwitchContext+0xb4>)
 8007288:	2201      	movs	r2, #1
 800728a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800728c:	e047      	b.n	800731e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800728e:	4b27      	ldr	r3, [pc, #156]	@ (800732c <vTaskSwitchContext+0xb4>)
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007294:	4b26      	ldr	r3, [pc, #152]	@ (8007330 <vTaskSwitchContext+0xb8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	e011      	b.n	80072c0 <vTaskSwitchContext+0x48>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10b      	bne.n	80072ba <vTaskSwitchContext+0x42>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	607b      	str	r3, [r7, #4]
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop
 80072b8:	e7fd      	b.n	80072b6 <vTaskSwitchContext+0x3e>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3b01      	subs	r3, #1
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	491c      	ldr	r1, [pc, #112]	@ (8007334 <vTaskSwitchContext+0xbc>)
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0e3      	beq.n	800729c <vTaskSwitchContext+0x24>
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4a15      	ldr	r2, [pc, #84]	@ (8007334 <vTaskSwitchContext+0xbc>)
 80072e0:	4413      	add	r3, r2
 80072e2:	60bb      	str	r3, [r7, #8]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	3308      	adds	r3, #8
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d104      	bne.n	8007304 <vTaskSwitchContext+0x8c>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	605a      	str	r2, [r3, #4]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	4a0b      	ldr	r2, [pc, #44]	@ (8007338 <vTaskSwitchContext+0xc0>)
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	4a08      	ldr	r2, [pc, #32]	@ (8007330 <vTaskSwitchContext+0xb8>)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007314:	4b08      	ldr	r3, [pc, #32]	@ (8007338 <vTaskSwitchContext+0xc0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3354      	adds	r3, #84	@ 0x54
 800731a:	4a08      	ldr	r2, [pc, #32]	@ (800733c <vTaskSwitchContext+0xc4>)
 800731c:	6013      	str	r3, [r2, #0]
}
 800731e:	bf00      	nop
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr
 8007328:	20000ed0 	.word	0x20000ed0
 800732c:	20000ebc 	.word	0x20000ebc
 8007330:	20000eb0 	.word	0x20000eb0
 8007334:	200009d8 	.word	0x200009d8
 8007338:	200009d4 	.word	0x200009d4
 800733c:	20000014 	.word	0x20000014

08007340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10b      	bne.n	8007368 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	60fb      	str	r3, [r7, #12]
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007368:	4b07      	ldr	r3, [pc, #28]	@ (8007388 <vTaskPlaceOnEventList+0x48>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3318      	adds	r3, #24
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7fe fd91 	bl	8005e98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007376:	2101      	movs	r1, #1
 8007378:	6838      	ldr	r0, [r7, #0]
 800737a:	f000 fa87 	bl	800788c <prvAddCurrentTaskToDelayedList>
}
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200009d4 	.word	0x200009d4

0800738c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10b      	bne.n	80073b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	617b      	str	r3, [r7, #20]
}
 80073b0:	bf00      	nop
 80073b2:	bf00      	nop
 80073b4:	e7fd      	b.n	80073b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073b6:	4b0a      	ldr	r3, [pc, #40]	@ (80073e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3318      	adds	r3, #24
 80073bc:	4619      	mov	r1, r3
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7fe fd47 	bl	8005e52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	68b8      	ldr	r0, [r7, #8]
 80073d4:	f000 fa5a 	bl	800788c <prvAddCurrentTaskToDelayedList>
	}
 80073d8:	bf00      	nop
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	200009d4 	.word	0x200009d4

080073e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10b      	bne.n	8007412 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	60fb      	str	r3, [r7, #12]
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	3318      	adds	r3, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fd76 	bl	8005f08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800741c:	4b1d      	ldr	r3, [pc, #116]	@ (8007494 <xTaskRemoveFromEventList+0xb0>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11d      	bne.n	8007460 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	3304      	adds	r3, #4
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe fd6d 	bl	8005f08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007432:	4b19      	ldr	r3, [pc, #100]	@ (8007498 <xTaskRemoveFromEventList+0xb4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d903      	bls.n	8007442 <xTaskRemoveFromEventList+0x5e>
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	4a16      	ldr	r2, [pc, #88]	@ (8007498 <xTaskRemoveFromEventList+0xb4>)
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4a13      	ldr	r2, [pc, #76]	@ (800749c <xTaskRemoveFromEventList+0xb8>)
 8007450:	441a      	add	r2, r3
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	3304      	adds	r3, #4
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f7fe fcfa 	bl	8005e52 <vListInsertEnd>
 800745e:	e005      	b.n	800746c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	3318      	adds	r3, #24
 8007464:	4619      	mov	r1, r3
 8007466:	480e      	ldr	r0, [pc, #56]	@ (80074a0 <xTaskRemoveFromEventList+0xbc>)
 8007468:	f7fe fcf3 	bl	8005e52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007470:	4b0c      	ldr	r3, [pc, #48]	@ (80074a4 <xTaskRemoveFromEventList+0xc0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	429a      	cmp	r2, r3
 8007478:	d905      	bls.n	8007486 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800747a:	2301      	movs	r3, #1
 800747c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800747e:	4b0a      	ldr	r3, [pc, #40]	@ (80074a8 <xTaskRemoveFromEventList+0xc4>)
 8007480:	2201      	movs	r2, #1
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e001      	b.n	800748a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800748a:	697b      	ldr	r3, [r7, #20]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000ed0 	.word	0x20000ed0
 8007498:	20000eb0 	.word	0x20000eb0
 800749c:	200009d8 	.word	0x200009d8
 80074a0:	20000e68 	.word	0x20000e68
 80074a4:	200009d4 	.word	0x200009d4
 80074a8:	20000ebc 	.word	0x20000ebc

080074ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074b4:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <vTaskInternalSetTimeOutState+0x24>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074bc:	4b05      	ldr	r3, [pc, #20]	@ (80074d4 <vTaskInternalSetTimeOutState+0x28>)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	605a      	str	r2, [r3, #4]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bc80      	pop	{r7}
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20000ec0 	.word	0x20000ec0
 80074d4:	20000eac 	.word	0x20000eac

080074d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	613b      	str	r3, [r7, #16]
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	e7fd      	b.n	80074fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60fb      	str	r3, [r7, #12]
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800751e:	f000 fe55 	bl	80081cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007522:	4b1d      	ldr	r3, [pc, #116]	@ (8007598 <xTaskCheckForTimeOut+0xc0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800753a:	d102      	bne.n	8007542 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800753c:	2300      	movs	r3, #0
 800753e:	61fb      	str	r3, [r7, #28]
 8007540:	e023      	b.n	800758a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	4b15      	ldr	r3, [pc, #84]	@ (800759c <xTaskCheckForTimeOut+0xc4>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d007      	beq.n	800755e <xTaskCheckForTimeOut+0x86>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	429a      	cmp	r2, r3
 8007556:	d302      	bcc.n	800755e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007558:	2301      	movs	r3, #1
 800755a:	61fb      	str	r3, [r7, #28]
 800755c:	e015      	b.n	800758a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	429a      	cmp	r2, r3
 8007566:	d20b      	bcs.n	8007580 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	1ad2      	subs	r2, r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff ff99 	bl	80074ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800757a:	2300      	movs	r3, #0
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	e004      	b.n	800758a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007586:	2301      	movs	r3, #1
 8007588:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800758a:	f000 fe4f 	bl	800822c <vPortExitCritical>

	return xReturn;
 800758e:	69fb      	ldr	r3, [r7, #28]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3720      	adds	r7, #32
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	20000eac 	.word	0x20000eac
 800759c:	20000ec0 	.word	0x20000ec0

080075a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075a4:	4b03      	ldr	r3, [pc, #12]	@ (80075b4 <vTaskMissedYield+0x14>)
 80075a6:	2201      	movs	r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
}
 80075aa:	bf00      	nop
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000ebc 	.word	0x20000ebc

080075b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075c0:	f000 f852 	bl	8007668 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075c4:	4b06      	ldr	r3, [pc, #24]	@ (80075e0 <prvIdleTask+0x28>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d9f9      	bls.n	80075c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075cc:	4b05      	ldr	r3, [pc, #20]	@ (80075e4 <prvIdleTask+0x2c>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075dc:	e7f0      	b.n	80075c0 <prvIdleTask+0x8>
 80075de:	bf00      	nop
 80075e0:	200009d8 	.word	0x200009d8
 80075e4:	e000ed04 	.word	0xe000ed04

080075e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
 80075f2:	e00c      	b.n	800760e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4a12      	ldr	r2, [pc, #72]	@ (8007648 <prvInitialiseTaskLists+0x60>)
 8007600:	4413      	add	r3, r2
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fbfa 	bl	8005dfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3301      	adds	r3, #1
 800760c:	607b      	str	r3, [r7, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b37      	cmp	r3, #55	@ 0x37
 8007612:	d9ef      	bls.n	80075f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007614:	480d      	ldr	r0, [pc, #52]	@ (800764c <prvInitialiseTaskLists+0x64>)
 8007616:	f7fe fbf1 	bl	8005dfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800761a:	480d      	ldr	r0, [pc, #52]	@ (8007650 <prvInitialiseTaskLists+0x68>)
 800761c:	f7fe fbee 	bl	8005dfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007620:	480c      	ldr	r0, [pc, #48]	@ (8007654 <prvInitialiseTaskLists+0x6c>)
 8007622:	f7fe fbeb 	bl	8005dfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007626:	480c      	ldr	r0, [pc, #48]	@ (8007658 <prvInitialiseTaskLists+0x70>)
 8007628:	f7fe fbe8 	bl	8005dfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800762c:	480b      	ldr	r0, [pc, #44]	@ (800765c <prvInitialiseTaskLists+0x74>)
 800762e:	f7fe fbe5 	bl	8005dfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007632:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <prvInitialiseTaskLists+0x78>)
 8007634:	4a05      	ldr	r2, [pc, #20]	@ (800764c <prvInitialiseTaskLists+0x64>)
 8007636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007638:	4b0a      	ldr	r3, [pc, #40]	@ (8007664 <prvInitialiseTaskLists+0x7c>)
 800763a:	4a05      	ldr	r2, [pc, #20]	@ (8007650 <prvInitialiseTaskLists+0x68>)
 800763c:	601a      	str	r2, [r3, #0]
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	200009d8 	.word	0x200009d8
 800764c:	20000e38 	.word	0x20000e38
 8007650:	20000e4c 	.word	0x20000e4c
 8007654:	20000e68 	.word	0x20000e68
 8007658:	20000e7c 	.word	0x20000e7c
 800765c:	20000e94 	.word	0x20000e94
 8007660:	20000e60 	.word	0x20000e60
 8007664:	20000e64 	.word	0x20000e64

08007668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800766e:	e019      	b.n	80076a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007670:	f000 fdac 	bl	80081cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007674:	4b10      	ldr	r3, [pc, #64]	@ (80076b8 <prvCheckTasksWaitingTermination+0x50>)
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe fc41 	bl	8005f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007686:	4b0d      	ldr	r3, [pc, #52]	@ (80076bc <prvCheckTasksWaitingTermination+0x54>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3b01      	subs	r3, #1
 800768c:	4a0b      	ldr	r2, [pc, #44]	@ (80076bc <prvCheckTasksWaitingTermination+0x54>)
 800768e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007690:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <prvCheckTasksWaitingTermination+0x58>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3b01      	subs	r3, #1
 8007696:	4a0a      	ldr	r2, [pc, #40]	@ (80076c0 <prvCheckTasksWaitingTermination+0x58>)
 8007698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800769a:	f000 fdc7 	bl	800822c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f810 	bl	80076c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076a4:	4b06      	ldr	r3, [pc, #24]	@ (80076c0 <prvCheckTasksWaitingTermination+0x58>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e1      	bne.n	8007670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20000e7c 	.word	0x20000e7c
 80076bc:	20000ea8 	.word	0x20000ea8
 80076c0:	20000e90 	.word	0x20000e90

080076c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3354      	adds	r3, #84	@ 0x54
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 f871 	bl	80087b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d108      	bne.n	80076f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 ff41 	bl	800856c <vPortFree>
				vPortFree( pxTCB );
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 ff3e 	bl	800856c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076f0:	e019      	b.n	8007726 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d103      	bne.n	8007704 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 ff35 	bl	800856c <vPortFree>
	}
 8007702:	e010      	b.n	8007726 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800770a:	2b02      	cmp	r3, #2
 800770c:	d00b      	beq.n	8007726 <prvDeleteTCB+0x62>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	60fb      	str	r3, [r7, #12]
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	e7fd      	b.n	8007722 <prvDeleteTCB+0x5e>
	}
 8007726:	bf00      	nop
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007736:	4b0c      	ldr	r3, [pc, #48]	@ (8007768 <prvResetNextTaskUnblockTime+0x38>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d104      	bne.n	800774a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007740:	4b0a      	ldr	r3, [pc, #40]	@ (800776c <prvResetNextTaskUnblockTime+0x3c>)
 8007742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007746:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007748:	e008      	b.n	800775c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800774a:	4b07      	ldr	r3, [pc, #28]	@ (8007768 <prvResetNextTaskUnblockTime+0x38>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4a04      	ldr	r2, [pc, #16]	@ (800776c <prvResetNextTaskUnblockTime+0x3c>)
 800775a:	6013      	str	r3, [r2, #0]
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	20000e60 	.word	0x20000e60
 800776c:	20000ec8 	.word	0x20000ec8

08007770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007776:	4b0b      	ldr	r3, [pc, #44]	@ (80077a4 <xTaskGetSchedulerState+0x34>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800777e:	2301      	movs	r3, #1
 8007780:	607b      	str	r3, [r7, #4]
 8007782:	e008      	b.n	8007796 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007784:	4b08      	ldr	r3, [pc, #32]	@ (80077a8 <xTaskGetSchedulerState+0x38>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800778c:	2302      	movs	r3, #2
 800778e:	607b      	str	r3, [r7, #4]
 8007790:	e001      	b.n	8007796 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007792:	2300      	movs	r3, #0
 8007794:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007796:	687b      	ldr	r3, [r7, #4]
	}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000eb4 	.word	0x20000eb4
 80077a8:	20000ed0 	.word	0x20000ed0

080077ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077b8:	2300      	movs	r3, #0
 80077ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d058      	beq.n	8007874 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077c2:	4b2f      	ldr	r3, [pc, #188]	@ (8007880 <xTaskPriorityDisinherit+0xd4>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d00b      	beq.n	80077e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60fb      	str	r3, [r7, #12]
}
 80077de:	bf00      	nop
 80077e0:	bf00      	nop
 80077e2:	e7fd      	b.n	80077e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10b      	bne.n	8007804 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	60bb      	str	r3, [r7, #8]
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	e7fd      	b.n	8007800 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007808:	1e5a      	subs	r2, r3, #1
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007816:	429a      	cmp	r2, r3
 8007818:	d02c      	beq.n	8007874 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800781e:	2b00      	cmp	r3, #0
 8007820:	d128      	bne.n	8007874 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	3304      	adds	r3, #4
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fb6e 	bl	8005f08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007838:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007844:	4b0f      	ldr	r3, [pc, #60]	@ (8007884 <xTaskPriorityDisinherit+0xd8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	429a      	cmp	r2, r3
 800784a:	d903      	bls.n	8007854 <xTaskPriorityDisinherit+0xa8>
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007850:	4a0c      	ldr	r2, [pc, #48]	@ (8007884 <xTaskPriorityDisinherit+0xd8>)
 8007852:	6013      	str	r3, [r2, #0]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007858:	4613      	mov	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4a09      	ldr	r2, [pc, #36]	@ (8007888 <xTaskPriorityDisinherit+0xdc>)
 8007862:	441a      	add	r2, r3
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	3304      	adds	r3, #4
 8007868:	4619      	mov	r1, r3
 800786a:	4610      	mov	r0, r2
 800786c:	f7fe faf1 	bl	8005e52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007870:	2301      	movs	r3, #1
 8007872:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007874:	697b      	ldr	r3, [r7, #20]
	}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	200009d4 	.word	0x200009d4
 8007884:	20000eb0 	.word	0x20000eb0
 8007888:	200009d8 	.word	0x200009d8

0800788c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007896:	4b21      	ldr	r3, [pc, #132]	@ (800791c <prvAddCurrentTaskToDelayedList+0x90>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800789c:	4b20      	ldr	r3, [pc, #128]	@ (8007920 <prvAddCurrentTaskToDelayedList+0x94>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3304      	adds	r3, #4
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fb30 	bl	8005f08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078ae:	d10a      	bne.n	80078c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d007      	beq.n	80078c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007920 <prvAddCurrentTaskToDelayedList+0x94>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4619      	mov	r1, r3
 80078be:	4819      	ldr	r0, [pc, #100]	@ (8007924 <prvAddCurrentTaskToDelayedList+0x98>)
 80078c0:	f7fe fac7 	bl	8005e52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078c4:	e026      	b.n	8007914 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4413      	add	r3, r2
 80078cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078ce:	4b14      	ldr	r3, [pc, #80]	@ (8007920 <prvAddCurrentTaskToDelayedList+0x94>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d209      	bcs.n	80078f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078de:	4b12      	ldr	r3, [pc, #72]	@ (8007928 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007920 <prvAddCurrentTaskToDelayedList+0x94>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4619      	mov	r1, r3
 80078ea:	4610      	mov	r0, r2
 80078ec:	f7fe fad4 	bl	8005e98 <vListInsert>
}
 80078f0:	e010      	b.n	8007914 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078f2:	4b0e      	ldr	r3, [pc, #56]	@ (800792c <prvAddCurrentTaskToDelayedList+0xa0>)
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007920 <prvAddCurrentTaskToDelayedList+0x94>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3304      	adds	r3, #4
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f7fe faca 	bl	8005e98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007904:	4b0a      	ldr	r3, [pc, #40]	@ (8007930 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	d202      	bcs.n	8007914 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800790e:	4a08      	ldr	r2, [pc, #32]	@ (8007930 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	6013      	str	r3, [r2, #0]
}
 8007914:	bf00      	nop
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20000eac 	.word	0x20000eac
 8007920:	200009d4 	.word	0x200009d4
 8007924:	20000e94 	.word	0x20000e94
 8007928:	20000e64 	.word	0x20000e64
 800792c:	20000e60 	.word	0x20000e60
 8007930:	20000ec8 	.word	0x20000ec8

08007934 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08a      	sub	sp, #40	@ 0x28
 8007938:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800793a:	2300      	movs	r3, #0
 800793c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800793e:	f000 fb11 	bl	8007f64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007942:	4b1d      	ldr	r3, [pc, #116]	@ (80079b8 <xTimerCreateTimerTask+0x84>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d021      	beq.n	800798e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800794e:	2300      	movs	r3, #0
 8007950:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007952:	1d3a      	adds	r2, r7, #4
 8007954:	f107 0108 	add.w	r1, r7, #8
 8007958:	f107 030c 	add.w	r3, r7, #12
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe fa33 	bl	8005dc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	9202      	str	r2, [sp, #8]
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	2302      	movs	r3, #2
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	2300      	movs	r3, #0
 8007972:	460a      	mov	r2, r1
 8007974:	4911      	ldr	r1, [pc, #68]	@ (80079bc <xTimerCreateTimerTask+0x88>)
 8007976:	4812      	ldr	r0, [pc, #72]	@ (80079c0 <xTimerCreateTimerTask+0x8c>)
 8007978:	f7ff f8a6 	bl	8006ac8 <xTaskCreateStatic>
 800797c:	4603      	mov	r3, r0
 800797e:	4a11      	ldr	r2, [pc, #68]	@ (80079c4 <xTimerCreateTimerTask+0x90>)
 8007980:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007982:	4b10      	ldr	r3, [pc, #64]	@ (80079c4 <xTimerCreateTimerTask+0x90>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800798a:	2301      	movs	r3, #1
 800798c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10b      	bne.n	80079ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	613b      	str	r3, [r7, #16]
}
 80079a6:	bf00      	nop
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079ac:	697b      	ldr	r3, [r7, #20]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000f04 	.word	0x20000f04
 80079bc:	080089e8 	.word	0x080089e8
 80079c0:	08007b01 	.word	0x08007b01
 80079c4:	20000f08 	.word	0x20000f08

080079c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	@ 0x28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10b      	bne.n	80079f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	623b      	str	r3, [r7, #32]
}
 80079f2:	bf00      	nop
 80079f4:	bf00      	nop
 80079f6:	e7fd      	b.n	80079f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079f8:	4b19      	ldr	r3, [pc, #100]	@ (8007a60 <xTimerGenericCommand+0x98>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d02a      	beq.n	8007a56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	dc18      	bgt.n	8007a44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a12:	f7ff fead 	bl	8007770 <xTaskGetSchedulerState>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d109      	bne.n	8007a30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a1c:	4b10      	ldr	r3, [pc, #64]	@ (8007a60 <xTimerGenericCommand+0x98>)
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	f107 0110 	add.w	r1, r7, #16
 8007a24:	2300      	movs	r3, #0
 8007a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a28:	f7fe fbde 	bl	80061e8 <xQueueGenericSend>
 8007a2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a2e:	e012      	b.n	8007a56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a30:	4b0b      	ldr	r3, [pc, #44]	@ (8007a60 <xTimerGenericCommand+0x98>)
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	f107 0110 	add.w	r1, r7, #16
 8007a38:	2300      	movs	r3, #0
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f7fe fbd4 	bl	80061e8 <xQueueGenericSend>
 8007a40:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a42:	e008      	b.n	8007a56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a44:	4b06      	ldr	r3, [pc, #24]	@ (8007a60 <xTimerGenericCommand+0x98>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	f107 0110 	add.w	r1, r7, #16
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	f7fe fccc 	bl	80063ec <xQueueGenericSendFromISR>
 8007a54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3728      	adds	r7, #40	@ 0x28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000f04 	.word	0x20000f04

08007a64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a6e:	4b23      	ldr	r3, [pc, #140]	@ (8007afc <prvProcessExpiredTimer+0x98>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe fa43 	bl	8005f08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a88:	f003 0304 	and.w	r3, r3, #4
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d023      	beq.n	8007ad8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	699a      	ldr	r2, [r3, #24]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	18d1      	adds	r1, r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	6978      	ldr	r0, [r7, #20]
 8007a9e:	f000 f8d3 	bl	8007c48 <prvInsertTimerInActiveList>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d020      	beq.n	8007aea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	2300      	movs	r3, #0
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	6978      	ldr	r0, [r7, #20]
 8007ab4:	f7ff ff88 	bl	80079c8 <xTimerGenericCommand>
 8007ab8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d114      	bne.n	8007aea <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	e7fd      	b.n	8007ad4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	6978      	ldr	r0, [r7, #20]
 8007af0:	4798      	blx	r3
}
 8007af2:	bf00      	nop
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20000efc 	.word	0x20000efc

08007b00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b08:	f107 0308 	add.w	r3, r7, #8
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 f859 	bl	8007bc4 <prvGetNextExpireTime>
 8007b12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4619      	mov	r1, r3
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f805 	bl	8007b28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b1e:	f000 f8d5 	bl	8007ccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b22:	bf00      	nop
 8007b24:	e7f0      	b.n	8007b08 <prvTimerTask+0x8>
	...

08007b28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b32:	f7ff fa2d 	bl	8006f90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b36:	f107 0308 	add.w	r3, r7, #8
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 f864 	bl	8007c08 <prvSampleTimeNow>
 8007b40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d130      	bne.n	8007baa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <prvProcessTimerOrBlockTask+0x3c>
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d806      	bhi.n	8007b64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b56:	f7ff fa29 	bl	8006fac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7ff ff81 	bl	8007a64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b62:	e024      	b.n	8007bae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b6a:	4b13      	ldr	r3, [pc, #76]	@ (8007bb8 <prvProcessTimerOrBlockTask+0x90>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <prvProcessTimerOrBlockTask+0x50>
 8007b74:	2301      	movs	r3, #1
 8007b76:	e000      	b.n	8007b7a <prvProcessTimerOrBlockTask+0x52>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007bbc <prvProcessTimerOrBlockTask+0x94>)
 8007b7e:	6818      	ldr	r0, [r3, #0]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	f7fe ff69 	bl	8006a60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b8e:	f7ff fa0d 	bl	8006fac <xTaskResumeAll>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b98:	4b09      	ldr	r3, [pc, #36]	@ (8007bc0 <prvProcessTimerOrBlockTask+0x98>)
 8007b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	f3bf 8f6f 	isb	sy
}
 8007ba8:	e001      	b.n	8007bae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007baa:	f7ff f9ff 	bl	8006fac <xTaskResumeAll>
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000f00 	.word	0x20000f00
 8007bbc:	20000f04 	.word	0x20000f04
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <prvGetNextExpireTime+0x40>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <prvGetNextExpireTime+0x16>
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	e000      	b.n	8007bdc <prvGetNextExpireTime+0x18>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d105      	bne.n	8007bf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007be8:	4b06      	ldr	r3, [pc, #24]	@ (8007c04 <prvGetNextExpireTime+0x40>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	e001      	b.n	8007bf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bc80      	pop	{r7}
 8007c02:	4770      	bx	lr
 8007c04:	20000efc 	.word	0x20000efc

08007c08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c10:	f7ff fa6a 	bl	80070e8 <xTaskGetTickCount>
 8007c14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c16:	4b0b      	ldr	r3, [pc, #44]	@ (8007c44 <prvSampleTimeNow+0x3c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d205      	bcs.n	8007c2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c20:	f000 f93a 	bl	8007e98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	e002      	b.n	8007c32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c32:	4a04      	ldr	r2, [pc, #16]	@ (8007c44 <prvSampleTimeNow+0x3c>)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c38:	68fb      	ldr	r3, [r7, #12]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000f0c 	.word	0x20000f0c

08007c48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c56:	2300      	movs	r3, #0
 8007c58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d812      	bhi.n	8007c94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	1ad2      	subs	r2, r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d302      	bcc.n	8007c82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	e01b      	b.n	8007cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c82:	4b10      	ldr	r3, [pc, #64]	@ (8007cc4 <prvInsertTimerInActiveList+0x7c>)
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	f7fe f903 	bl	8005e98 <vListInsert>
 8007c92:	e012      	b.n	8007cba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d206      	bcs.n	8007caa <prvInsertTimerInActiveList+0x62>
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d302      	bcc.n	8007caa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e007      	b.n	8007cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007caa:	4b07      	ldr	r3, [pc, #28]	@ (8007cc8 <prvInsertTimerInActiveList+0x80>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	f7fe f8ef 	bl	8005e98 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cba:	697b      	ldr	r3, [r7, #20]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20000f00 	.word	0x20000f00
 8007cc8:	20000efc 	.word	0x20000efc

08007ccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08e      	sub	sp, #56	@ 0x38
 8007cd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cd2:	e0ce      	b.n	8007e72 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da19      	bge.n	8007d0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cda:	1d3b      	adds	r3, r7, #4
 8007cdc:	3304      	adds	r3, #4
 8007cde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	61fb      	str	r3, [r7, #28]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d04:	6850      	ldr	r0, [r2, #4]
 8007d06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d08:	6892      	ldr	r2, [r2, #8]
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f2c0 80ae 	blt.w	8007e72 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d004      	beq.n	8007d2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d24:	3304      	adds	r3, #4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe f8ee 	bl	8005f08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff ff6a 	bl	8007c08 <prvSampleTimeNow>
 8007d34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b09      	cmp	r3, #9
 8007d3a:	f200 8097 	bhi.w	8007e6c <prvProcessReceivedCommands+0x1a0>
 8007d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d44 <prvProcessReceivedCommands+0x78>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d6d 	.word	0x08007d6d
 8007d48:	08007d6d 	.word	0x08007d6d
 8007d4c:	08007d6d 	.word	0x08007d6d
 8007d50:	08007de3 	.word	0x08007de3
 8007d54:	08007df7 	.word	0x08007df7
 8007d58:	08007e43 	.word	0x08007e43
 8007d5c:	08007d6d 	.word	0x08007d6d
 8007d60:	08007d6d 	.word	0x08007d6d
 8007d64:	08007de3 	.word	0x08007de3
 8007d68:	08007df7 	.word	0x08007df7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d72:	f043 0301 	orr.w	r3, r3, #1
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	18d1      	adds	r1, r2, r3
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d8c:	f7ff ff5c 	bl	8007c48 <prvInsertTimerInActiveList>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d06c      	beq.n	8007e70 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d061      	beq.n	8007e70 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	441a      	add	r2, r3
 8007db4:	2300      	movs	r3, #0
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	2300      	movs	r3, #0
 8007dba:	2100      	movs	r1, #0
 8007dbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dbe:	f7ff fe03 	bl	80079c8 <xTimerGenericCommand>
 8007dc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d152      	bne.n	8007e70 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	61bb      	str	r3, [r7, #24]
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	e7fd      	b.n	8007dde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007de8:	f023 0301 	bic.w	r3, r3, #1
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007df4:	e03d      	b.n	8007e72 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dfc:	f043 0301 	orr.w	r3, r3, #1
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10b      	bne.n	8007e2e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	617b      	str	r3, [r7, #20]
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	e7fd      	b.n	8007e2a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e34:	18d1      	adds	r1, r2, r3
 8007e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e3c:	f7ff ff04 	bl	8007c48 <prvInsertTimerInActiveList>
					break;
 8007e40:	e017      	b.n	8007e72 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d103      	bne.n	8007e58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e52:	f000 fb8b 	bl	800856c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e56:	e00c      	b.n	8007e72 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e5e:	f023 0301 	bic.w	r3, r3, #1
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e6a:	e002      	b.n	8007e72 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007e6c:	bf00      	nop
 8007e6e:	e000      	b.n	8007e72 <prvProcessReceivedCommands+0x1a6>
					break;
 8007e70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e72:	4b08      	ldr	r3, [pc, #32]	@ (8007e94 <prvProcessReceivedCommands+0x1c8>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	1d39      	adds	r1, r7, #4
 8007e78:	2200      	movs	r2, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe fb54 	bl	8006528 <xQueueReceive>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f47f af26 	bne.w	8007cd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	3730      	adds	r7, #48	@ 0x30
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000f04 	.word	0x20000f04

08007e98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e9e:	e049      	b.n	8007f34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8007f5c <prvSwitchTimerLists+0xc4>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8007f5c <prvSwitchTimerLists+0xc4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe f825 	bl	8005f08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d02f      	beq.n	8007f34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4413      	add	r3, r2
 8007edc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d90e      	bls.n	8007f04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8007f5c <prvSwitchTimerLists+0xc4>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	4619      	mov	r1, r3
 8007efc:	4610      	mov	r0, r2
 8007efe:	f7fd ffcb 	bl	8005e98 <vListInsert>
 8007f02:	e017      	b.n	8007f34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f04:	2300      	movs	r3, #0
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff fd5a 	bl	80079c8 <xTimerGenericCommand>
 8007f14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10b      	bne.n	8007f34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	603b      	str	r3, [r7, #0]
}
 8007f2e:	bf00      	nop
 8007f30:	bf00      	nop
 8007f32:	e7fd      	b.n	8007f30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f34:	4b09      	ldr	r3, [pc, #36]	@ (8007f5c <prvSwitchTimerLists+0xc4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1b0      	bne.n	8007ea0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f3e:	4b07      	ldr	r3, [pc, #28]	@ (8007f5c <prvSwitchTimerLists+0xc4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f44:	4b06      	ldr	r3, [pc, #24]	@ (8007f60 <prvSwitchTimerLists+0xc8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a04      	ldr	r2, [pc, #16]	@ (8007f5c <prvSwitchTimerLists+0xc4>)
 8007f4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f4c:	4a04      	ldr	r2, [pc, #16]	@ (8007f60 <prvSwitchTimerLists+0xc8>)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	6013      	str	r3, [r2, #0]
}
 8007f52:	bf00      	nop
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000efc 	.word	0x20000efc
 8007f60:	20000f00 	.word	0x20000f00

08007f64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f6a:	f000 f92f 	bl	80081cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f6e:	4b15      	ldr	r3, [pc, #84]	@ (8007fc4 <prvCheckForValidListAndQueue+0x60>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d120      	bne.n	8007fb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f76:	4814      	ldr	r0, [pc, #80]	@ (8007fc8 <prvCheckForValidListAndQueue+0x64>)
 8007f78:	f7fd ff40 	bl	8005dfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f7c:	4813      	ldr	r0, [pc, #76]	@ (8007fcc <prvCheckForValidListAndQueue+0x68>)
 8007f7e:	f7fd ff3d 	bl	8005dfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f82:	4b13      	ldr	r3, [pc, #76]	@ (8007fd0 <prvCheckForValidListAndQueue+0x6c>)
 8007f84:	4a10      	ldr	r2, [pc, #64]	@ (8007fc8 <prvCheckForValidListAndQueue+0x64>)
 8007f86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f88:	4b12      	ldr	r3, [pc, #72]	@ (8007fd4 <prvCheckForValidListAndQueue+0x70>)
 8007f8a:	4a10      	ldr	r2, [pc, #64]	@ (8007fcc <prvCheckForValidListAndQueue+0x68>)
 8007f8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f8e:	2300      	movs	r3, #0
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	4b11      	ldr	r3, [pc, #68]	@ (8007fd8 <prvCheckForValidListAndQueue+0x74>)
 8007f94:	4a11      	ldr	r2, [pc, #68]	@ (8007fdc <prvCheckForValidListAndQueue+0x78>)
 8007f96:	2110      	movs	r1, #16
 8007f98:	200a      	movs	r0, #10
 8007f9a:	f7fe f849 	bl	8006030 <xQueueGenericCreateStatic>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4a08      	ldr	r2, [pc, #32]	@ (8007fc4 <prvCheckForValidListAndQueue+0x60>)
 8007fa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fa4:	4b07      	ldr	r3, [pc, #28]	@ (8007fc4 <prvCheckForValidListAndQueue+0x60>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d005      	beq.n	8007fb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fac:	4b05      	ldr	r3, [pc, #20]	@ (8007fc4 <prvCheckForValidListAndQueue+0x60>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	490b      	ldr	r1, [pc, #44]	@ (8007fe0 <prvCheckForValidListAndQueue+0x7c>)
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fe fd2c 	bl	8006a10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fb8:	f000 f938 	bl	800822c <vPortExitCritical>
}
 8007fbc:	bf00      	nop
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000f04 	.word	0x20000f04
 8007fc8:	20000ed4 	.word	0x20000ed4
 8007fcc:	20000ee8 	.word	0x20000ee8
 8007fd0:	20000efc 	.word	0x20000efc
 8007fd4:	20000f00 	.word	0x20000f00
 8007fd8:	20000fb0 	.word	0x20000fb0
 8007fdc:	20000f10 	.word	0x20000f10
 8007fe0:	080089f0 	.word	0x080089f0

08007fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3b04      	subs	r3, #4
 8007ff4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3b04      	subs	r3, #4
 8008002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f023 0201 	bic.w	r2, r3, #1
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3b04      	subs	r3, #4
 8008012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008014:	4a08      	ldr	r2, [pc, #32]	@ (8008038 <pxPortInitialiseStack+0x54>)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3b14      	subs	r3, #20
 800801e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3b20      	subs	r3, #32
 800802a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800802c:	68fb      	ldr	r3, [r7, #12]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr
 8008038:	0800803d 	.word	0x0800803d

0800803c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008042:	2300      	movs	r3, #0
 8008044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008046:	4b12      	ldr	r3, [pc, #72]	@ (8008090 <prvTaskExitError+0x54>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800804e:	d00b      	beq.n	8008068 <prvTaskExitError+0x2c>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <prvTaskExitError+0x28>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	60bb      	str	r3, [r7, #8]
}
 800807a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800807c:	bf00      	nop
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0fc      	beq.n	800807e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	bc80      	pop	{r7}
 800808e:	4770      	bx	lr
 8008090:	20000010 	.word	0x20000010
	...

080080a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080a0:	4b07      	ldr	r3, [pc, #28]	@ (80080c0 <pxCurrentTCBConst2>)
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	6808      	ldr	r0, [r1, #0]
 80080a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80080aa:	f380 8809 	msr	PSP, r0
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f04f 0000 	mov.w	r0, #0
 80080b6:	f380 8811 	msr	BASEPRI, r0
 80080ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80080be:	4770      	bx	lr

080080c0 <pxCurrentTCBConst2>:
 80080c0:	200009d4 	.word	0x200009d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80080c8:	4806      	ldr	r0, [pc, #24]	@ (80080e4 <prvPortStartFirstTask+0x1c>)
 80080ca:	6800      	ldr	r0, [r0, #0]
 80080cc:	6800      	ldr	r0, [r0, #0]
 80080ce:	f380 8808 	msr	MSP, r0
 80080d2:	b662      	cpsie	i
 80080d4:	b661      	cpsie	f
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	df00      	svc	0
 80080e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080e2:	bf00      	nop
 80080e4:	e000ed08 	.word	0xe000ed08

080080e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080ee:	4b32      	ldr	r3, [pc, #200]	@ (80081b8 <xPortStartScheduler+0xd0>)
 80080f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	22ff      	movs	r2, #255	@ 0xff
 80080fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008110:	b2da      	uxtb	r2, r3
 8008112:	4b2a      	ldr	r3, [pc, #168]	@ (80081bc <xPortStartScheduler+0xd4>)
 8008114:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008116:	4b2a      	ldr	r3, [pc, #168]	@ (80081c0 <xPortStartScheduler+0xd8>)
 8008118:	2207      	movs	r2, #7
 800811a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800811c:	e009      	b.n	8008132 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800811e:	4b28      	ldr	r3, [pc, #160]	@ (80081c0 <xPortStartScheduler+0xd8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3b01      	subs	r3, #1
 8008124:	4a26      	ldr	r2, [pc, #152]	@ (80081c0 <xPortStartScheduler+0xd8>)
 8008126:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	b2db      	uxtb	r3, r3
 8008130:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800813a:	2b80      	cmp	r3, #128	@ 0x80
 800813c:	d0ef      	beq.n	800811e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800813e:	4b20      	ldr	r3, [pc, #128]	@ (80081c0 <xPortStartScheduler+0xd8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f1c3 0307 	rsb	r3, r3, #7
 8008146:	2b04      	cmp	r3, #4
 8008148:	d00b      	beq.n	8008162 <xPortStartScheduler+0x7a>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	60bb      	str	r3, [r7, #8]
}
 800815c:	bf00      	nop
 800815e:	bf00      	nop
 8008160:	e7fd      	b.n	800815e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008162:	4b17      	ldr	r3, [pc, #92]	@ (80081c0 <xPortStartScheduler+0xd8>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	4a15      	ldr	r2, [pc, #84]	@ (80081c0 <xPortStartScheduler+0xd8>)
 800816a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800816c:	4b14      	ldr	r3, [pc, #80]	@ (80081c0 <xPortStartScheduler+0xd8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008174:	4a12      	ldr	r2, [pc, #72]	@ (80081c0 <xPortStartScheduler+0xd8>)
 8008176:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	b2da      	uxtb	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008180:	4b10      	ldr	r3, [pc, #64]	@ (80081c4 <xPortStartScheduler+0xdc>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a0f      	ldr	r2, [pc, #60]	@ (80081c4 <xPortStartScheduler+0xdc>)
 8008186:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800818a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800818c:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <xPortStartScheduler+0xdc>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0c      	ldr	r2, [pc, #48]	@ (80081c4 <xPortStartScheduler+0xdc>)
 8008192:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008196:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008198:	f000 f8b8 	bl	800830c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800819c:	4b0a      	ldr	r3, [pc, #40]	@ (80081c8 <xPortStartScheduler+0xe0>)
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081a2:	f7ff ff91 	bl	80080c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081a6:	f7ff f867 	bl	8007278 <vTaskSwitchContext>
	prvTaskExitError();
 80081aa:	f7ff ff47 	bl	800803c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	e000e400 	.word	0xe000e400
 80081bc:	20001000 	.word	0x20001000
 80081c0:	20001004 	.word	0x20001004
 80081c4:	e000ed20 	.word	0xe000ed20
 80081c8:	20000010 	.word	0x20000010

080081cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	607b      	str	r3, [r7, #4]
}
 80081e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008224 <vPortEnterCritical+0x58>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	4a0d      	ldr	r2, [pc, #52]	@ (8008224 <vPortEnterCritical+0x58>)
 80081ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008224 <vPortEnterCritical+0x58>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d110      	bne.n	800821a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008228 <vPortEnterCritical+0x5c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00b      	beq.n	800821a <vPortEnterCritical+0x4e>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	603b      	str	r3, [r7, #0]
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	e7fd      	b.n	8008216 <vPortEnterCritical+0x4a>
	}
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	bc80      	pop	{r7}
 8008222:	4770      	bx	lr
 8008224:	20000010 	.word	0x20000010
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008232:	4b12      	ldr	r3, [pc, #72]	@ (800827c <vPortExitCritical+0x50>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10b      	bne.n	8008252 <vPortExitCritical+0x26>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	607b      	str	r3, [r7, #4]
}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	e7fd      	b.n	800824e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008252:	4b0a      	ldr	r3, [pc, #40]	@ (800827c <vPortExitCritical+0x50>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3b01      	subs	r3, #1
 8008258:	4a08      	ldr	r2, [pc, #32]	@ (800827c <vPortExitCritical+0x50>)
 800825a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800825c:	4b07      	ldr	r3, [pc, #28]	@ (800827c <vPortExitCritical+0x50>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d105      	bne.n	8008270 <vPortExitCritical+0x44>
 8008264:	2300      	movs	r3, #0
 8008266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f383 8811 	msr	BASEPRI, r3
}
 800826e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	20000010 	.word	0x20000010

08008280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008280:	f3ef 8009 	mrs	r0, PSP
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <pxCurrentTCBConst>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008290:	6010      	str	r0, [r2, #0]
 8008292:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008296:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800829a:	f380 8811 	msr	BASEPRI, r0
 800829e:	f7fe ffeb 	bl	8007278 <vTaskSwitchContext>
 80082a2:	f04f 0000 	mov.w	r0, #0
 80082a6:	f380 8811 	msr	BASEPRI, r0
 80082aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80082ae:	6819      	ldr	r1, [r3, #0]
 80082b0:	6808      	ldr	r0, [r1, #0]
 80082b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082b6:	f380 8809 	msr	PSP, r0
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	4770      	bx	lr

080082c0 <pxCurrentTCBConst>:
 80082c0:	200009d4 	.word	0x200009d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	607b      	str	r3, [r7, #4]
}
 80082e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082e2:	f7fe ff0f 	bl	8007104 <xTaskIncrementTick>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082ec:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <xPortSysTickHandler+0x40>)
 80082ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	2300      	movs	r3, #0
 80082f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f383 8811 	msr	BASEPRI, r3
}
 80082fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	e000ed04 	.word	0xe000ed04

0800830c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008310:	4b0a      	ldr	r3, [pc, #40]	@ (800833c <vPortSetupTimerInterrupt+0x30>)
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008316:	4b0a      	ldr	r3, [pc, #40]	@ (8008340 <vPortSetupTimerInterrupt+0x34>)
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800831c:	4b09      	ldr	r3, [pc, #36]	@ (8008344 <vPortSetupTimerInterrupt+0x38>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a09      	ldr	r2, [pc, #36]	@ (8008348 <vPortSetupTimerInterrupt+0x3c>)
 8008322:	fba2 2303 	umull	r2, r3, r2, r3
 8008326:	099b      	lsrs	r3, r3, #6
 8008328:	4a08      	ldr	r2, [pc, #32]	@ (800834c <vPortSetupTimerInterrupt+0x40>)
 800832a:	3b01      	subs	r3, #1
 800832c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800832e:	4b03      	ldr	r3, [pc, #12]	@ (800833c <vPortSetupTimerInterrupt+0x30>)
 8008330:	2207      	movs	r2, #7
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr
 800833c:	e000e010 	.word	0xe000e010
 8008340:	e000e018 	.word	0xe000e018
 8008344:	20000004 	.word	0x20000004
 8008348:	10624dd3 	.word	0x10624dd3
 800834c:	e000e014 	.word	0xe000e014

08008350 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008356:	f3ef 8305 	mrs	r3, IPSR
 800835a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b0f      	cmp	r3, #15
 8008360:	d915      	bls.n	800838e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008362:	4a17      	ldr	r2, [pc, #92]	@ (80083c0 <vPortValidateInterruptPriority+0x70>)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800836c:	4b15      	ldr	r3, [pc, #84]	@ (80083c4 <vPortValidateInterruptPriority+0x74>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	7afa      	ldrb	r2, [r7, #11]
 8008372:	429a      	cmp	r2, r3
 8008374:	d20b      	bcs.n	800838e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	607b      	str	r3, [r7, #4]
}
 8008388:	bf00      	nop
 800838a:	bf00      	nop
 800838c:	e7fd      	b.n	800838a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800838e:	4b0e      	ldr	r3, [pc, #56]	@ (80083c8 <vPortValidateInterruptPriority+0x78>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008396:	4b0d      	ldr	r3, [pc, #52]	@ (80083cc <vPortValidateInterruptPriority+0x7c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d90b      	bls.n	80083b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	603b      	str	r3, [r7, #0]
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	e7fd      	b.n	80083b2 <vPortValidateInterruptPriority+0x62>
	}
 80083b6:	bf00      	nop
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bc80      	pop	{r7}
 80083be:	4770      	bx	lr
 80083c0:	e000e3f0 	.word	0xe000e3f0
 80083c4:	20001000 	.word	0x20001000
 80083c8:	e000ed0c 	.word	0xe000ed0c
 80083cc:	20001004 	.word	0x20001004

080083d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	@ 0x28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083d8:	2300      	movs	r3, #0
 80083da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083dc:	f7fe fdd8 	bl	8006f90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083e0:	4b5c      	ldr	r3, [pc, #368]	@ (8008554 <pvPortMalloc+0x184>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083e8:	f000 f924 	bl	8008634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083ec:	4b5a      	ldr	r3, [pc, #360]	@ (8008558 <pvPortMalloc+0x188>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4013      	ands	r3, r2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f040 8095 	bne.w	8008524 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01e      	beq.n	800843e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008400:	2208      	movs	r2, #8
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4413      	add	r3, r2
 8008406:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f003 0307 	and.w	r3, r3, #7
 800840e:	2b00      	cmp	r3, #0
 8008410:	d015      	beq.n	800843e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f023 0307 	bic.w	r3, r3, #7
 8008418:	3308      	adds	r3, #8
 800841a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <pvPortMalloc+0x6e>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	617b      	str	r3, [r7, #20]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d06f      	beq.n	8008524 <pvPortMalloc+0x154>
 8008444:	4b45      	ldr	r3, [pc, #276]	@ (800855c <pvPortMalloc+0x18c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	429a      	cmp	r2, r3
 800844c:	d86a      	bhi.n	8008524 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800844e:	4b44      	ldr	r3, [pc, #272]	@ (8008560 <pvPortMalloc+0x190>)
 8008450:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008452:	4b43      	ldr	r3, [pc, #268]	@ (8008560 <pvPortMalloc+0x190>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008458:	e004      	b.n	8008464 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	429a      	cmp	r2, r3
 800846c:	d903      	bls.n	8008476 <pvPortMalloc+0xa6>
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f1      	bne.n	800845a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008476:	4b37      	ldr	r3, [pc, #220]	@ (8008554 <pvPortMalloc+0x184>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800847c:	429a      	cmp	r2, r3
 800847e:	d051      	beq.n	8008524 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2208      	movs	r2, #8
 8008486:	4413      	add	r3, r2
 8008488:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	1ad2      	subs	r2, r2, r3
 800849a:	2308      	movs	r3, #8
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	429a      	cmp	r2, r3
 80084a0:	d920      	bls.n	80084e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4413      	add	r3, r2
 80084a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <pvPortMalloc+0xfc>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	613b      	str	r3, [r7, #16]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	1ad2      	subs	r2, r2, r3
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084de:	69b8      	ldr	r0, [r7, #24]
 80084e0:	f000 f90a 	bl	80086f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084e4:	4b1d      	ldr	r3, [pc, #116]	@ (800855c <pvPortMalloc+0x18c>)
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	4a1b      	ldr	r2, [pc, #108]	@ (800855c <pvPortMalloc+0x18c>)
 80084f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084f2:	4b1a      	ldr	r3, [pc, #104]	@ (800855c <pvPortMalloc+0x18c>)
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008564 <pvPortMalloc+0x194>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d203      	bcs.n	8008506 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084fe:	4b17      	ldr	r3, [pc, #92]	@ (800855c <pvPortMalloc+0x18c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a18      	ldr	r2, [pc, #96]	@ (8008564 <pvPortMalloc+0x194>)
 8008504:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	4b13      	ldr	r3, [pc, #76]	@ (8008558 <pvPortMalloc+0x188>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	431a      	orrs	r2, r3
 8008510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008512:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800851a:	4b13      	ldr	r3, [pc, #76]	@ (8008568 <pvPortMalloc+0x198>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3301      	adds	r3, #1
 8008520:	4a11      	ldr	r2, [pc, #68]	@ (8008568 <pvPortMalloc+0x198>)
 8008522:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008524:	f7fe fd42 	bl	8006fac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00b      	beq.n	800854a <pvPortMalloc+0x17a>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60fb      	str	r3, [r7, #12]
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	e7fd      	b.n	8008546 <pvPortMalloc+0x176>
	return pvReturn;
 800854a:	69fb      	ldr	r3, [r7, #28]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3728      	adds	r7, #40	@ 0x28
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20001c10 	.word	0x20001c10
 8008558:	20001c24 	.word	0x20001c24
 800855c:	20001c14 	.word	0x20001c14
 8008560:	20001c08 	.word	0x20001c08
 8008564:	20001c18 	.word	0x20001c18
 8008568:	20001c1c 	.word	0x20001c1c

0800856c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d04f      	beq.n	800861e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800857e:	2308      	movs	r3, #8
 8008580:	425b      	negs	r3, r3
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	4413      	add	r3, r2
 8008586:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	4b25      	ldr	r3, [pc, #148]	@ (8008628 <vPortFree+0xbc>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4013      	ands	r3, r2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10b      	bne.n	80085b2 <vPortFree+0x46>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	60fb      	str	r3, [r7, #12]
}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	e7fd      	b.n	80085ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00b      	beq.n	80085d2 <vPortFree+0x66>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	60bb      	str	r3, [r7, #8]
}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	e7fd      	b.n	80085ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	4b14      	ldr	r3, [pc, #80]	@ (8008628 <vPortFree+0xbc>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4013      	ands	r3, r2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01e      	beq.n	800861e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d11a      	bne.n	800861e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008628 <vPortFree+0xbc>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	43db      	mvns	r3, r3
 80085f2:	401a      	ands	r2, r3
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085f8:	f7fe fcca 	bl	8006f90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	4b0a      	ldr	r3, [pc, #40]	@ (800862c <vPortFree+0xc0>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4413      	add	r3, r2
 8008606:	4a09      	ldr	r2, [pc, #36]	@ (800862c <vPortFree+0xc0>)
 8008608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800860a:	6938      	ldr	r0, [r7, #16]
 800860c:	f000 f874 	bl	80086f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008610:	4b07      	ldr	r3, [pc, #28]	@ (8008630 <vPortFree+0xc4>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	4a06      	ldr	r2, [pc, #24]	@ (8008630 <vPortFree+0xc4>)
 8008618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800861a:	f7fe fcc7 	bl	8006fac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800861e:	bf00      	nop
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20001c24 	.word	0x20001c24
 800862c:	20001c14 	.word	0x20001c14
 8008630:	20001c20 	.word	0x20001c20

08008634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800863a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800863e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008640:	4b27      	ldr	r3, [pc, #156]	@ (80086e0 <prvHeapInit+0xac>)
 8008642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00c      	beq.n	8008668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3307      	adds	r3, #7
 8008652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	4a1f      	ldr	r2, [pc, #124]	@ (80086e0 <prvHeapInit+0xac>)
 8008664:	4413      	add	r3, r2
 8008666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800866c:	4a1d      	ldr	r2, [pc, #116]	@ (80086e4 <prvHeapInit+0xb0>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008672:	4b1c      	ldr	r3, [pc, #112]	@ (80086e4 <prvHeapInit+0xb0>)
 8008674:	2200      	movs	r2, #0
 8008676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	4413      	add	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008680:	2208      	movs	r2, #8
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	1a9b      	subs	r3, r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0307 	bic.w	r3, r3, #7
 800868e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a15      	ldr	r2, [pc, #84]	@ (80086e8 <prvHeapInit+0xb4>)
 8008694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008696:	4b14      	ldr	r3, [pc, #80]	@ (80086e8 <prvHeapInit+0xb4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800869e:	4b12      	ldr	r3, [pc, #72]	@ (80086e8 <prvHeapInit+0xb4>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	1ad2      	subs	r2, r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086b4:	4b0c      	ldr	r3, [pc, #48]	@ (80086e8 <prvHeapInit+0xb4>)
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	4a0a      	ldr	r2, [pc, #40]	@ (80086ec <prvHeapInit+0xb8>)
 80086c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	4a09      	ldr	r2, [pc, #36]	@ (80086f0 <prvHeapInit+0xbc>)
 80086ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086cc:	4b09      	ldr	r3, [pc, #36]	@ (80086f4 <prvHeapInit+0xc0>)
 80086ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	bf00      	nop
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20001008 	.word	0x20001008
 80086e4:	20001c08 	.word	0x20001c08
 80086e8:	20001c10 	.word	0x20001c10
 80086ec:	20001c18 	.word	0x20001c18
 80086f0:	20001c14 	.word	0x20001c14
 80086f4:	20001c24 	.word	0x20001c24

080086f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008700:	4b27      	ldr	r3, [pc, #156]	@ (80087a0 <prvInsertBlockIntoFreeList+0xa8>)
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e002      	b.n	800870c <prvInsertBlockIntoFreeList+0x14>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	429a      	cmp	r2, r3
 8008714:	d8f7      	bhi.n	8008706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	4413      	add	r3, r2
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	429a      	cmp	r2, r3
 8008726:	d108      	bne.n	800873a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	441a      	add	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	441a      	add	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d118      	bne.n	8008780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b14      	ldr	r3, [pc, #80]	@ (80087a4 <prvInsertBlockIntoFreeList+0xac>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d00d      	beq.n	8008776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	441a      	add	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e008      	b.n	8008788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008776:	4b0b      	ldr	r3, [pc, #44]	@ (80087a4 <prvInsertBlockIntoFreeList+0xac>)
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	e003      	b.n	8008788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d002      	beq.n	8008796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	bc80      	pop	{r7}
 800879e:	4770      	bx	lr
 80087a0:	20001c08 	.word	0x20001c08
 80087a4:	20001c10 	.word	0x20001c10

080087a8 <memset>:
 80087a8:	4603      	mov	r3, r0
 80087aa:	4402      	add	r2, r0
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d100      	bne.n	80087b2 <memset+0xa>
 80087b0:	4770      	bx	lr
 80087b2:	f803 1b01 	strb.w	r1, [r3], #1
 80087b6:	e7f9      	b.n	80087ac <memset+0x4>

080087b8 <_reclaim_reent>:
 80087b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008870 <_reclaim_reent+0xb8>)
 80087ba:	b570      	push	{r4, r5, r6, lr}
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4604      	mov	r4, r0
 80087c0:	4283      	cmp	r3, r0
 80087c2:	d053      	beq.n	800886c <_reclaim_reent+0xb4>
 80087c4:	69c3      	ldr	r3, [r0, #28]
 80087c6:	b31b      	cbz	r3, 8008810 <_reclaim_reent+0x58>
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	b163      	cbz	r3, 80087e6 <_reclaim_reent+0x2e>
 80087cc:	2500      	movs	r5, #0
 80087ce:	69e3      	ldr	r3, [r4, #28]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	5959      	ldr	r1, [r3, r5]
 80087d4:	b9b1      	cbnz	r1, 8008804 <_reclaim_reent+0x4c>
 80087d6:	3504      	adds	r5, #4
 80087d8:	2d80      	cmp	r5, #128	@ 0x80
 80087da:	d1f8      	bne.n	80087ce <_reclaim_reent+0x16>
 80087dc:	69e3      	ldr	r3, [r4, #28]
 80087de:	4620      	mov	r0, r4
 80087e0:	68d9      	ldr	r1, [r3, #12]
 80087e2:	f000 f87b 	bl	80088dc <_free_r>
 80087e6:	69e3      	ldr	r3, [r4, #28]
 80087e8:	6819      	ldr	r1, [r3, #0]
 80087ea:	b111      	cbz	r1, 80087f2 <_reclaim_reent+0x3a>
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 f875 	bl	80088dc <_free_r>
 80087f2:	69e3      	ldr	r3, [r4, #28]
 80087f4:	689d      	ldr	r5, [r3, #8]
 80087f6:	b15d      	cbz	r5, 8008810 <_reclaim_reent+0x58>
 80087f8:	4629      	mov	r1, r5
 80087fa:	4620      	mov	r0, r4
 80087fc:	682d      	ldr	r5, [r5, #0]
 80087fe:	f000 f86d 	bl	80088dc <_free_r>
 8008802:	e7f8      	b.n	80087f6 <_reclaim_reent+0x3e>
 8008804:	680e      	ldr	r6, [r1, #0]
 8008806:	4620      	mov	r0, r4
 8008808:	f000 f868 	bl	80088dc <_free_r>
 800880c:	4631      	mov	r1, r6
 800880e:	e7e1      	b.n	80087d4 <_reclaim_reent+0x1c>
 8008810:	6961      	ldr	r1, [r4, #20]
 8008812:	b111      	cbz	r1, 800881a <_reclaim_reent+0x62>
 8008814:	4620      	mov	r0, r4
 8008816:	f000 f861 	bl	80088dc <_free_r>
 800881a:	69e1      	ldr	r1, [r4, #28]
 800881c:	b111      	cbz	r1, 8008824 <_reclaim_reent+0x6c>
 800881e:	4620      	mov	r0, r4
 8008820:	f000 f85c 	bl	80088dc <_free_r>
 8008824:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008826:	b111      	cbz	r1, 800882e <_reclaim_reent+0x76>
 8008828:	4620      	mov	r0, r4
 800882a:	f000 f857 	bl	80088dc <_free_r>
 800882e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008830:	b111      	cbz	r1, 8008838 <_reclaim_reent+0x80>
 8008832:	4620      	mov	r0, r4
 8008834:	f000 f852 	bl	80088dc <_free_r>
 8008838:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800883a:	b111      	cbz	r1, 8008842 <_reclaim_reent+0x8a>
 800883c:	4620      	mov	r0, r4
 800883e:	f000 f84d 	bl	80088dc <_free_r>
 8008842:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008844:	b111      	cbz	r1, 800884c <_reclaim_reent+0x94>
 8008846:	4620      	mov	r0, r4
 8008848:	f000 f848 	bl	80088dc <_free_r>
 800884c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800884e:	b111      	cbz	r1, 8008856 <_reclaim_reent+0x9e>
 8008850:	4620      	mov	r0, r4
 8008852:	f000 f843 	bl	80088dc <_free_r>
 8008856:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008858:	b111      	cbz	r1, 8008860 <_reclaim_reent+0xa8>
 800885a:	4620      	mov	r0, r4
 800885c:	f000 f83e 	bl	80088dc <_free_r>
 8008860:	6a23      	ldr	r3, [r4, #32]
 8008862:	b11b      	cbz	r3, 800886c <_reclaim_reent+0xb4>
 8008864:	4620      	mov	r0, r4
 8008866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800886a:	4718      	bx	r3
 800886c:	bd70      	pop	{r4, r5, r6, pc}
 800886e:	bf00      	nop
 8008870:	20000014 	.word	0x20000014

08008874 <__libc_init_array>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	2600      	movs	r6, #0
 8008878:	4d0c      	ldr	r5, [pc, #48]	@ (80088ac <__libc_init_array+0x38>)
 800887a:	4c0d      	ldr	r4, [pc, #52]	@ (80088b0 <__libc_init_array+0x3c>)
 800887c:	1b64      	subs	r4, r4, r5
 800887e:	10a4      	asrs	r4, r4, #2
 8008880:	42a6      	cmp	r6, r4
 8008882:	d109      	bne.n	8008898 <__libc_init_array+0x24>
 8008884:	f000 f87e 	bl	8008984 <_init>
 8008888:	2600      	movs	r6, #0
 800888a:	4d0a      	ldr	r5, [pc, #40]	@ (80088b4 <__libc_init_array+0x40>)
 800888c:	4c0a      	ldr	r4, [pc, #40]	@ (80088b8 <__libc_init_array+0x44>)
 800888e:	1b64      	subs	r4, r4, r5
 8008890:	10a4      	asrs	r4, r4, #2
 8008892:	42a6      	cmp	r6, r4
 8008894:	d105      	bne.n	80088a2 <__libc_init_array+0x2e>
 8008896:	bd70      	pop	{r4, r5, r6, pc}
 8008898:	f855 3b04 	ldr.w	r3, [r5], #4
 800889c:	4798      	blx	r3
 800889e:	3601      	adds	r6, #1
 80088a0:	e7ee      	b.n	8008880 <__libc_init_array+0xc>
 80088a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a6:	4798      	blx	r3
 80088a8:	3601      	adds	r6, #1
 80088aa:	e7f2      	b.n	8008892 <__libc_init_array+0x1e>
 80088ac:	08008abc 	.word	0x08008abc
 80088b0:	08008abc 	.word	0x08008abc
 80088b4:	08008abc 	.word	0x08008abc
 80088b8:	08008ac0 	.word	0x08008ac0

080088bc <__retarget_lock_acquire_recursive>:
 80088bc:	4770      	bx	lr

080088be <__retarget_lock_release_recursive>:
 80088be:	4770      	bx	lr

080088c0 <memcpy>:
 80088c0:	440a      	add	r2, r1
 80088c2:	4291      	cmp	r1, r2
 80088c4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80088c8:	d100      	bne.n	80088cc <memcpy+0xc>
 80088ca:	4770      	bx	lr
 80088cc:	b510      	push	{r4, lr}
 80088ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088d2:	4291      	cmp	r1, r2
 80088d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088d8:	d1f9      	bne.n	80088ce <memcpy+0xe>
 80088da:	bd10      	pop	{r4, pc}

080088dc <_free_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4605      	mov	r5, r0
 80088e0:	2900      	cmp	r1, #0
 80088e2:	d040      	beq.n	8008966 <_free_r+0x8a>
 80088e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e8:	1f0c      	subs	r4, r1, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bfb8      	it	lt
 80088ee:	18e4      	addlt	r4, r4, r3
 80088f0:	f000 f83c 	bl	800896c <__malloc_lock>
 80088f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008968 <_free_r+0x8c>)
 80088f6:	6813      	ldr	r3, [r2, #0]
 80088f8:	b933      	cbnz	r3, 8008908 <_free_r+0x2c>
 80088fa:	6063      	str	r3, [r4, #4]
 80088fc:	6014      	str	r4, [r2, #0]
 80088fe:	4628      	mov	r0, r5
 8008900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008904:	f000 b838 	b.w	8008978 <__malloc_unlock>
 8008908:	42a3      	cmp	r3, r4
 800890a:	d908      	bls.n	800891e <_free_r+0x42>
 800890c:	6820      	ldr	r0, [r4, #0]
 800890e:	1821      	adds	r1, r4, r0
 8008910:	428b      	cmp	r3, r1
 8008912:	bf01      	itttt	eq
 8008914:	6819      	ldreq	r1, [r3, #0]
 8008916:	685b      	ldreq	r3, [r3, #4]
 8008918:	1809      	addeq	r1, r1, r0
 800891a:	6021      	streq	r1, [r4, #0]
 800891c:	e7ed      	b.n	80088fa <_free_r+0x1e>
 800891e:	461a      	mov	r2, r3
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	b10b      	cbz	r3, 8008928 <_free_r+0x4c>
 8008924:	42a3      	cmp	r3, r4
 8008926:	d9fa      	bls.n	800891e <_free_r+0x42>
 8008928:	6811      	ldr	r1, [r2, #0]
 800892a:	1850      	adds	r0, r2, r1
 800892c:	42a0      	cmp	r0, r4
 800892e:	d10b      	bne.n	8008948 <_free_r+0x6c>
 8008930:	6820      	ldr	r0, [r4, #0]
 8008932:	4401      	add	r1, r0
 8008934:	1850      	adds	r0, r2, r1
 8008936:	4283      	cmp	r3, r0
 8008938:	6011      	str	r1, [r2, #0]
 800893a:	d1e0      	bne.n	80088fe <_free_r+0x22>
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	4408      	add	r0, r1
 8008942:	6010      	str	r0, [r2, #0]
 8008944:	6053      	str	r3, [r2, #4]
 8008946:	e7da      	b.n	80088fe <_free_r+0x22>
 8008948:	d902      	bls.n	8008950 <_free_r+0x74>
 800894a:	230c      	movs	r3, #12
 800894c:	602b      	str	r3, [r5, #0]
 800894e:	e7d6      	b.n	80088fe <_free_r+0x22>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	1821      	adds	r1, r4, r0
 8008954:	428b      	cmp	r3, r1
 8008956:	bf01      	itttt	eq
 8008958:	6819      	ldreq	r1, [r3, #0]
 800895a:	685b      	ldreq	r3, [r3, #4]
 800895c:	1809      	addeq	r1, r1, r0
 800895e:	6021      	streq	r1, [r4, #0]
 8008960:	6063      	str	r3, [r4, #4]
 8008962:	6054      	str	r4, [r2, #4]
 8008964:	e7cb      	b.n	80088fe <_free_r+0x22>
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20001d64 	.word	0x20001d64

0800896c <__malloc_lock>:
 800896c:	4801      	ldr	r0, [pc, #4]	@ (8008974 <__malloc_lock+0x8>)
 800896e:	f7ff bfa5 	b.w	80088bc <__retarget_lock_acquire_recursive>
 8008972:	bf00      	nop
 8008974:	20001d60 	.word	0x20001d60

08008978 <__malloc_unlock>:
 8008978:	4801      	ldr	r0, [pc, #4]	@ (8008980 <__malloc_unlock+0x8>)
 800897a:	f7ff bfa0 	b.w	80088be <__retarget_lock_release_recursive>
 800897e:	bf00      	nop
 8008980:	20001d60 	.word	0x20001d60

08008984 <_init>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr

08008990 <_fini>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	bf00      	nop
 8008994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008996:	bc08      	pop	{r3}
 8008998:	469e      	mov	lr, r3
 800899a:	4770      	bx	lr
